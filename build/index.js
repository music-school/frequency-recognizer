/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["frequencyRecognizer"] = factory();
	else
		root["frequencyRecognizer"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/@babel/runtime/helpers/asyncToGenerator.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/@babel/runtime/helpers/classCallCheck.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/@babel/runtime/helpers/defineProperty.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/@babel/runtime/helpers/typeof.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/@babel/runtime/regenerator/index.js?");

/***/ }),

/***/ "./external/aubio.js":
/*!***************************!*\
  !*** ./external/aubio.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("var __dirname = \"/\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);\n\n\nvar Aubio = function Aubio(_Aubio) {\n  _Aubio = _Aubio || {};\n  var c;\n  c || (c = typeof _Aubio !== 'undefined' ? _Aubio : {});\n  var n = {},\n      r;\n\n  for (r in c) {\n    c.hasOwnProperty(r) && (n[r] = c[r]);\n  }\n\n  c.arguments = [];\n  c.thisProgram = \"./this.program\";\n\n  c.quit = function (a, b) {\n    throw b;\n  };\n\n  c.preRun = [];\n  c.postRun = [];\n  var u = !1,\n      v = !1,\n      aa = !1,\n      ba = !1;\n  u = \"object\" === (typeof window === \"undefined\" ? \"undefined\" : _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(window));\n  v = \"function\" === typeof importScripts;\n  aa = \"object\" === (typeof process === \"undefined\" ? \"undefined\" : _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(process)) && \"function\" === \"function\" && !u && !v;\n  ba = !u && !aa && !v;\n  var w = \"\";\n\n  function ca(a) {\n    return c.locateFile ? c.locateFile(a, w) : w + a;\n  }\n\n  if (aa) {\n    w = __dirname + \"/\";\n    var da, ea;\n\n    c.read = function (a, b) {\n      da || (da = __webpack_require__(/*! fs */ \"?65c5\"));\n      ea || (ea = __webpack_require__(/*! path */ \"./node_modules/path/path.js\"));\n      a = ea.normalize(a);\n      a = da.readFileSync(a);\n      return b ? a : a.toString();\n    };\n\n    c.readBinary = function (a) {\n      a = c.read(a, !0);\n      a.buffer || (a = new Uint8Array(a));\n      assert(a.buffer);\n      return a;\n    };\n\n    1 < process.argv.length && (c.thisProgram = process.argv[1].replace(/\\\\/g, \"/\"));\n    c.arguments = process.argv.slice(2);\n    process.on(\"uncaughtException\", function (a) {\n      throw a;\n    });\n    process.on(\"unhandledRejection\", function () {\n      process.exit(1);\n    });\n\n    c.quit = function (a) {\n      process.exit(a);\n    };\n\n    c.inspect = function () {\n      return \"[Emscripten Module object]\";\n    };\n  } else if (ba) \"undefined\" != typeof read && (c.read = function (a) {\n    return read(a);\n  }), c.readBinary = function (a) {\n    if (\"function\" === typeof readbuffer) return new Uint8Array(readbuffer(a));\n    a = read(a, \"binary\");\n    assert(\"object\" === _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(a));\n    return a;\n  }, \"undefined\" != typeof scriptArgs ? c.arguments = scriptArgs : \"undefined\" != typeof arguments && (c.arguments = arguments), \"function\" === typeof quit && (c.quit = function (a) {\n    quit(a);\n  });else if (u || v) {\n    if (u) {\n      var fa = this._currentScript || document.currentScript;\n      0 !== fa.src.indexOf(\"blob:\") && (w = fa.src.split(\"/\").slice(0, -1).join(\"/\") + \"/\");\n    } else v && (w = self.location.href.split(\"/\").slice(0, -1).join(\"/\") + \"/\");\n\n    c.read = function (a) {\n      var b = new XMLHttpRequest();\n      b.open(\"GET\", a, !1);\n      b.send(null);\n      return b.responseText;\n    };\n\n    v && (c.readBinary = function (a) {\n      var b = new XMLHttpRequest();\n      b.open(\"GET\", a, !1);\n      b.responseType = \"arraybuffer\";\n      b.send(null);\n      return new Uint8Array(b.response);\n    });\n\n    c.readAsync = function (a, b, d) {\n      var e = new XMLHttpRequest();\n      e.open(\"GET\", a, !0);\n      e.responseType = \"arraybuffer\";\n\n      e.onload = function () {\n        200 == e.status || 0 == e.status && e.response ? b(e.response) : d();\n      };\n\n      e.onerror = d;\n      e.send(null);\n    };\n\n    c.setWindowTitle = function (a) {\n      document.title = a;\n    };\n  }\n\n  var ha = c.print || (\"undefined\" !== typeof console ? console.log.bind(console) : \"undefined\" !== typeof print ? print : null),\n      x = c.printErr || (\"undefined\" !== typeof printErr ? printErr : \"undefined\" !== typeof console && console.warn.bind(console) || ha);\n\n  for (r in n) {\n    n.hasOwnProperty(r) && (c[r] = n[r]);\n  }\n\n  n = void 0;\n\n  function ia(a) {\n    var b;\n    b || (b = 16);\n    return Math.ceil(a / b) * b;\n  }\n\n  var ja = {\n    \"f64-rem\": function f64Rem(a, b) {\n      return a % b;\n    },\n    \"debugger\": function _debugger() {\n      debugger;\n    }\n  },\n      ka = 0;\n\n  function assert(a, b) {\n    a || y(\"Assertion failed: \" + b);\n  }\n\n  var la = \"undefined\" !== typeof TextDecoder ? new TextDecoder(\"utf8\") : void 0;\n  \"undefined\" !== typeof TextDecoder && new TextDecoder(\"utf-16le\");\n  var buffer, ma, z, na, oa, A, B, pa, qa;\n\n  function ra() {\n    c.HEAP8 = ma = new Int8Array(buffer);\n    c.HEAP16 = na = new Int16Array(buffer);\n    c.HEAP32 = A = new Int32Array(buffer);\n    c.HEAPU8 = z = new Uint8Array(buffer);\n    c.HEAPU16 = oa = new Uint16Array(buffer);\n    c.HEAPU32 = B = new Uint32Array(buffer);\n    c.HEAPF32 = pa = new Float32Array(buffer);\n    c.HEAPF64 = qa = new Float64Array(buffer);\n  }\n\n  var sa, C, ta, ua, va, wa, xa;\n  sa = C = ta = ua = va = wa = xa = 0;\n\n  function ya() {\n    y(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \" + E + \", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \");\n  }\n\n  var za = c.TOTAL_STACK || 5242880,\n      E = c.TOTAL_MEMORY || 16777216;\n  E < za && x(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \" + E + \"! (TOTAL_STACK=\" + za + \")\");\n  c.buffer ? buffer = c.buffer : (\"object\" === (typeof WebAssembly === \"undefined\" ? \"undefined\" : _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(WebAssembly)) && \"function\" === typeof WebAssembly.Memory ? (c.wasmMemory = new WebAssembly.Memory({\n    initial: E / 65536,\n    maximum: E / 65536\n  }), buffer = c.wasmMemory.buffer) : buffer = new ArrayBuffer(E), c.buffer = buffer);\n  ra();\n\n  function Aa(a) {\n    for (; 0 < a.length;) {\n      var b = a.shift();\n      if (\"function\" == typeof b) b();else {\n        var d = b.B;\n        \"number\" === typeof d ? void 0 === b.F ? c.dynCall_v(d) : c.dynCall_vi(d, b.F) : d(void 0 === b.F ? null : b.F);\n      }\n    }\n  }\n\n  var Ba = [],\n      Ca = [],\n      Da = [],\n      Ea = [],\n      Fa = !1;\n\n  function Ga() {\n    var a = c.preRun.shift();\n    Ba.unshift(a);\n  }\n\n  var Ha = Math.cos,\n      Ia = Math.sin,\n      F = 0,\n      Ja = null,\n      G = null;\n  c.preloadedImages = {};\n  c.preloadedAudios = {};\n\n  function Ka(a) {\n    return String.prototype.startsWith ? a.startsWith(\"data:application/octet-stream;base64,\") : 0 === a.indexOf(\"data:application/octet-stream;base64,\");\n  }\n\n  (function () {\n    function a() {\n      try {\n        if (c.wasmBinary) return new Uint8Array(c.wasmBinary);\n        if (c.readBinary) return c.readBinary(f);\n        throw \"both async and sync fetching of the wasm failed\";\n      } catch (g) {\n        y(g);\n      }\n    }\n\n    function b() {\n      return c.wasmBinary || !u && !v || \"function\" !== typeof fetch ? new Promise(function (b) {\n        b(a());\n      }) : fetch(f, {\n        credentials: \"same-origin\"\n      }).then(function (a) {\n        if (!a.ok) throw \"failed to load wasm binary file at '\" + f + \"'\";\n        return a.arrayBuffer();\n      })[\"catch\"](function () {\n        return a();\n      });\n    }\n\n    function d(a) {\n      function d(a) {\n        k = a.exports;\n\n        if (k.memory) {\n          a = k.memory;\n          var b = c.buffer;\n          a.byteLength < b.byteLength && x(\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\");\n          b = new Int8Array(b);\n          new Int8Array(a).set(b);\n          c.buffer = buffer = a;\n          ra();\n        }\n\n        c.asm = k;\n        c.usingWasm = !0;\n        F--;\n        c.monitorRunDependencies && c.monitorRunDependencies(F);\n        0 == F && (null !== Ja && (clearInterval(Ja), Ja = null), G && (a = G, G = null, a()));\n      }\n\n      function e(a) {\n        d(a.instance);\n      }\n\n      function g(a) {\n        b().then(function (a) {\n          return WebAssembly.instantiate(a, h);\n        }).then(a)[\"catch\"](function (a) {\n          x(\"failed to asynchronously prepare wasm: \" + a);\n          y(a);\n        });\n      }\n\n      if (\"object\" !== (typeof WebAssembly === \"undefined\" ? \"undefined\" : _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(WebAssembly))) return x(\"no native wasm support detected\"), !1;\n      if (!(c.wasmMemory instanceof WebAssembly.Memory)) return x(\"no native wasm Memory in use\"), !1;\n      a.memory = c.wasmMemory;\n      h.global = {\n        NaN: NaN,\n        Infinity: Infinity\n      };\n      h[\"global.Math\"] = Math;\n      h.env = a;\n      F++;\n      c.monitorRunDependencies && c.monitorRunDependencies(F);\n      if (c.instantiateWasm) try {\n        return c.instantiateWasm(h, d);\n      } catch (vb) {\n        return x(\"Module.instantiateWasm callback failed with error: \" + vb), !1;\n      }\n      c.wasmBinary || \"function\" !== typeof WebAssembly.instantiateStreaming || Ka(f) || \"function\" !== typeof fetch ? g(e) : fetch(f, {\n        credentials: \"same-origin\"\n      }).then(function (response) {\n        return response.arrayBuffer();\n      }).then(function (bytes) {\n        return WebAssembly.instantiate(bytes, h);\n      }).then(e)[\"catch\"](function (a) {\n        x(\"wasm streaming compile failed: \" + a);\n        x(\"falling back to ArrayBuffer instantiation\");\n        g(e);\n      });\n      return {};\n    }\n\n    var e = \"aubio.wast\",\n        f = \"aubio.wasm\",\n        l = \"aubio.temp.asm.js\";\n    Ka(e) || (e = ca(e));\n    Ka(f) || (f = ca(f));\n    Ka(l) || (l = ca(l));\n    var h = {\n      global: null,\n      env: null,\n      asm2wasm: ja,\n      parent: c\n    },\n        k = null;\n    c.asmPreload = c.asm;\n    var m = c.reallocBuffer;\n\n    c.reallocBuffer = function (a) {\n      if (\"asmjs\" === p) var b = m(a);else a: {\n        var d = c.usingWasm ? 65536 : 16777216;\n        0 < a % d && (a += d - a % d);\n        d = c.buffer.byteLength;\n        if (c.usingWasm) try {\n          b = -1 !== c.wasmMemory.grow((a - d) / 65536) ? c.buffer = c.wasmMemory.buffer : null;\n          break a;\n        } catch (t) {\n          b = null;\n          break a;\n        }\n        b = void 0;\n      }\n      return b;\n    };\n\n    var p = \"\";\n\n    c.asm = function (a, b) {\n      if (!b.table) {\n        a = c.wasmTableSize;\n        void 0 === a && (a = 1024);\n        var e = c.wasmMaxTableSize;\n        b.table = \"object\" === (typeof WebAssembly === \"undefined\" ? \"undefined\" : _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(WebAssembly)) && \"function\" === typeof WebAssembly.Table ? void 0 !== e ? new WebAssembly.Table({\n          initial: a,\n          maximum: e,\n          element: \"anyfunc\"\n        }) : new WebAssembly.Table({\n          initial: a,\n          element: \"anyfunc\"\n        }) : Array(a);\n        c.wasmTable = b.table;\n      }\n\n      b.memoryBase || (b.memoryBase = c.STATIC_BASE);\n      b.tableBase || (b.tableBase = 0);\n      b = d(b);\n      assert(b, \"no binaryen method succeeded.\");\n      return b;\n    };\n  })();\n\n  sa = 1024;\n  C = sa + 9312;\n  Ca.push({\n    B: function B() {\n      La();\n    }\n  }, {\n    B: function B() {\n      Ma();\n    }\n  }, {\n    B: function B() {\n      Na();\n    }\n  }, {\n    B: function B() {\n      Oa();\n    }\n  });\n  c.STATIC_BASE = sa;\n  c.STATIC_BUMP = 9312;\n  C += 16;\n  var H = 0;\n\n  function I() {\n    H += 4;\n    return A[H - 4 >> 2];\n  }\n\n  var Pa = {};\n\n  function J(a, b) {\n    H = b;\n\n    try {\n      var d = I(),\n          e = I(),\n          f = I();\n      a = 0;\n      J.J || (J.J = [null, [], []], J.P = function (a, b) {\n        var d = J.J[a];\n        assert(d);\n\n        if (0 === b || 10 === b) {\n          a = 1 === a ? ha : x;\n\n          a: {\n            for (var e = b = 0; d[e];) {\n              ++e;\n            }\n\n            if (16 < e - b && d.subarray && la) b = la.decode(d.subarray(b, e));else for (e = \"\";;) {\n              var f = d[b++];\n\n              if (!f) {\n                b = e;\n                break a;\n              }\n\n              if (f & 128) {\n                var k = d[b++] & 63;\n                if (192 == (f & 224)) e += String.fromCharCode((f & 31) << 6 | k);else {\n                  var l = d[b++] & 63;\n                  if (224 == (f & 240)) f = (f & 15) << 12 | k << 6 | l;else {\n                    var h = d[b++] & 63;\n                    if (240 == (f & 248)) f = (f & 7) << 18 | k << 12 | l << 6 | h;else {\n                      var bb = d[b++] & 63;\n                      if (248 == (f & 252)) f = (f & 3) << 24 | k << 18 | l << 12 | h << 6 | bb;else {\n                        var m = d[b++] & 63;\n                        f = (f & 1) << 30 | k << 24 | l << 18 | h << 12 | bb << 6 | m;\n                      }\n                    }\n                  }\n                  65536 > f ? e += String.fromCharCode(f) : (f -= 65536, e += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));\n                }\n              } else e += String.fromCharCode(f);\n            }\n          }\n\n          a(b);\n          d.length = 0;\n        } else d.push(b);\n      });\n\n      for (b = 0; b < f; b++) {\n        for (var l = A[e + 8 * b >> 2], h = A[e + (8 * b + 4) >> 2], k = 0; k < h; k++) {\n          J.P(d, z[l + k]);\n        }\n\n        a += h;\n      }\n\n      return a;\n    } catch (m) {\n      return \"undefined\" !== typeof FS && m instanceof FS.I || y(m), -m.L;\n    }\n  }\n\n  function Qa(a) {\n    switch (a) {\n      case 1:\n        return 0;\n\n      case 2:\n        return 1;\n\n      case 4:\n        return 2;\n\n      case 8:\n        return 3;\n\n      default:\n        throw new TypeError(\"Unknown type size: \" + a);\n    }\n  }\n\n  var Ra = void 0;\n\n  function K(a) {\n    for (var b = \"\"; z[a];) {\n      b += Ra[z[a++]];\n    }\n\n    return b;\n  }\n\n  var L = {},\n      M = {},\n      Sa = {};\n\n  function Ta(a) {\n    if (void 0 === a) return \"_unknown\";\n    a = a.replace(/[^a-zA-Z0-9_]/g, \"$\");\n    var b = a.charCodeAt(0);\n    return 48 <= b && 57 >= b ? \"_\" + a : a;\n  }\n\n  function Ua(a, b) {\n    a = Ta(a);\n    return new Function(\"body\", \"return function \" + a + '() {\\n    \"use strict\";    return body.apply(this, arguments);\\n};\\n')(b);\n  }\n\n  function Va(a) {\n    var b = Error,\n        d = Ua(a, function (b) {\n      this.name = a;\n      this.message = b;\n      b = Error(b).stack;\n      void 0 !== b && (this.stack = this.toString() + \"\\n\" + b.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n    });\n    d.prototype = Object.create(b.prototype);\n    d.prototype.constructor = d;\n\n    d.prototype.toString = function () {\n      return void 0 === this.message ? this.name : this.name + \": \" + this.message;\n    };\n\n    return d;\n  }\n\n  var O = void 0;\n\n  function P(a) {\n    throw new O(a);\n  }\n\n  var Wa = void 0;\n\n  function Xa(a) {\n    throw new Wa(a);\n  }\n\n  function Ya(a, b, d) {\n    function e(b) {\n      b = d(b);\n      b.length !== a.length && Xa(\"Mismatched type converter count\");\n\n      for (var e = 0; e < a.length; ++e) {\n        Q(a[e], b[e]);\n      }\n    }\n\n    a.forEach(function (a) {\n      Sa[a] = b;\n    });\n    var f = Array(b.length),\n        l = [],\n        h = 0;\n    b.forEach(function (a, b) {\n      M.hasOwnProperty(a) ? f[b] = M[a] : (l.push(a), L.hasOwnProperty(a) || (L[a] = []), L[a].push(function () {\n        f[b] = M[a];\n        ++h;\n        h === l.length && e(f);\n      }));\n    });\n    0 === l.length && e(f);\n  }\n\n  function Q(a, b, d) {\n    d = d || {};\n    if (!(\"argPackAdvance\" in b)) throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n    var e = b.name;\n    a || P('type \"' + e + '\" must have a positive integer typeid pointer');\n\n    if (M.hasOwnProperty(a)) {\n      if (d.X) return;\n      P(\"Cannot register type '\" + e + \"' twice\");\n    }\n\n    M[a] = b;\n    delete Sa[a];\n    L.hasOwnProperty(a) && (b = L[a], delete L[a], b.forEach(function (a) {\n      a();\n    }));\n  }\n\n  function Za(a) {\n    P(a.a.f.b.name + \" instance already deleted\");\n  }\n\n  var $a = void 0,\n      ab = [];\n\n  function cb() {\n    for (; ab.length;) {\n      var a = ab.pop();\n      a.a.s = !1;\n      a[\"delete\"]();\n    }\n  }\n\n  function R() {}\n\n  var db = {};\n\n  function eb(a, b, d) {\n    if (void 0 === a[b].j) {\n      var e = a[b];\n\n      a[b] = function () {\n        a[b].j.hasOwnProperty(arguments.length) || P(\"Function '\" + d + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + a[b].j + \")!\");\n        return a[b].j[arguments.length].apply(this, arguments);\n      };\n\n      a[b].j = [];\n      a[b].j[e.A] = e;\n    }\n  }\n\n  function fb(a, b) {\n    c.hasOwnProperty(a) ? (P(\"Cannot register public name '\" + a + \"' twice\"), eb(c, a, a), c.hasOwnProperty(void 0) && P(\"Cannot register multiple overloads of a function with the same number of arguments (undefined)!\"), c[a].j[void 0] = b) : c[a] = b;\n  }\n\n  function gb(a, b, d, e, f, l, h, k) {\n    this.name = a;\n    this.constructor = b;\n    this.u = d;\n    this.o = e;\n    this.i = f;\n    this.T = l;\n    this.w = h;\n    this.S = k;\n    this.Z = [];\n  }\n\n  function hb(a, b, d) {\n    for (; b !== d;) {\n      b.w || P(\"Expected null or instance of \" + d.name + \", got an instance of \" + b.name), a = b.w(a), b = b.i;\n    }\n\n    return a;\n  }\n\n  function ib(a, b) {\n    if (null === b) return this.G && P(\"null is not a valid \" + this.name), 0;\n    b.a || P('Cannot pass \"' + S(b) + '\" as a ' + this.name);\n    b.a.c || P(\"Cannot pass deleted object as a pointer of type \" + this.name);\n    return hb(b.a.c, b.a.f.b, this.b);\n  }\n\n  function jb(a, b) {\n    if (null === b) {\n      this.G && P(\"null is not a valid \" + this.name);\n\n      if (this.D) {\n        var d = this.$();\n        null !== a && a.push(this.o, d);\n        return d;\n      }\n\n      return 0;\n    }\n\n    b.a || P('Cannot pass \"' + S(b) + '\" as a ' + this.name);\n    b.a.c || P(\"Cannot pass deleted object as a pointer of type \" + this.name);\n    !this.C && b.a.f.C && P(\"Cannot convert argument of type \" + (b.a.h ? b.a.h.name : b.a.f.name) + \" to parameter type \" + this.name);\n    d = hb(b.a.c, b.a.f.b, this.b);\n    if (this.D) switch (void 0 === b.a.g && P(\"Passing raw pointer to smart pointer is illegal\"), this.ba) {\n      case 0:\n        b.a.h === this ? d = b.a.g : P(\"Cannot convert argument of type \" + (b.a.h ? b.a.h.name : b.a.f.name) + \" to parameter type \" + this.name);\n        break;\n\n      case 1:\n        d = b.a.g;\n        break;\n\n      case 2:\n        if (b.a.h === this) d = b.a.g;else {\n          var e = b.clone();\n          d = this.aa(d, T(function () {\n            e[\"delete\"]();\n          }));\n          null !== a && a.push(this.o, d);\n        }\n        break;\n\n      default:\n        P(\"Unsupporting sharing policy\");\n    }\n    return d;\n  }\n\n  function kb(a, b) {\n    if (null === b) return this.G && P(\"null is not a valid \" + this.name), 0;\n    b.a || P('Cannot pass \"' + S(b) + '\" as a ' + this.name);\n    b.a.c || P(\"Cannot pass deleted object as a pointer of type \" + this.name);\n    b.a.f.C && P(\"Cannot convert argument of type \" + b.a.f.name + \" to parameter type \" + this.name);\n    return hb(b.a.c, b.a.f.b, this.b);\n  }\n\n  function lb(a) {\n    return this.fromWireType(B[a >> 2]);\n  }\n\n  function ob(a, b, d) {\n    if (b === d) return a;\n    if (void 0 === d.i) return null;\n    a = ob(a, b, d.i);\n    return null === a ? null : d.S(a);\n  }\n\n  var pb = {};\n\n  function qb(a, b) {\n    for (void 0 === b && P(\"ptr should not be undefined\"); a.i;) {\n      b = a.w(b), a = a.i;\n    }\n\n    return pb[b];\n  }\n\n  function rb(a, b) {\n    b.f && b.c || Xa(\"makeClassHandle requires ptr and ptrType\");\n    !!b.h !== !!b.g && Xa(\"Both smartPtrType and smartPtr must be specified\");\n    b.count = {\n      value: 1\n    };\n    return Object.create(a, {\n      a: {\n        value: b\n      }\n    });\n  }\n\n  function U(a, b, d, e, f, l, h, k, m, p, g) {\n    this.name = a;\n    this.b = b;\n    this.G = d;\n    this.C = e;\n    this.D = f;\n    this.Y = l;\n    this.ba = h;\n    this.M = k;\n    this.$ = m;\n    this.aa = p;\n    this.o = g;\n    f || void 0 !== b.i ? this.toWireType = jb : (this.toWireType = e ? ib : kb, this.l = null);\n  }\n\n  function sb(a, b) {\n    c.hasOwnProperty(a) || Xa(\"Replacing nonexistant public symbol\");\n    c[a] = b;\n    c[a].A = void 0;\n  }\n\n  function V(a, b) {\n    a = K(a);\n    if (void 0 !== c[\"FUNCTION_TABLE_\" + a]) var d = c[\"FUNCTION_TABLE_\" + a][b];else if (\"undefined\" !== typeof FUNCTION_TABLE) d = FUNCTION_TABLE[b];else {\n      d = c.asm[\"dynCall_\" + a];\n      void 0 === d && (d = c.asm[\"dynCall_\" + a.replace(/f/g, \"d\")], void 0 === d && P(\"No dynCall invoker for signature: \" + a));\n\n      for (var e = [], f = 1; f < a.length; ++f) {\n        e.push(\"a\" + f);\n      }\n\n      f = \"return function \" + (\"dynCall_\" + a + \"_\" + b) + \"(\" + e.join(\", \") + \") {\\n\";\n      f += \"    return dynCall(rawFunction\" + (e.length ? \", \" : \"\") + e.join(\", \") + \");\\n\";\n      d = new Function(\"dynCall\", \"rawFunction\", f + \"};\\n\")(d, b);\n    }\n    \"function\" !== typeof d && P(\"unknown function pointer with signature \" + a + \": \" + b);\n    return d;\n  }\n\n  var tb = void 0;\n\n  function ub(a) {\n    a = wb(a);\n    var b = K(a);\n    X(a);\n    return b;\n  }\n\n  function xb(a, b) {\n    function d(a) {\n      f[a] || M[a] || (Sa[a] ? Sa[a].forEach(d) : (e.push(a), f[a] = !0));\n    }\n\n    var e = [],\n        f = {};\n    b.forEach(d);\n    throw new tb(a + \": \" + e.map(ub).join([\", \"]));\n  }\n\n  function yb(a, b) {\n    for (var d = [], e = 0; e < a; e++) {\n      d.push(A[(b >> 2) + e]);\n    }\n\n    return d;\n  }\n\n  function zb(a) {\n    for (; a.length;) {\n      var b = a.pop();\n      a.pop()(b);\n    }\n  }\n\n  function Ab(a) {\n    var b = Function;\n    if (!(b instanceof Function)) throw new TypeError(\"new_ called with constructor type \" + _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(b) + \" which is not a function\");\n    var d = Ua(b.name || \"unknownFunctionName\", function () {});\n    d.prototype = b.prototype;\n    d = new d();\n    a = b.apply(d, a);\n    return a instanceof Object ? a : d;\n  }\n\n  var Bb = [],\n      Y = [{}, {\n    value: void 0\n  }, {\n    value: null\n  }, {\n    value: !0\n  }, {\n    value: !1\n  }];\n\n  function Cb(a) {\n    4 < a && 0 === --Y[a].H && (Y[a] = void 0, Bb.push(a));\n  }\n\n  function T(a) {\n    switch (a) {\n      case void 0:\n        return 1;\n\n      case null:\n        return 2;\n\n      case !0:\n        return 3;\n\n      case !1:\n        return 4;\n\n      default:\n        var b = Bb.length ? Bb.pop() : Y.length;\n        Y[b] = {\n          H: 1,\n          value: a\n        };\n        return b;\n    }\n  }\n\n  function S(a) {\n    if (null === a) return \"null\";\n\n    var b = _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(a);\n\n    return \"object\" === b || \"array\" === b || \"function\" === b ? a.toString() : \"\" + a;\n  }\n\n  function Db(a, b) {\n    switch (b) {\n      case 2:\n        return function (a) {\n          return this.fromWireType(pa[a >> 2]);\n        };\n\n      case 3:\n        return function (a) {\n          return this.fromWireType(qa[a >> 3]);\n        };\n\n      default:\n        throw new TypeError(\"Unknown float type: \" + a);\n    }\n  }\n\n  function Eb(a, b, d) {\n    switch (b) {\n      case 0:\n        return d ? function (a) {\n          return ma[a];\n        } : function (a) {\n          return z[a];\n        };\n\n      case 1:\n        return d ? function (a) {\n          return na[a >> 1];\n        } : function (a) {\n          return oa[a >> 1];\n        };\n\n      case 2:\n        return d ? function (a) {\n          return A[a >> 2];\n        } : function (a) {\n          return B[a >> 2];\n        };\n\n      default:\n        throw new TypeError(\"Unknown integer type: \" + a);\n    }\n  }\n\n  function Z(a) {\n    a || P(\"Cannot use deleted val. handle = \" + a);\n    return Y[a].value;\n  }\n\n  function Fb(a, b) {\n    var d = M[a];\n    void 0 === d && P(b + \" has unknown type \" + ub(a));\n    return d;\n  }\n\n  for (var Gb = {}, Hb = Array(256), Ib = 0; 256 > Ib; ++Ib) {\n    Hb[Ib] = String.fromCharCode(Ib);\n  }\n\n  Ra = Hb;\n  O = c.BindingError = Va(\"BindingError\");\n  Wa = c.InternalError = Va(\"InternalError\");\n\n  R.prototype.isAliasOf = function (a) {\n    if (!(this instanceof R && a instanceof R)) return !1;\n    var b = this.a.f.b,\n        d = this.a.c,\n        e = a.a.f.b;\n\n    for (a = a.a.c; b.i;) {\n      d = b.w(d), b = b.i;\n    }\n\n    for (; e.i;) {\n      a = e.w(a), e = e.i;\n    }\n\n    return b === e && d === a;\n  };\n\n  R.prototype.clone = function () {\n    this.a.c || Za(this);\n    if (this.a.v) return this.a.count.value += 1, this;\n    var a = this.a;\n    a = Object.create(Object.getPrototypeOf(this), {\n      a: {\n        value: {\n          count: a.count,\n          s: a.s,\n          v: a.v,\n          c: a.c,\n          f: a.f,\n          g: a.g,\n          h: a.h\n        }\n      }\n    });\n    a.a.count.value += 1;\n    a.a.s = !1;\n    return a;\n  };\n\n  R.prototype[\"delete\"] = function () {\n    this.a.c || Za(this);\n    this.a.s && !this.a.v && P(\"Object already scheduled for deletion\");\n    --this.a.count.value;\n\n    if (0 === this.a.count.value) {\n      var a = this.a;\n      a.g ? a.h.o(a.g) : a.f.b.o(a.c);\n    }\n\n    this.a.v || (this.a.g = void 0, this.a.c = void 0);\n  };\n\n  R.prototype.isDeleted = function () {\n    return !this.a.c;\n  };\n\n  R.prototype.deleteLater = function () {\n    this.a.c || Za(this);\n    this.a.s && !this.a.v && P(\"Object already scheduled for deletion\");\n    ab.push(this);\n    1 === ab.length && $a && $a(cb);\n    this.a.s = !0;\n    return this;\n  };\n\n  U.prototype.U = function (a) {\n    this.M && (a = this.M(a));\n    return a;\n  };\n\n  U.prototype.K = function (a) {\n    this.o && this.o(a);\n  };\n\n  U.prototype.argPackAdvance = 8;\n  U.prototype.readValueFromPointer = lb;\n\n  U.prototype.deleteObject = function (a) {\n    if (null !== a) a[\"delete\"]();\n  };\n\n  U.prototype.fromWireType = function (a) {\n    function b() {\n      return this.D ? rb(this.b.u, {\n        f: this.Y,\n        c: d,\n        h: this,\n        g: a\n      }) : rb(this.b.u, {\n        f: this,\n        c: a\n      });\n    }\n\n    var d = this.U(a);\n    if (!d) return this.K(a), null;\n    var e = qb(this.b, d);\n\n    if (void 0 !== e) {\n      if (0 === e.a.count.value) return e.a.c = d, e.a.g = a, e.clone();\n      e = e.clone();\n      this.K(a);\n      return e;\n    }\n\n    e = this.b.T(d);\n    e = db[e];\n    if (!e) return b.call(this);\n    e = this.C ? e.R : e.pointerType;\n    var f = ob(d, this.b, e.b);\n    return null === f ? b.call(this) : this.D ? rb(e.b.u, {\n      f: e,\n      c: f,\n      h: this,\n      g: a\n    }) : rb(e.b.u, {\n      f: e,\n      c: f\n    });\n  };\n\n  c.getInheritedInstanceCount = function () {\n    return Object.keys(pb).length;\n  };\n\n  c.getLiveInheritedInstances = function () {\n    var a = [],\n        b;\n\n    for (b in pb) {\n      pb.hasOwnProperty(b) && a.push(pb[b]);\n    }\n\n    return a;\n  };\n\n  c.flushPendingDeletes = cb;\n\n  c.setDelayFunction = function (a) {\n    $a = a;\n    ab.length && $a && $a(cb);\n  };\n\n  tb = c.UnboundTypeError = Va(\"UnboundTypeError\");\n\n  c.count_emval_handles = function () {\n    for (var a = 0, b = 5; b < Y.length; ++b) {\n      void 0 !== Y[b] && ++a;\n    }\n\n    return a;\n  };\n\n  c.get_first_emval = function () {\n    for (var a = 5; a < Y.length; ++a) {\n      if (void 0 !== Y[a]) return Y[a];\n    }\n\n    return null;\n  };\n\n  var Jb = C;\n  C = C + 4 + 15 & -16;\n  xa = Jb;\n  ta = ua = ia(C);\n  va = ta + za;\n  wa = ia(va);\n  A[xa >> 2] = wa;\n  c.wasmTableSize = 83;\n  c.wasmMaxTableSize = 83;\n  c.N = {};\n  c.O = {\n    abort: y,\n    enlargeMemory: function enlargeMemory() {\n      ya();\n    },\n    getTotalMemory: function getTotalMemory() {\n      return E;\n    },\n    abortOnCannotGrowMemory: ya,\n    ___setErrNo: function ___setErrNo(a) {\n      c.___errno_location && (A[c.___errno_location() >> 2] = a);\n      return a;\n    },\n    ___syscall140: function ___syscall140(a, b) {\n      H = b;\n\n      try {\n        var d = Pa.V();\n        I();\n        var e = I(),\n            f = I(),\n            l = I();\n        FS.ea(d, e, l);\n        A[f >> 2] = d.position;\n        d.W && 0 === e && 0 === l && (d.W = null);\n        return 0;\n      } catch (h) {\n        return \"undefined\" !== typeof FS && h instanceof FS.I || y(h), -h.L;\n      }\n    },\n    ___syscall146: J,\n    ___syscall54: function ___syscall54(a, b) {\n      H = b;\n      return 0;\n    },\n    ___syscall6: function ___syscall6(a, b) {\n      H = b;\n\n      try {\n        var d = Pa.V();\n        FS.close(d);\n        return 0;\n      } catch (e) {\n        return \"undefined\" !== typeof FS && e instanceof FS.I || y(e), -e.L;\n      }\n    },\n    __embind_register_bool: function __embind_register_bool(a, b, d, e, f) {\n      var l = Qa(d);\n      b = K(b);\n      Q(a, {\n        name: b,\n        fromWireType: function fromWireType(a) {\n          return !!a;\n        },\n        toWireType: function toWireType(a, b) {\n          return b ? e : f;\n        },\n        argPackAdvance: 8,\n        readValueFromPointer: function readValueFromPointer(a) {\n          if (1 === d) var e = ma;else if (2 === d) e = na;else if (4 === d) e = A;else throw new TypeError(\"Unknown boolean type size: \" + b);\n          return this.fromWireType(e[a >> l]);\n        },\n        l: null\n      });\n    },\n    __embind_register_class: function __embind_register_class(a, b, d, e, f, l, h, k, m, p, g, q, D) {\n      g = K(g);\n      l = V(f, l);\n      k && (k = V(h, k));\n      p && (p = V(m, p));\n      D = V(q, D);\n      var t = Ta(g);\n      fb(t, function () {\n        xb(\"Cannot construct \" + g + \" due to unbound types\", [e]);\n      });\n      Ya([a, b, d], e ? [e] : [], function (b) {\n        b = b[0];\n\n        if (e) {\n          var d = b.b;\n          var f = d.u;\n        } else f = R.prototype;\n\n        b = Ua(t, function () {\n          if (Object.getPrototypeOf(this) !== h) throw new O(\"Use 'new' to construct \" + g);\n          if (void 0 === m.m) throw new O(g + \" has no accessible constructor\");\n          var a = m.m[arguments.length];\n          if (void 0 === a) throw new O(\"Tried to invoke ctor of \" + g + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(m.m).toString() + \") parameters instead!\");\n          return a.apply(this, arguments);\n        });\n        var h = Object.create(f, {\n          constructor: {\n            value: b\n          }\n        });\n        b.prototype = h;\n        var m = new gb(g, b, h, D, d, l, k, p);\n        d = new U(g, m, !0, !1, !1);\n        f = new U(g + \"*\", m, !1, !1, !1);\n        var q = new U(g + \" const*\", m, !1, !0, !1);\n        db[a] = {\n          pointerType: f,\n          R: q\n        };\n        sb(t, b);\n        return [d, f, q];\n      });\n    },\n    __embind_register_class_constructor: function __embind_register_class_constructor(a, b, d, e, f, l) {\n      var h = yb(b, d);\n      f = V(e, f);\n      Ya([], [a], function (a) {\n        a = a[0];\n        var d = \"constructor \" + a.name;\n        void 0 === a.b.m && (a.b.m = []);\n        if (void 0 !== a.b.m[b - 1]) throw new O(\"Cannot register multiple constructors with identical number of parameters (\" + (b - 1) + \") for class '\" + a.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n\n        a.b.m[b - 1] = function () {\n          xb(\"Cannot construct \" + a.name + \" due to unbound types\", h);\n        };\n\n        Ya([], h, function (e) {\n          a.b.m[b - 1] = function () {\n            arguments.length !== b - 1 && P(d + \" called with \" + arguments.length + \" arguments, expected \" + (b - 1));\n            var a = [],\n                h = Array(b);\n            h[0] = l;\n\n            for (var k = 1; k < b; ++k) {\n              h[k] = e[k].toWireType(a, arguments[k - 1]);\n            }\n\n            h = f.apply(null, h);\n            zb(a);\n            return e[0].fromWireType(h);\n          };\n\n          return [];\n        });\n        return [];\n      });\n    },\n    __embind_register_class_function: function __embind_register_class_function(a, b, d, e, f, l, h, k) {\n      var m = yb(d, e);\n      b = K(b);\n      l = V(f, l);\n      Ya([], [a], function (a) {\n        function e() {\n          xb(\"Cannot call \" + f + \" due to unbound types\", m);\n        }\n\n        a = a[0];\n        var f = a.name + \".\" + b;\n        k && a.b.Z.push(b);\n        var p = a.b.u,\n            t = p[b];\n        void 0 === t || void 0 === t.j && t.className !== a.name && t.A === d - 2 ? (e.A = d - 2, e.className = a.name, p[b] = e) : (eb(p, b, f), p[b].j[d - 2] = e);\n        Ya([], m, function (e) {\n          var k = f,\n              g = a,\n              m = l,\n              q = e.length;\n          2 > q && P(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n          var t = null !== e[1] && null !== g,\n              D = !1;\n\n          for (g = 1; g < e.length; ++g) {\n            if (null !== e[g] && void 0 === e[g].l) {\n              D = !0;\n              break;\n            }\n          }\n\n          var mb = \"void\" !== e[0].name,\n              N = \"\",\n              W = \"\";\n\n          for (g = 0; g < q - 2; ++g) {\n            N += (0 !== g ? \", \" : \"\") + \"arg\" + g, W += (0 !== g ? \", \" : \"\") + \"arg\" + g + \"Wired\";\n          }\n\n          k = \"return function \" + Ta(k) + \"(\" + N + \") {\\nif (arguments.length !== \" + (q - 2) + \") {\\nthrowBindingError('function \" + k + \" called with ' + arguments.length + ' arguments, expected \" + (q - 2) + \" args!');\\n}\\n\";\n          D && (k += \"var destructors = [];\\n\");\n          var nb = D ? \"destructors\" : \"null\";\n          N = \"throwBindingError invoker fn runDestructors retType classParam\".split(\" \");\n          m = [P, m, h, zb, e[0], e[1]];\n          t && (k += \"var thisWired = classParam.toWireType(\" + nb + \", this);\\n\");\n\n          for (g = 0; g < q - 2; ++g) {\n            k += \"var arg\" + g + \"Wired = argType\" + g + \".toWireType(\" + nb + \", arg\" + g + \"); // \" + e[g + 2].name + \"\\n\", N.push(\"argType\" + g), m.push(e[g + 2]);\n          }\n\n          t && (W = \"thisWired\" + (0 < W.length ? \", \" : \"\") + W);\n          k += (mb ? \"var rv = \" : \"\") + \"invoker(fn\" + (0 < W.length ? \", \" : \"\") + W + \");\\n\";\n          if (D) k += \"runDestructors(destructors);\\n\";else for (g = t ? 1 : 2; g < e.length; ++g) {\n            q = 1 === g ? \"thisWired\" : \"arg\" + (g - 2) + \"Wired\", null !== e[g].l && (k += q + \"_dtor(\" + q + \"); // \" + e[g].name + \"\\n\", N.push(q + \"_dtor\"), m.push(e[g].l));\n          }\n          mb && (k += \"var ret = retType.fromWireType(rv);\\nreturn ret;\\n\");\n          N.push(k + \"}\\n\");\n          e = Ab(N).apply(null, m);\n          void 0 === p[b].j ? (e.A = d - 2, p[b] = e) : p[b].j[d - 2] = e;\n          return [];\n        });\n        return [];\n      });\n    },\n    __embind_register_emval: function __embind_register_emval(a, b) {\n      b = K(b);\n      Q(a, {\n        name: b,\n        fromWireType: function fromWireType(a) {\n          var b = Y[a].value;\n          Cb(a);\n          return b;\n        },\n        toWireType: function toWireType(a, b) {\n          return T(b);\n        },\n        argPackAdvance: 8,\n        readValueFromPointer: lb,\n        l: null\n      });\n    },\n    __embind_register_float: function __embind_register_float(a, b, d) {\n      d = Qa(d);\n      b = K(b);\n      Q(a, {\n        name: b,\n        fromWireType: function fromWireType(a) {\n          return a;\n        },\n        toWireType: function toWireType(a, b) {\n          if (\"number\" !== typeof b && \"boolean\" !== typeof b) throw new TypeError('Cannot convert \"' + S(b) + '\" to ' + this.name);\n          return b;\n        },\n        argPackAdvance: 8,\n        readValueFromPointer: Db(b, d),\n        l: null\n      });\n    },\n    __embind_register_integer: function __embind_register_integer(a, b, d, e, f) {\n      function l(a) {\n        return a;\n      }\n\n      b = K(b);\n      -1 === f && (f = 4294967295);\n      var h = Qa(d);\n\n      if (0 === e) {\n        var k = 32 - 8 * d;\n\n        l = function l(a) {\n          return a << k >>> k;\n        };\n      }\n\n      var m = -1 != b.indexOf(\"unsigned\");\n      Q(a, {\n        name: b,\n        fromWireType: l,\n        toWireType: function toWireType(a, d) {\n          if (\"number\" !== typeof d && \"boolean\" !== typeof d) throw new TypeError('Cannot convert \"' + S(d) + '\" to ' + this.name);\n          if (d < e || d > f) throw new TypeError('Passing a number \"' + S(d) + '\" from JS side to C/C++ side to an argument of type \"' + b + '\", which is outside the valid range [' + e + \", \" + f + \"]!\");\n          return m ? d >>> 0 : d | 0;\n        },\n        argPackAdvance: 8,\n        readValueFromPointer: Eb(b, h, 0 !== e),\n        l: null\n      });\n    },\n    __embind_register_memory_view: function __embind_register_memory_view(a, b, d) {\n      function e(a) {\n        a >>= 2;\n        var b = B;\n        return new f(b.buffer, b[a + 1], b[a]);\n      }\n\n      var f = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][b];\n      d = K(d);\n      Q(a, {\n        name: d,\n        fromWireType: e,\n        argPackAdvance: 8,\n        readValueFromPointer: e\n      }, {\n        X: !0\n      });\n    },\n    __embind_register_std_string: function __embind_register_std_string(a, b) {\n      b = K(b);\n      Q(a, {\n        name: b,\n        fromWireType: function fromWireType(a) {\n          for (var b = B[a >> 2], d = Array(b), l = 0; l < b; ++l) {\n            d[l] = String.fromCharCode(z[a + 4 + l]);\n          }\n\n          X(a);\n          return d.join(\"\");\n        },\n        toWireType: function toWireType(a, b) {\n          function d(a, b) {\n            return a[b];\n          }\n\n          function e(a, b) {\n            return a.charCodeAt(b);\n          }\n\n          b instanceof ArrayBuffer && (b = new Uint8Array(b));\n          var h;\n          b instanceof Uint8Array ? h = d : b instanceof Uint8ClampedArray ? h = d : b instanceof Int8Array ? h = d : \"string\" === typeof b ? h = e : P(\"Cannot pass non-string to std::string\");\n          var k = b.length,\n              m = Kb(4 + k);\n          B[m >> 2] = k;\n\n          for (var p = 0; p < k; ++p) {\n            var g = h(b, p);\n            255 < g && (X(m), P(\"String has UTF-16 code units that do not fit in 8 bits\"));\n            z[m + 4 + p] = g;\n          }\n\n          null !== a && a.push(X, m);\n          return m;\n        },\n        argPackAdvance: 8,\n        readValueFromPointer: lb,\n        l: function l(a) {\n          X(a);\n        }\n      });\n    },\n    __embind_register_std_wstring: function __embind_register_std_wstring(a, b, d) {\n      d = K(d);\n\n      if (2 === b) {\n        var e = function e() {\n          return oa;\n        };\n\n        var f = 1;\n      } else 4 === b && (e = function e() {\n        return B;\n      }, f = 2);\n\n      Q(a, {\n        name: d,\n        fromWireType: function fromWireType(a) {\n          for (var b = e(), d = B[a >> 2], l = Array(d), p = a + 4 >> f, g = 0; g < d; ++g) {\n            l[g] = String.fromCharCode(b[p + g]);\n          }\n\n          X(a);\n          return l.join(\"\");\n        },\n        toWireType: function toWireType(a, d) {\n          var k = e(),\n              h = d.length,\n              l = Kb(4 + h * b);\n          B[l >> 2] = h;\n\n          for (var g = l + 4 >> f, q = 0; q < h; ++q) {\n            k[g + q] = d.charCodeAt(q);\n          }\n\n          null !== a && a.push(X, l);\n          return l;\n        },\n        argPackAdvance: 8,\n        readValueFromPointer: lb,\n        l: function l(a) {\n          X(a);\n        }\n      });\n    },\n    __embind_register_void: function __embind_register_void(a, b) {\n      b = K(b);\n      Q(a, {\n        da: !0,\n        name: b,\n        argPackAdvance: 0,\n        fromWireType: function fromWireType() {},\n        toWireType: function toWireType() {}\n      });\n    },\n    __emval_as: function __emval_as(a, b, d) {\n      a = Z(a);\n      b = Fb(b, \"emval::as\");\n      var e = [],\n          f = T(e);\n      A[d >> 2] = f;\n      return b.toWireType(e, a);\n    },\n    __emval_decref: Cb,\n    __emval_get_property: function __emval_get_property(a, b) {\n      a = Z(a);\n      b = Z(b);\n      return T(a[b]);\n    },\n    __emval_incref: function __emval_incref(a) {\n      4 < a && (Y[a].H += 1);\n    },\n    __emval_new_array: function __emval_new_array() {\n      return T([]);\n    },\n    __emval_new_cstring: function __emval_new_cstring(a) {\n      var b = Gb[a];\n      return T(void 0 === b ? K(a) : b);\n    },\n    __emval_new_object: function __emval_new_object() {\n      return T({});\n    },\n    __emval_run_destructors: function __emval_run_destructors(a) {\n      zb(Y[a].value);\n      Cb(a);\n    },\n    __emval_set_property: function __emval_set_property(a, b, d) {\n      a = Z(a);\n      b = Z(b);\n      d = Z(d);\n      a[b] = d;\n    },\n    __emval_take_value: function __emval_take_value(a, b) {\n      a = Fb(a, \"_emval_take_value\");\n      a = a.readValueFromPointer(b);\n      return T(a);\n    },\n    _abort: function _abort() {\n      c.abort();\n    },\n    _emscripten_memcpy_big: function _emscripten_memcpy_big(a, b, d) {\n      z.set(z.subarray(b, b + d), a);\n      return a;\n    },\n    _llvm_cos_f32: Ha,\n    _llvm_log10_f32: function _llvm_log10_f32(a) {\n      return Math.log(a) / Math.LN10;\n    },\n    _llvm_sin_f32: Ia,\n    DYNAMICTOP_PTR: xa,\n    STACKTOP: ua\n  };\n  var Lb = c.asm(c.N, c.O, buffer);\n  c.asm = Lb;\n\n  var Oa = c.__GLOBAL__sub_I_bind_cpp = function () {\n    return c.asm.__GLOBAL__sub_I_bind_cpp.apply(null, arguments);\n  },\n      La = c.__GLOBAL__sub_I_fft_cc = function () {\n    return c.asm.__GLOBAL__sub_I_fft_cc.apply(null, arguments);\n  },\n      Na = c.__GLOBAL__sub_I_pitch_cc = function () {\n    return c.asm.__GLOBAL__sub_I_pitch_cc.apply(null, arguments);\n  },\n      Ma = c.__GLOBAL__sub_I_tempo_cc = function () {\n    return c.asm.__GLOBAL__sub_I_tempo_cc.apply(null, arguments);\n  },\n      wb = c.___getTypeName = function () {\n    return c.asm.___getTypeName.apply(null, arguments);\n  },\n      X = c._free = function () {\n    return c.asm._free.apply(null, arguments);\n  },\n      Kb = c._malloc = function () {\n    return c.asm._malloc.apply(null, arguments);\n  };\n\n  c.dynCall_ffii = function () {\n    return c.asm.dynCall_ffii.apply(null, arguments);\n  };\n\n  c.dynCall_fi = function () {\n    return c.asm.dynCall_fi.apply(null, arguments);\n  };\n\n  c.dynCall_fii = function () {\n    return c.asm.dynCall_fii.apply(null, arguments);\n  };\n\n  c.dynCall_fiii = function () {\n    return c.asm.dynCall_fiii.apply(null, arguments);\n  };\n\n  c.dynCall_ii = function () {\n    return c.asm.dynCall_ii.apply(null, arguments);\n  };\n\n  c.dynCall_iii = function () {\n    return c.asm.dynCall_iii.apply(null, arguments);\n  };\n\n  c.dynCall_iiii = function () {\n    return c.asm.dynCall_iiii.apply(null, arguments);\n  };\n\n  c.dynCall_iiiii = function () {\n    return c.asm.dynCall_iiiii.apply(null, arguments);\n  };\n\n  c.dynCall_iiiiii = function () {\n    return c.asm.dynCall_iiiiii.apply(null, arguments);\n  };\n\n  c.dynCall_v = function () {\n    return c.asm.dynCall_v.apply(null, arguments);\n  };\n\n  c.dynCall_vi = function () {\n    return c.asm.dynCall_vi.apply(null, arguments);\n  };\n\n  c.dynCall_viii = function () {\n    return c.asm.dynCall_viii.apply(null, arguments);\n  };\n\n  c.asm = Lb;\n\n  c.then = function (a) {\n    if (c.calledRun) a(c);else {\n      var b = c.onRuntimeInitialized;\n\n      c.onRuntimeInitialized = function () {\n        b && b();\n        a(c);\n      };\n    }\n    return c;\n  };\n\n  G = function Mb() {\n    c.calledRun || Nb();\n    c.calledRun || (G = Mb);\n  };\n\n  function Nb() {\n    function a() {\n      if (!c.calledRun && (c.calledRun = !0, !ka)) {\n        Fa || (Fa = !0, Aa(Ca));\n        Aa(Da);\n        if (c.onRuntimeInitialized) c.onRuntimeInitialized();\n        if (c.postRun) for (\"function\" == typeof c.postRun && (c.postRun = [c.postRun]); c.postRun.length;) {\n          var a = c.postRun.shift();\n          Ea.unshift(a);\n        }\n        Aa(Ea);\n      }\n    }\n\n    if (!(0 < F)) {\n      if (c.preRun) for (\"function\" == typeof c.preRun && (c.preRun = [c.preRun]); c.preRun.length;) {\n        Ga();\n      }\n      Aa(Ba);\n      0 < F || c.calledRun || (c.setStatus ? (c.setStatus(\"Running...\"), setTimeout(function () {\n        setTimeout(function () {\n          c.setStatus(\"\");\n        }, 1);\n        a();\n      }, 1)) : a());\n    }\n  }\n\n  c.run = Nb;\n\n  function y(a) {\n    if (c.onAbort) c.onAbort(a);\n    void 0 !== a ? (ha(a), x(a), a = JSON.stringify(a)) : a = \"\";\n    ka = !0;\n    throw \"abort(\" + a + \"). Build with -s ASSERTIONS=1 for more info.\";\n  }\n\n  c.abort = y;\n  if (c.preInit) for (\"function\" == typeof c.preInit && (c.preInit = [c.preInit]); 0 < c.preInit.length;) {\n    c.preInit.pop()();\n  }\n  c.noExitRuntime = !0;\n  Nb();\n  return _Aubio;\n};\n\nAubio = Aubio.bind({\n  _currentScript: typeof document !== 'undefined' ? document.currentScript : undefined\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Aubio);\n\n//# sourceURL=webpack://frequencyRecognizer/./external/aubio.js?");

/***/ }),

/***/ "./lib/frequency-recognizer.js":
/*!*************************************!*\
  !*** ./lib/frequency-recognizer.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _external_aubio_wasm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../external/aubio.wasm */ \"./external/aubio.wasm\");\n/* harmony import */ var _external_aubio_wasm__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_external_aubio_wasm__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _external_aubio_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../external/aubio.js */ \"./external/aubio.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils */ \"./lib/utils.js\");\n\n\n\n\n\n\n\n\nvar FrequencyRecognizerNode = function FrequencyRecognizerNode(audioContext) {\n  var _this = this;\n\n  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, FrequencyRecognizerNode);\n\n  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"audioProcessCallback\", function (e) {\n    var frequency = _this.pitchDetector[\"do\"](e.inputBuffer.getChannelData(0));\n\n    console.log(frequency);\n\n    if (frequency) {\n      _this.frequency = frequency.toFixed(1);\n    }\n  });\n\n  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"startRecognize\", function () {\n    (0,_external_aubio_js__WEBPACK_IMPORTED_MODULE_5__.default)().then( /*#__PURE__*/function () {\n      var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(aubio) {\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.pitchDetector = new aubio.Pitch(\"default\", 2048, 1, _this.audioContext.sampleRate);\n                _context.next = 3;\n                return navigator.mediaDevices.getUserMedia({\n                  audio: true\n                }).then(function (stream) {\n                  _this.stream = stream;\n                  _this.scriptProcessor = _this.audioContext.createScriptProcessor(2048, 1, 1);\n                  _this.mediaStreamSource = _this.audioContext.createMediaStreamSource(stream);\n\n                  var analyser = _this.audioContext.createAnalyser();\n\n                  analyser.fftSize = 2048;\n\n                  _this.mediaStreamSource.connect(analyser);\n\n                  analyser.connect(_this.scriptProcessor);\n\n                  _this.scriptProcessor.connect(_this.audioContext.destination);\n\n                  _this.scriptProcessor.onaudioprocess = _this.audioProcessCallback;\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n\n  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"init\", function () {\n    (0,_utils__WEBPACK_IMPORTED_MODULE_6__.initGetUserMedia)();\n\n    _this.startRecognize();\n  });\n\n  _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(this, \"destroy\", function () {\n    _this.frequency = null;\n    _this.pitchDetector = null;\n\n    if (_this.scriptProcessor) {\n      _this.scriptProcessor.onaudioprocess = null;\n      _this.scriptProcessor = null;\n    }\n\n    if (_this.stream) {\n      _this.stream.getTracks().forEach(function (track) {\n        return track.stop();\n      });\n    }\n\n    if (_this.mediaStreamSource && _this.mediaStreamSource.mediaStream && _this.mediaStreamSource.mediaStream.stop) {\n      _this.mediaStreamSource.mediaStream.stop();\n    }\n  });\n\n  this.audioContext = audioContext || (0,_utils__WEBPACK_IMPORTED_MODULE_6__.getAudioContext)();\n  this.stream = null;\n  this.frequency = null;\n  this.pitchDetector = null;\n  this.mediaStreamSource = null;\n  this.scriptProcessor = null;\n};\n\nvar FrequencyRecognizerNodeWrapper = function () {\n  var instance;\n\n  function createInstance(audioContext) {\n    var object = new FrequencyRecognizerNode(audioContext);\n    return object;\n  }\n\n  return {\n    getInstance: function getInstance(audioContext) {\n      if (!instance) {\n        instance = createInstance(audioContext);\n      }\n\n      return instance;\n    }\n  };\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FrequencyRecognizerNodeWrapper);\n\n//# sourceURL=webpack://frequencyRecognizer/./lib/frequency-recognizer.js?");

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FrequencyRecognizerNode\": () => /* reexport safe */ _frequency_recognizer__WEBPACK_IMPORTED_MODULE_0__.default,\n/* harmony export */   \"getAudioContext\": () => /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_1__.getAudioContext,\n/* harmony export */   \"initGetUserMedia\": () => /* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_1__.initGetUserMedia\n/* harmony export */ });\n/* harmony import */ var _frequency_recognizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./frequency-recognizer */ \"./lib/frequency-recognizer.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./lib/utils.js\");\n\n\n\n\n//# sourceURL=webpack://frequencyRecognizer/./lib/index.js?");

/***/ }),

/***/ "./lib/utils.js":
/*!**********************!*\
  !*** ./lib/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAudioContext\": () => /* binding */ getAudioContext,\n/* harmony export */   \"initGetUserMedia\": () => /* binding */ initGetUserMedia\n/* harmony export */ });\nvar getAudioContext = function getAudioContext() {\n  window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n  if (!window.AudioContext) {\n    throw new Error(\"Web Audio API is not supported in this browser\");\n  }\n\n  return new window.AudioContext();\n};\nvar initGetUserMedia = function initGetUserMedia() {\n  if (navigator.mediaDevices === undefined) {\n    navigator.mediaDevices = {};\n  }\n\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      if (!getUserMedia) {\n        throw new Error(\"getUserMedia is not implemented in this browser\");\n      }\n\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject);\n      });\n    };\n  }\n};\n\n//# sourceURL=webpack://frequencyRecognizer/./lib/utils.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ ((module) => {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/path/path.js":
/*!***********************************!*\
  !*** ./node_modules/path/path.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n\r\n\r\nvar isWindows = process.platform === 'win32';\r\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\r\n\r\n\r\n// resolves . and .. elements in a path array with directory names there\r\n// must be no slashes or device names (c:\\) in the array\r\n// (so also no leading and trailing slashes - it does not distinguish\r\n// relative and absolute paths)\r\nfunction normalizeArray(parts, allowAboveRoot) {\r\n  var res = [];\r\n  for (var i = 0; i < parts.length; i++) {\r\n    var p = parts[i];\r\n\r\n    // ignore empty parts\r\n    if (!p || p === '.')\r\n      continue;\r\n\r\n    if (p === '..') {\r\n      if (res.length && res[res.length - 1] !== '..') {\r\n        res.pop();\r\n      } else if (allowAboveRoot) {\r\n        res.push('..');\r\n      }\r\n    } else {\r\n      res.push(p);\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n// returns an array with empty elements removed from either end of the input\r\n// array or the original array if no elements need to be removed\r\nfunction trimArray(arr) {\r\n  var lastIndex = arr.length - 1;\r\n  var start = 0;\r\n  for (; start <= lastIndex; start++) {\r\n    if (arr[start])\r\n      break;\r\n  }\r\n\r\n  var end = lastIndex;\r\n  for (; end >= 0; end--) {\r\n    if (arr[end])\r\n      break;\r\n  }\r\n\r\n  if (start === 0 && end === lastIndex)\r\n    return arr;\r\n  if (start > end)\r\n    return [];\r\n  return arr.slice(start, end + 1);\r\n}\r\n\r\n// Regex to split a windows path into three parts: [*, device, slash,\r\n// tail] windows-only\r\nvar splitDeviceRe =\r\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\r\n\r\n// Regex to split the tail part of the above into [*, dir, basename, ext]\r\nvar splitTailRe =\r\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\r\n\r\nvar win32 = {};\r\n\r\n// Function to split a filename into [root, dir, basename, ext]\r\nfunction win32SplitPath(filename) {\r\n  // Separate device+slash from tail\r\n  var result = splitDeviceRe.exec(filename),\r\n      device = (result[1] || '') + (result[2] || ''),\r\n      tail = result[3] || '';\r\n  // Split the tail into dir, basename and extension\r\n  var result2 = splitTailRe.exec(tail),\r\n      dir = result2[1],\r\n      basename = result2[2],\r\n      ext = result2[3];\r\n  return [device, dir, basename, ext];\r\n}\r\n\r\nfunction win32StatPath(path) {\r\n  var result = splitDeviceRe.exec(path),\r\n      device = result[1] || '',\r\n      isUnc = !!device && device[1] !== ':';\r\n  return {\r\n    device: device,\r\n    isUnc: isUnc,\r\n    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute\r\n    tail: result[3]\r\n  };\r\n}\r\n\r\nfunction normalizeUNCRoot(device) {\r\n  return '\\\\\\\\' + device.replace(/^[\\\\\\/]+/, '').replace(/[\\\\\\/]+/g, '\\\\');\r\n}\r\n\r\n// path.resolve([from ...], to)\r\nwin32.resolve = function() {\r\n  var resolvedDevice = '',\r\n      resolvedTail = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1; i--) {\r\n    var path;\r\n    if (i >= 0) {\r\n      path = arguments[i];\r\n    } else if (!resolvedDevice) {\r\n      path = process.cwd();\r\n    } else {\r\n      // Windows has the concept of drive-specific current working\r\n      // directories. If we've resolved a drive letter but not yet an\r\n      // absolute path, get cwd for that drive. We're sure the device is not\r\n      // an unc path at this points, because unc paths are always absolute.\r\n      path = process.env['=' + resolvedDevice];\r\n      // Verify that a drive-local cwd was found and that it actually points\r\n      // to our drive. If not, default to the drive's root.\r\n      if (!path || path.substr(0, 3).toLowerCase() !==\r\n          resolvedDevice.toLowerCase() + '\\\\') {\r\n        path = resolvedDevice + '\\\\';\r\n      }\r\n    }\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    var result = win32StatPath(path),\r\n        device = result.device,\r\n        isUnc = result.isUnc,\r\n        isAbsolute = result.isAbsolute,\r\n        tail = result.tail;\r\n\r\n    if (device &&\r\n        resolvedDevice &&\r\n        device.toLowerCase() !== resolvedDevice.toLowerCase()) {\r\n      // This path points to another device so it is not applicable\r\n      continue;\r\n    }\r\n\r\n    if (!resolvedDevice) {\r\n      resolvedDevice = device;\r\n    }\r\n    if (!resolvedAbsolute) {\r\n      resolvedTail = tail + '\\\\' + resolvedTail;\r\n      resolvedAbsolute = isAbsolute;\r\n    }\r\n\r\n    if (resolvedDevice && resolvedAbsolute) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Convert slashes to backslashes when `resolvedDevice` points to an UNC\r\n  // root. Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    resolvedDevice = normalizeUNCRoot(resolvedDevice);\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path,\r\n  // but handle relative paths to be safe (might happen when process.cwd()\r\n  // fails)\r\n\r\n  // Normalize the tail path\r\n  resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/),\r\n                                !resolvedAbsolute).join('\\\\');\r\n\r\n  return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\r\n         '.';\r\n};\r\n\r\n\r\nwin32.normalize = function(path) {\r\n  var result = win32StatPath(path),\r\n      device = result.device,\r\n      isUnc = result.isUnc,\r\n      isAbsolute = result.isAbsolute,\r\n      tail = result.tail,\r\n      trailingSlash = /[\\\\\\/]$/.test(tail);\r\n\r\n  // Normalize the tail path\r\n  tail = normalizeArray(tail.split(/[\\\\\\/]+/), !isAbsolute).join('\\\\');\r\n\r\n  if (!tail && !isAbsolute) {\r\n    tail = '.';\r\n  }\r\n  if (tail && trailingSlash) {\r\n    tail += '\\\\';\r\n  }\r\n\r\n  // Convert slashes to backslashes when `device` points to an UNC root.\r\n  // Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    device = normalizeUNCRoot(device);\r\n  }\r\n\r\n  return device + (isAbsolute ? '\\\\' : '') + tail;\r\n};\r\n\r\n\r\nwin32.isAbsolute = function(path) {\r\n  return win32StatPath(path).isAbsolute;\r\n};\r\n\r\nwin32.join = function() {\r\n  var paths = [];\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var arg = arguments[i];\r\n    if (!util.isString(arg)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (arg) {\r\n      paths.push(arg);\r\n    }\r\n  }\r\n\r\n  var joined = paths.join('\\\\');\r\n\r\n  // Make sure that the joined path doesn't start with two slashes, because\r\n  // normalize() will mistake it for an UNC path then.\r\n  //\r\n  // This step is skipped when it is very clear that the user actually\r\n  // intended to point at an UNC path. This is assumed when the first\r\n  // non-empty string arguments starts with exactly two slashes followed by\r\n  // at least one more non-slash character.\r\n  //\r\n  // Note that for normalize() to treat a path as an UNC path it needs to\r\n  // have at least 2 components, so we don't filter for that here.\r\n  // This means that the user can use join to construct UNC paths from\r\n  // a server name and a share name; for example:\r\n  //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\')\r\n  if (!/^[\\\\\\/]{2}[^\\\\\\/]/.test(paths[0])) {\r\n    joined = joined.replace(/^[\\\\\\/]{2,}/, '\\\\');\r\n  }\r\n\r\n  return win32.normalize(joined);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// it will solve the relative path from 'from' to 'to', for instance:\r\n// from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n// to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\nwin32.relative = function(from, to) {\r\n  from = win32.resolve(from);\r\n  to = win32.resolve(to);\r\n\r\n  // windows is not case sensitive\r\n  var lowerFrom = from.toLowerCase();\r\n  var lowerTo = to.toLowerCase();\r\n\r\n  var toParts = trimArray(to.split('\\\\'));\r\n\r\n  var lowerFromParts = trimArray(lowerFrom.split('\\\\'));\r\n  var lowerToParts = trimArray(lowerTo.split('\\\\'));\r\n\r\n  var length = Math.min(lowerFromParts.length, lowerToParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (lowerFromParts[i] !== lowerToParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (samePartsLength == 0) {\r\n    return to;\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < lowerFromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('\\\\');\r\n};\r\n\r\n\r\nwin32._makeLong = function(path) {\r\n  // Note: this will *probably* throw somewhere.\r\n  if (!util.isString(path))\r\n    return path;\r\n\r\n  if (!path) {\r\n    return '';\r\n  }\r\n\r\n  var resolvedPath = win32.resolve(path);\r\n\r\n  if (/^[a-zA-Z]\\:\\\\/.test(resolvedPath)) {\r\n    // path is local filesystem path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\' + resolvedPath;\r\n  } else if (/^\\\\\\\\[^?.]/.test(resolvedPath)) {\r\n    // path is network UNC path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n\r\nwin32.dirname = function(path) {\r\n  var result = win32SplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nwin32.basename = function(path, ext) {\r\n  var f = win32SplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nwin32.extname = function(path) {\r\n  return win32SplitPath(path)[3];\r\n};\r\n\r\n\r\nwin32.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir;\r\n  var base = pathObject.base || '';\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  if (dir[dir.length - 1] === win32.sep) {\r\n    return dir + base;\r\n  }\r\n  return dir + win32.sep + base;\r\n};\r\n\r\n\r\nwin32.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = win32SplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nwin32.sep = '\\\\';\r\nwin32.delimiter = ';';\r\n\r\n\r\n// Split a filename into [root, dir, basename, ext], unix version\r\n// 'root' is just a slash, or nothing.\r\nvar splitPathRe =\r\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar posix = {};\r\n\r\n\r\nfunction posixSplitPath(filename) {\r\n  return splitPathRe.exec(filename).slice(1);\r\n}\r\n\r\n\r\n// path.resolve([from ...], to)\r\n// posix version\r\nposix.resolve = function() {\r\n  var resolvedPath = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n    var path = (i >= 0) ? arguments[i] : process.cwd();\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    resolvedPath = path + '/' + resolvedPath;\r\n    resolvedAbsolute = path[0] === '/';\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path, but\r\n  // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n  // Normalize the path\r\n  resolvedPath = normalizeArray(resolvedPath.split('/'),\r\n                                !resolvedAbsolute).join('/');\r\n\r\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\r\n};\r\n\r\n// path.normalize(path)\r\n// posix version\r\nposix.normalize = function(path) {\r\n  var isAbsolute = posix.isAbsolute(path),\r\n      trailingSlash = path && path[path.length - 1] === '/';\r\n\r\n  // Normalize the path\r\n  path = normalizeArray(path.split('/'), !isAbsolute).join('/');\r\n\r\n  if (!path && !isAbsolute) {\r\n    path = '.';\r\n  }\r\n  if (path && trailingSlash) {\r\n    path += '/';\r\n  }\r\n\r\n  return (isAbsolute ? '/' : '') + path;\r\n};\r\n\r\n// posix version\r\nposix.isAbsolute = function(path) {\r\n  return path.charAt(0) === '/';\r\n};\r\n\r\n// posix version\r\nposix.join = function() {\r\n  var path = '';\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var segment = arguments[i];\r\n    if (!util.isString(segment)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (segment) {\r\n      if (!path) {\r\n        path += segment;\r\n      } else {\r\n        path += '/' + segment;\r\n      }\r\n    }\r\n  }\r\n  return posix.normalize(path);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// posix version\r\nposix.relative = function(from, to) {\r\n  from = posix.resolve(from).substr(1);\r\n  to = posix.resolve(to).substr(1);\r\n\r\n  var fromParts = trimArray(from.split('/'));\r\n  var toParts = trimArray(to.split('/'));\r\n\r\n  var length = Math.min(fromParts.length, toParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (fromParts[i] !== toParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < fromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('/');\r\n};\r\n\r\n\r\nposix._makeLong = function(path) {\r\n  return path;\r\n};\r\n\r\n\r\nposix.dirname = function(path) {\r\n  var result = posixSplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nposix.basename = function(path, ext) {\r\n  var f = posixSplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nposix.extname = function(path) {\r\n  return posixSplitPath(path)[3];\r\n};\r\n\r\n\r\nposix.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';\r\n  var base = pathObject.base || '';\r\n  return dir + base;\r\n};\r\n\r\n\r\nposix.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = posixSplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  allParts[1] = allParts[1] || '';\r\n  allParts[2] = allParts[2] || '';\r\n  allParts[3] = allParts[3] || '';\r\n\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nposix.sep = '/';\r\nposix.delimiter = ':';\r\n\r\n\r\nif (isWindows)\r\n  module.exports = win32;\r\nelse /* posix */\r\n  module.exports = posix;\r\n\r\nmodule.exports.posix = posix;\r\nmodule.exports.win32 = win32;\r\n\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/path/path.js?");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/***/ ((module) => {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/util/support/isBufferBrowser.js?");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(__webpack_require__.g.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n//# sourceURL=webpack://frequencyRecognizer/./node_modules/util/util.js?");

/***/ }),

/***/ "./external/aubio.wasm":
/*!*****************************!*\
  !*** ./external/aubio.wasm ***!
  \*****************************/
/***/ ((module) => {

eval("var buffer = new ArrayBuffer(69590);var uint8 = new Uint8Array(buffer);uint8.set([0,97,115,109,1,0,0,0,1,148,2,39,96,1,127,1,125,96,2,127,127,1,127,96,3,127,127,127,0,96,3,125,127,127,1,125,96,1,127,1,127,96,3,127,127,127,1,127,96,2,127,127,1,125,96,4,127,127,127,127,1,127,96,0,0,96,3,127,127,127,1,125,96,5,127,127,127,127,127,1,127,96,1,127,0,96,2,124,124,1,124,96,1,124,1,124,96,0,1,127,96,5,127,127,127,127,127,0,96,13,127,127,127,127,127,127,127,127,127,127,127,127,127,0,96,6,127,127,127,127,127,127,0,96,8,127,127,127,127,127,127,127,127,0,96,2,127,127,0,96,3,127,127,127,1,124,96,3,127,125,127,0,96,4,127,127,127,127,0,96,8,127,127,127,124,124,124,124,124,0,96,3,125,125,125,1,127,96,5,127,125,125,125,125,0,96,2,127,125,0,96,2,127,125,1,125,96,5,127,127,127,127,127,1,125,96,1,125,1,125,96,2,127,125,1,127,96,3,126,127,127,1,127,96,2,126,127,1,127,96,6,127,124,127,127,127,127,1,127,96,2,124,127,1,124,96,6,127,127,127,127,127,127,1,127,96,4,127,124,127,127,1,124,96,2,127,127,1,124,96,4,127,127,127,127,1,124,2,139,8,43,3,101,110,118,6,109,101,109,111,114,121,2,1,128,2,128,2,3,101,110,118,5,116,97,98,108,101,1,112,1,83,83,3,101,110,118,9,116,97,98,108,101,66,97,115,101,3,127,0,3,101,110,118,14,68,89,78,65,77,73,67,84,79,80,95,80,84,82,3,127,0,3,101,110,118,8,83,84,65,67,75,84,79,80,3,127,0,11,103,108,111,98,97,108,46,77,97,116,104,3,112,111,119,0,12,11,103,108,111,98,97,108,46,77,97,116,104,3,101,120,112,0,13,11,103,108,111,98,97,108,46,77,97,116,104,3,108,111,103,0,13,3,101,110,118,5,97,98,111,114,116,0,11,3,101,110,118,13,101,110,108,97,114,103,101,77,101,109,111,114,121,0,14,3,101,110,118,14,103,101,116,84,111,116,97,108,77,101,109,111,114,121,0,14,3,101,110,118,23,97,98,111,114,116,79,110,67,97,110,110,111,116,71,114,111,119,77,101,109,111,114,121,0,14,3,101,110,118,11,95,95,95,115,101,116,69,114,114,78,111,0,11,3,101,110,118,13,95,95,95,115,121,115,99,97,108,108,49,52,48,0,1,3,101,110,118,13,95,95,95,115,121,115,99,97,108,108,49,52,54,0,1,3,101,110,118,12,95,95,95,115,121,115,99,97,108,108,53,52,0,1,3,101,110,118,11,95,95,95,115,121,115,99,97,108,108,54,0,1,3,101,110,118,22,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,98,111,111,108,0,15,3,101,110,118,23,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,99,108,97,115,115,0,16,3,101,110,118,35,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,99,108,97,115,115,95,99,111,110,115,116,114,117,99,116,111,114,0,17,3,101,110,118,32,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,99,108,97,115,115,95,102,117,110,99,116,105,111,110,0,18,3,101,110,118,23,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,101,109,118,97,108,0,19,3,101,110,118,23,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,102,108,111,97,116,0,2,3,101,110,118,25,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,105,110,116,101,103,101,114,0,15,3,101,110,118,29,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,109,101,109,111,114,121,95,118,105,101,119,0,2,3,101,110,118,28,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,115,116,100,95,115,116,114,105,110,103,0,19,3,101,110,118,29,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,115,116,100,95,119,115,116,114,105,110,103,0,2,3,101,110,118,22,95,95,101,109,98,105,110,100,95,114,101,103,105,115,116,101,114,95,118,111,105,100,0,19,3,101,110,118,10,95,95,101,109,118,97,108,95,97,115,0,20,3,101,110,118,14,95,95,101,109,118,97,108,95,100,101,99,114,101,102,0,11,3,101,110,118,20,95,95,101,109,118,97,108,95,103,101,116,95,112,114,111,112,101,114,116,121,0,1,3,101,110,118,14,95,95,101,109,118,97,108,95,105,110,99,114,101,102,0,11,3,101,110,118,17,95,95,101,109,118,97,108,95,110,101,119,95,97,114,114,97,121,0,14,3,101,110,118,19,95,95,101,109,118,97,108,95,110,101,119,95,99,115,116,114,105,110,103,0,4,3,101,110,118,18,95,95,101,109,118,97,108,95,110,101,119,95,111,98,106,101,99,116,0,14,3,101,110,118,23,95,95,101,109,118,97,108,95,114,117,110,95,100,101,115,116,114,117,99,116,111,114,115,0,11,3,101,110,118,20,95,95,101,109,118,97,108,95,115,101,116,95,112,114,111,112,101,114,116,121,0,2,3,101,110,118,18,95,95,101,109,118,97,108,95,116,97,107,101,95,118,97,108,117,101,0,1,3,101,110,118,6,95,97,98,111,114,116,0,8,3,101,110,118,22,95,101,109,115,99,114,105,112,116,101,110,95,109,101,109,99,112,121,95,98,105,103,0,5,3,101,110,118,13,95,108,108,118,109,95,99,111,115,95,102,51,50,0,13,3,101,110,118,15,95,108,108,118,109,95,108,111,103,49,48,95,102,51,50,0,13,3,101,110,118,13,95,108,108,118,109,95,115,105,110,95,102,51,50,0,13,3,242,1,240,1,11,4,11,1,5,4,2,2,15,6,4,2,2,4,1,11,11,0,11,4,32,19,6,5,19,19,4,0,4,1,4,11,2,2,2,4,10,26,4,26,0,11,19,11,19,0,2,11,1,2,15,22,2,2,0,7,5,1,9,29,1,34,1,2,4,5,22,5,9,30,1,0,11,2,11,25,14,4,11,2,11,5,2,2,2,2,2,2,2,11,11,1,2,2,2,2,2,14,2,2,2,19,22,22,21,2,2,2,19,19,2,19,19,0,11,2,1,2,11,4,2,4,0,11,2,4,9,2,4,11,1,1,1,19,19,2,11,2,1,38,20,37,36,11,8,10,2,6,0,3,22,19,11,11,35,10,7,5,1,5,3,4,19,2,4,5,4,3,2,5,1,1,33,3,1,32,31,5,5,4,4,8,6,7,2,10,11,4,8,0,6,0,6,5,2,7,11,4,8,2,5,2,4,1,11,2,4,8,2,29,27,28,2,22,26,27,0,26,11,2,0,0,1,2,19,24,2,11,2,11,1,14,23,11,5,2,0,5,11,7,6,11,2,127,1,35,1,11,127,1,35,2,11,7,203,2,19,24,95,95,71,76,79,66,65,76,95,95,115,117,98,95,73,95,98,105,110,100,95,99,112,112,0,219,1,22,95,95,71,76,79,66,65,76,95,95,115,117,98,95,73,95,102,102,116,95,99,99,0,245,1,24,95,95,71,76,79,66,65,76,95,95,115,117,98,95,73,95,112,105,116,99,104,95,99,99,0,226,1,24,95,95,71,76,79,66,65,76,95,95,115,117,98,95,73,95,116,101,109,112,111,95,99,99,0,236,1,14,95,95,95,103,101,116,84,121,112,101,78,97,109,101,0,218,1,5,95,102,114,101,101,0,40,7,95,109,97,108,108,111,99,0,43,12,100,121,110,67,97,108,108,95,102,102,105,105,0,180,1,10,100,121,110,67,97,108,108,95,102,105,0,179,1,11,100,121,110,67,97,108,108,95,102,105,105,0,178,1,12,100,121,110,67,97,108,108,95,102,105,105,105,0,177,1,10,100,121,110,67,97,108,108,95,105,105,0,196,1,11,100,121,110,67,97,108,108,95,105,105,105,0,195,1,12,100,121,110,67,97,108,108,95,105,105,105,105,0,194,1,13,100,121,110,67,97,108,108,95,105,105,105,105,105,0,193,1,14,100,121,110,67,97,108,108,95,105,105,105,105,105,105,0,192,1,9,100,121,110,67,97,108,108,95,118,0,191,1,10,100,121,110,67,97,108,108,95,118,105,0,189,1,12,100,121,110,67,97,108,108,95,118,105,105,105,0,188,1,9,139,1,1,0,35,0,11,83,187,1,211,1,205,1,198,1,186,1,65,92,151,1,92,160,1,229,1,227,1,185,1,230,1,228,1,220,1,96,106,106,96,73,217,1,244,1,240,1,235,1,225,1,73,73,95,108,241,1,95,94,105,216,1,215,1,203,1,238,1,231,1,94,93,233,1,221,1,93,183,1,223,1,182,1,181,1,242,1,234,1,224,1,50,136,2,133,2,129,2,250,1,243,1,232,1,222,1,138,1,137,1,136,1,84,134,1,133,1,132,1,131,1,130,1,126,125,124,123,122,121,120,239,1,237,1,50,50,50,50,50,50,10,159,227,3,240,1,13,0,32,0,40,2,4,16,40,32,0,16,40,11,100,1,2,127,32,0,65,1,72,4,64,65,0,15,11,65,8,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,8,16,42,26,11,11,32,1,32,0,54,2,0,32,0,65,2,116,34,2,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,2,16,42,26,11,11,32,1,32,0,54,2,4,32,1,11,247,13,1,8,127,32,0,69,4,64,15,11,65,128,196,0,40,2,0,33,4,32,0,65,120,106,34,2,32,0,65,124,106,40,2,0,34,3,65,120,113,34,0,106,33,5,2,127,32,3,65,1,113,4,127,32,2,5,32,2,40,2,0,33,1,32,3,65,3,113,69,4,64,15,11,32,2,32,1,107,34,2,32,4,73,4,64,15,11,32,1,32,0,106,33,0,65,132,196,0,40,2,0,32,2,70,4,64,32,2,32,5,65,4,106,34,1,40,2,0,34,3,65,3,113,65,3,71,13,2,26,65,248,195,0,32,0,54,2,0,32,1,32,3,65,126,113,54,2,0,32,2,32,0,65,1,114,54,2,4,32,2,32,0,106,32,0,54,2,0,15,11,32,1,65,3,118,33,4,32,1,65,128,2,73,4,64,32,2,40,2,12,34,1,32,2,40,2,8,34,3,70,4,64,65,240,195,0,65,240,195,0,40,2,0,65,1,32,4,116,65,127,115,113,54,2,0,5,32,3,32,1,54,2,12,32,1,32,3,54,2,8,11,32,2,12,2,11,32,2,40,2,24,33,7,2,64,32,2,40,2,12,34,1,32,2,70,4,64,32,2,65,16,106,34,3,65,4,106,34,4,40,2,0,34,1,4,64,32,4,33,3,5,32,3,40,2,0,34,1,69,4,64,65,0,33,1,12,3,11,11,3,64,2,64,32,1,65,20,106,34,4,40,2,0,34,6,69,4,64,32,1,65,16,106,34,4,40,2,0,34,6,69,13,1,11,32,4,33,3,32,6,33,1,12,1,11,11,32,3,65,0,54,2,0,5,32,2,40,2,8,34,3,32,1,54,2,12,32,1,32,3,54,2,8,11,11,32,7,4,127,32,2,40,2,28,34,3,65,2,116,65,160,198,0,106,34,4,40,2,0,32,2,70,4,64,32,4,32,1,54,2,0,32,1,69,4,64,65,244,195,0,65,244,195,0,40,2,0,65,1,32,3,116,65,127,115,113,54,2,0,32,2,12,4,11,5,32,7,65,20,106,33,3,32,7,65,16,106,34,4,40,2,0,32,2,70,4,127,32,4,5,32,3,11,32,1,54,2,0,32,2,32,1,69,13,3,26,11,32,1,32,7,54,2,24,32,2,65,16,106,34,4,40,2,0,34,3,4,64,32,1,32,3,54,2,16,32,3,32,1,54,2,24,11,32,4,40,2,4,34,3,4,64,32,1,32,3,54,2,20,32,3,32,1,54,2,24,11,32,2,5,32,2,11,11,11,34,7,32,5,79,4,64,15,11,32,5,65,4,106,34,3,40,2,0,34,1,65,1,113,69,4,64,15,11,32,1,65,2,113,4,64,32,3,32,1,65,126,113,54,2,0,32,2,32,0,65,1,114,54,2,4,32,7,32,0,106,32,0,54,2,0,32,0,33,3,5,65,136,196,0,40,2,0,32,5,70,4,64,65,252,195,0,65,252,195,0,40,2,0,32,0,106,34,0,54,2,0,65,136,196,0,32,2,54,2,0,32,2,32,0,65,1,114,54,2,4,32,2,65,132,196,0,40,2,0,71,4,64,15,11,65,132,196,0,65,0,54,2,0,65,248,195,0,65,0,54,2,0,15,11,65,132,196,0,40,2,0,32,5,70,4,64,65,248,195,0,65,248,195,0,40,2,0,32,0,106,34,0,54,2,0,65,132,196,0,32,7,54,2,0,32,2,32,0,65,1,114,54,2,4,32,7,32,0,106,32,0,54,2,0,15,11,32,1,65,120,113,32,0,106,33,3,32,1,65,3,118,33,4,2,64,32,1,65,128,2,73,4,64,32,5,40,2,12,34,0,32,5,40,2,8,34,1,70,4,64,65,240,195,0,65,240,195,0,40,2,0,65,1,32,4,116,65,127,115,113,54,2,0,5,32,1,32,0,54,2,12,32,0,32,1,54,2,8,11,5,32,5,40,2,24,33,8,2,64,32,5,40,2,12,34,0,32,5,70,4,64,32,5,65,16,106,34,1,65,4,106,34,4,40,2,0,34,0,4,64,32,4,33,1,5,32,1,40,2,0,34,0,69,4,64,65,0,33,0,12,3,11,11,3,64,2,64,32,0,65,20,106,34,4,40,2,0,34,6,69,4,64,32,0,65,16,106,34,4,40,2,0,34,6,69,13,1,11,32,4,33,1,32,6,33,0,12,1,11,11,32,1,65,0,54,2,0,5,32,5,40,2,8,34,1,32,0,54,2,12,32,0,32,1,54,2,8,11,11,32,8,4,64,32,5,40,2,28,34,1,65,2,116,65,160,198,0,106,34,4,40,2,0,32,5,70,4,64,32,4,32,0,54,2,0,32,0,69,4,64,65,244,195,0,65,244,195,0,40,2,0,65,1,32,1,116,65,127,115,113,54,2,0,12,4,11,5,32,8,65,20,106,33,1,32,8,65,16,106,34,4,40,2,0,32,5,70,4,127,32,4,5,32,1,11,32,0,54,2,0,32,0,69,13,3,11,32,0,32,8,54,2,24,32,5,65,16,106,34,4,40,2,0,34,1,4,64,32,0,32,1,54,2,16,32,1,32,0,54,2,24,11,32,4,40,2,4,34,1,4,64,32,0,32,1,54,2,20,32,1,32,0,54,2,24,11,11,11,11,32,2,32,3,65,1,114,54,2,4,32,7,32,3,106,32,3,54,2,0,32,2,65,132,196,0,40,2,0,70,4,64,65,248,195,0,32,3,54,2,0,15,11,11,32,3,65,3,118,33,1,32,3,65,128,2,73,4,64,32,1,65,3,116,65,152,196,0,106,33,0,65,240,195,0,40,2,0,34,3,65,1,32,1,116,34,1,113,4,127,32,0,65,8,106,34,3,40,2,0,5,65,240,195,0,32,3,32,1,114,54,2,0,32,0,65,8,106,33,3,32,0,11,33,1,32,3,32,2,54,2,0,32,1,32,2,54,2,12,32,2,32,1,54,2,8,32,2,32,0,54,2,12,15,11,32,3,65,8,118,34,0,4,127,32,3,65,255,255,255,7,75,4,127,65,31,5,32,3,65,14,32,0,32,0,65,128,254,63,106,65,16,118,65,8,113,34,0,116,34,1,65,128,224,31,106,65,16,118,65,4,113,34,4,32,0,114,32,1,32,4,116,34,0,65,128,128,15,106,65,16,118,65,2,113,34,1,114,107,32,0,32,1,116,65,15,118,106,34,0,65,7,106,118,65,1,113,32,0,65,1,116,114,11,5,65,0,11,34,1,65,2,116,65,160,198,0,106,33,0,32,2,32,1,54,2,28,32,2,65,0,54,2,20,32,2,65,0,54,2,16,2,64,65,244,195,0,40,2,0,34,4,65,1,32,1,116,34,6,113,4,64,2,64,32,0,40,2,0,34,0,40,2,4,65,120,113,32,3,70,4,127,32,0,5,65,25,32,1,65,1,118,107,33,4,32,3,32,1,65,31,70,4,127,65,0,5,32,4,11,116,33,4,3,64,32,0,65,16,106,32,4,65,31,118,65,2,116,106,34,6,40,2,0,34,1,4,64,32,4,65,1,116,33,4,32,1,40,2,4,65,120,113,32,3,70,13,3,32,1,33,0,12,1,11,11,32,6,32,2,54,2,0,32,2,32,0,54,2,24,32,2,32,2,54,2,12,32,2,32,2,54,2,8,12,3,11,33,1,11,32,1,65,8,106,34,0,40,2,0,34,3,32,2,54,2,12,32,0,32,2,54,2,0,32,2,32,3,54,2,8,32,2,32,1,54,2,12,32,2,65,0,54,2,24,5,65,244,195,0,32,4,32,6,114,54,2,0,32,0,32,2,54,2,0,32,2,32,0,54,2,24,32,2,32,2,54,2,12,32,2,32,2,54,2,8,11,11,65,144,196,0,65,144,196,0,40,2,0,65,127,106,34,0,54,2,0,32,0,4,64,15,11,65,184,199,0,33,0,3,64,32,0,40,2,0,34,2,65,8,106,33,0,32,2,13,0,11,65,144,196,0,65,127,54,2,0,11,92,1,2,127,32,0,44,0,0,34,2,69,32,2,32,1,44,0,0,34,3,71,114,4,127,32,2,33,1,32,3,5,3,127,32,0,65,1,106,34,0,44,0,0,34,2,69,32,2,32,1,65,1,106,34,1,44,0,0,34,3,71,114,4,127,32,2,33,1,32,3,5,12,1,11,11,11,33,0,32,1,65,255,1,113,32,0,65,255,1,113,107,11,152,2,1,4,127,32,0,32,2,106,33,4,32,1,65,255,1,113,33,1,32,2,65,195,0,78,4,64,3,64,32,0,65,3,113,4,64,32,0,32,1,58,0,0,32,0,65,1,106,33,0,12,1,11,11,32,4,65,124,113,34,5,65,64,106,33,6,32,1,32,1,65,8,116,114,32,1,65,16,116,114,32,1,65,24,116,114,33,3,3,64,32,0,32,6,76,4,64,32,0,32,3,54,2,0,32,0,32,3,54,2,4,32,0,32,3,54,2,8,32,0,32,3,54,2,12,32,0,32,3,54,2,16,32,0,32,3,54,2,20,32,0,32,3,54,2,24,32,0,32,3,54,2,28,32,0,32,3,54,2,32,32,0,32,3,54,2,36,32,0,32,3,54,2,40,32,0,32,3,54,2,44,32,0,32,3,54,2,48,32,0,32,3,54,2,52,32,0,32,3,54,2,56,32,0,32,3,54,2,60,32,0,65,64,107,33,0,12,1,11,11,3,64,32,0,32,5,72,4,64,32,0,32,3,54,2,0,32,0,65,4,106,33,0,12,1,11,11,11,3,64,32,0,32,4,72,4,64,32,0,32,1,58,0,0,32,0,65,1,106,33,0,12,1,11,11,32,4,32,2,107,11,163,55,1,12,127,2,64,2,64,35,4,33,1,35,4,65,16,106,36,4,32,1,33,10,2,64,32,0,65,245,1,73,4,64,32,0,65,11,106,65,120,113,33,1,65,240,195,0,40,2,0,34,6,32,0,65,11,73,4,127,65,16,5,32,1,11,34,0,65,3,118,34,1,118,34,2,65,3,113,4,64,32,2,65,1,113,65,1,115,32,1,106,34,0,65,3,116,65,152,196,0,106,34,1,65,8,106,34,4,40,2,0,34,2,65,8,106,34,5,40,2,0,34,3,32,1,70,4,64,65,240,195,0,32,6,65,1,32,0,116,65,127,115,113,54,2,0,5,32,3,32,1,54,2,12,32,4,32,3,54,2,0,11,32,2,32,0,65,3,116,34,0,65,3,114,54,2,4,32,2,32,0,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,32,10,36,4,32,5,15,11,32,0,65,248,195,0,40,2,0,34,7,75,4,64,32,2,4,64,32,2,32,1,116,65,2,32,1,116,34,1,65,0,32,1,107,114,113,34,1,65,0,32,1,107,113,65,127,106,34,2,65,12,118,65,16,113,33,1,32,2,32,1,118,34,2,65,5,118,65,8,113,34,3,32,1,114,32,2,32,3,118,34,1,65,2,118,65,4,113,34,2,114,32,1,32,2,118,34,1,65,1,118,65,2,113,34,2,114,32,1,32,2,118,34,1,65,1,118,65,1,113,34,2,114,32,1,32,2,118,106,34,3,65,3,116,65,152,196,0,106,34,1,65,8,106,34,5,40,2,0,34,2,65,8,106,34,8,40,2,0,34,4,32,1,70,4,64,65,240,195,0,32,6,65,1,32,3,116,65,127,115,113,34,1,54,2,0,5,32,4,32,1,54,2,12,32,5,32,4,54,2,0,32,6,33,1,11,32,2,32,0,65,3,114,54,2,4,32,2,32,0,106,34,6,32,3,65,3,116,34,3,32,0,107,34,4,65,1,114,54,2,4,32,2,32,3,106,32,4,54,2,0,32,7,4,64,65,132,196,0,40,2,0,33,3,32,7,65,3,118,34,2,65,3,116,65,152,196,0,106,33,0,32,1,65,1,32,2,116,34,2,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,240,195,0,32,1,32,2,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,3,54,2,0,32,1,32,3,54,2,12,32,3,32,1,54,2,8,32,3,32,0,54,2,12,11,65,248,195,0,32,4,54,2,0,65,132,196,0,32,6,54,2,0,32,10,36,4,32,8,15,11,65,244,195,0,40,2,0,34,12,4,64,32,12,65,0,32,12,107,113,65,127,106,34,2,65,12,118,65,16,113,33,1,32,2,32,1,118,34,2,65,5,118,65,8,113,34,3,32,1,114,32,2,32,3,118,34,1,65,2,118,65,4,113,34,2,114,32,1,32,2,118,34,1,65,1,118,65,2,113,34,2,114,32,1,32,2,118,34,1,65,1,118,65,1,113,34,2,114,32,1,32,2,118,106,65,2,116,65,160,198,0,106,40,2,0,34,3,33,1,32,3,40,2,4,65,120,113,32,0,107,33,4,3,64,2,64,32,1,40,2,16,34,2,4,64,32,2,33,1,5,32,1,40,2,20,34,1,69,13,1,11,32,1,40,2,4,65,120,113,32,0,107,34,2,32,4,73,34,5,69,4,64,32,4,33,2,11,32,5,4,64,32,1,33,3,11,32,2,33,4,12,1,11,11,32,3,32,0,106,34,11,32,3,75,4,64,32,3,40,2,24,33,9,2,64,32,3,40,2,12,34,1,32,3,70,4,64,32,3,65,20,106,34,2,40,2,0,34,1,69,4,64,32,3,65,16,106,34,2,40,2,0,34,1,69,4,64,65,0,33,1,12,3,11,11,3,64,2,64,32,1,65,20,106,34,5,40,2,0,34,8,69,4,64,32,1,65,16,106,34,5,40,2,0,34,8,69,13,1,11,32,5,33,2,32,8,33,1,12,1,11,11,32,2,65,0,54,2,0,5,32,3,40,2,8,34,2,32,1,54,2,12,32,1,32,2,54,2,8,11,11,2,64,32,9,4,64,32,3,32,3,40,2,28,34,2,65,2,116,65,160,198,0,106,34,5,40,2,0,70,4,64,32,5,32,1,54,2,0,32,1,69,4,64,65,244,195,0,32,12,65,1,32,2,116,65,127,115,113,54,2,0,12,3,11,5,32,9,65,20,106,33,2,32,9,65,16,106,34,5,40,2,0,32,3,70,4,127,32,5,5,32,2,11,32,1,54,2,0,32,1,69,13,2,11,32,1,32,9,54,2,24,32,3,40,2,16,34,2,4,64,32,1,32,2,54,2,16,32,2,32,1,54,2,24,11,32,3,40,2,20,34,2,4,64,32,1,32,2,54,2,20,32,2,32,1,54,2,24,11,11,11,32,4,65,16,73,4,64,32,3,32,4,32,0,106,34,0,65,3,114,54,2,4,32,3,32,0,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,5,32,3,32,0,65,3,114,54,2,4,32,11,32,4,65,1,114,54,2,4,32,11,32,4,106,32,4,54,2,0,32,7,4,64,65,132,196,0,40,2,0,33,5,32,7,65,3,118,34,1,65,3,116,65,152,196,0,106,33,0,65,1,32,1,116,34,1,32,6,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,240,195,0,32,1,32,6,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,5,54,2,0,32,1,32,5,54,2,12,32,5,32,1,54,2,8,32,5,32,0,54,2,12,11,65,248,195,0,32,4,54,2,0,65,132,196,0,32,11,54,2,0,11,32,10,36,4,32,3,65,8,106,15,11,11,11,5,32,0,65,191,127,75,4,64,65,127,33,0,5,32,0,65,11,106,34,1,65,120,113,33,0,65,244,195,0,40,2,0,34,4,4,64,32,1,65,8,118,34,1,4,127,32,0,65,255,255,255,7,75,4,127,65,31,5,32,0,65,14,32,1,32,1,65,128,254,63,106,65,16,118,65,8,113,34,1,116,34,2,65,128,224,31,106,65,16,118,65,4,113,34,3,32,1,114,32,2,32,3,116,34,1,65,128,128,15,106,65,16,118,65,2,113,34,2,114,107,32,1,32,2,116,65,15,118,106,34,1,65,7,106,118,65,1,113,32,1,65,1,116,114,11,5,65,0,11,33,7,65,0,32,0,107,33,3,2,64,2,64,32,7,65,2,116,65,160,198,0,106,40,2,0,34,1,4,64,65,25,32,7,65,1,118,107,33,6,65,0,33,2,32,0,32,7,65,31,70,4,127,65,0,5,32,6,11,116,33,5,65,0,33,6,3,64,32,1,40,2,4,65,120,113,32,0,107,34,8,32,3,73,4,64,32,8,4,127,32,8,33,3,32,1,5,65,0,33,3,32,1,33,2,12,4,11,33,2,11,32,1,40,2,20,34,8,69,32,8,32,1,65,16,106,32,5,65,31,118,65,2,116,106,40,2,0,34,1,70,114,69,4,64,32,8,33,6,11,32,5,65,1,116,33,5,32,1,13,0,11,32,2,33,1,5,65,0,33,1,11,32,6,32,1,114,4,127,32,6,5,65,2,32,7,116,34,1,65,0,32,1,107,114,32,4,113,34,1,69,13,6,32,1,65,0,32,1,107,113,65,127,106,34,6,65,12,118,65,16,113,33,2,65,0,33,1,32,6,32,2,118,34,6,65,5,118,65,8,113,34,5,32,2,114,32,6,32,5,118,34,2,65,2,118,65,4,113,34,6,114,32,2,32,6,118,34,2,65,1,118,65,2,113,34,6,114,32,2,32,6,118,34,2,65,1,118,65,1,113,34,6,114,32,2,32,6,118,106,65,2,116,65,160,198,0,106,40,2,0,11,34,2,13,0,32,1,33,6,12,1,11,32,1,33,5,32,2,33,1,3,64,32,1,40,2,4,33,2,32,1,40,2,16,34,6,69,4,64,32,1,40,2,20,33,6,11,32,2,65,120,113,32,0,107,34,2,32,3,73,34,8,69,4,64,32,3,33,2,11,32,8,69,4,64,32,5,33,1,11,32,6,4,127,32,1,33,5,32,2,33,3,32,6,33,1,12,1,5,32,1,33,6,32,2,11,33,3,11,11,32,6,4,64,32,3,65,248,195,0,40,2,0,32,0,107,73,4,64,32,6,32,0,106,34,7,32,6,75,4,64,32,6,40,2,24,33,9,2,64,32,6,40,2,12,34,1,32,6,70,4,64,32,6,65,20,106,34,2,40,2,0,34,1,69,4,64,32,6,65,16,106,34,2,40,2,0,34,1,69,4,64,65,0,33,1,12,3,11,11,3,64,2,64,32,1,65,20,106,34,5,40,2,0,34,8,69,4,64,32,1,65,16,106,34,5,40,2,0,34,8,69,13,1,11,32,5,33,2,32,8,33,1,12,1,11,11,32,2,65,0,54,2,0,5,32,6,40,2,8,34,2,32,1,54,2,12,32,1,32,2,54,2,8,11,11,2,64,32,9,4,127,32,6,32,6,40,2,28,34,2,65,2,116,65,160,198,0,106,34,5,40,2,0,70,4,64,32,5,32,1,54,2,0,32,1,69,4,64,65,244,195,0,32,4,65,1,32,2,116,65,127,115,113,34,1,54,2,0,12,3,11,5,32,9,65,20,106,33,2,32,9,65,16,106,34,5,40,2,0,32,6,70,4,127,32,5,5,32,2,11,32,1,54,2,0,32,1,69,4,64,32,4,33,1,12,3,11,11,32,1,32,9,54,2,24,32,6,40,2,16,34,2,4,64,32,1,32,2,54,2,16,32,2,32,1,54,2,24,11,32,6,40,2,20,34,2,4,64,32,1,32,2,54,2,20,32,2,32,1,54,2,24,11,32,4,5,32,4,11,33,1,11,2,64,32,3,65,16,73,4,64,32,6,32,3,32,0,106,34,0,65,3,114,54,2,4,32,6,32,0,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,5,32,6,32,0,65,3,114,54,2,4,32,7,32,3,65,1,114,54,2,4,32,7,32,3,106,32,3,54,2,0,32,3,65,3,118,33,2,32,3,65,128,2,73,4,64,32,2,65,3,116,65,152,196,0,106,33,0,65,240,195,0,40,2,0,34,1,65,1,32,2,116,34,2,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,240,195,0,32,1,32,2,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,7,54,2,0,32,1,32,7,54,2,12,32,7,32,1,54,2,8,32,7,32,0,54,2,12,12,2,11,32,3,65,8,118,34,0,4,127,32,3,65,255,255,255,7,75,4,127,65,31,5,32,3,65,14,32,0,32,0,65,128,254,63,106,65,16,118,65,8,113,34,0,116,34,2,65,128,224,31,106,65,16,118,65,4,113,34,4,32,0,114,32,2,32,4,116,34,0,65,128,128,15,106,65,16,118,65,2,113,34,2,114,107,32,0,32,2,116,65,15,118,106,34,0,65,7,106,118,65,1,113,32,0,65,1,116,114,11,5,65,0,11,34,2,65,2,116,65,160,198,0,106,33,0,32,7,32,2,54,2,28,32,7,65,16,106,34,4,65,0,54,2,4,32,4,65,0,54,2,0,32,1,65,1,32,2,116,34,4,113,69,4,64,65,244,195,0,32,1,32,4,114,54,2,0,32,0,32,7,54,2,0,32,7,32,0,54,2,24,32,7,32,7,54,2,12,32,7,32,7,54,2,8,12,2,11,2,64,32,0,40,2,0,34,0,40,2,4,65,120,113,32,3,70,4,127,32,0,5,65,25,32,2,65,1,118,107,33,1,32,3,32,2,65,31,70,4,127,65,0,5,32,1,11,116,33,2,3,64,32,0,65,16,106,32,2,65,31,118,65,2,116,106,34,4,40,2,0,34,1,4,64,32,2,65,1,116,33,2,32,1,40,2,4,65,120,113,32,3,70,13,3,32,1,33,0,12,1,11,11,32,4,32,7,54,2,0,32,7,32,0,54,2,24,32,7,32,7,54,2,12,32,7,32,7,54,2,8,12,3,11,33,1,11,32,1,65,8,106,34,0,40,2,0,34,2,32,7,54,2,12,32,0,32,7,54,2,0,32,7,32,2,54,2,8,32,7,32,1,54,2,12,32,7,65,0,54,2,24,11,11,32,10,36,4,32,6,65,8,106,15,11,11,11,11,11,11,11,65,248,195,0,40,2,0,34,2,32,0,79,4,64,65,132,196,0,40,2,0,33,1,32,2,32,0,107,34,3,65,15,75,4,64,65,132,196,0,32,1,32,0,106,34,4,54,2,0,65,248,195,0,32,3,54,2,0,32,4,32,3,65,1,114,54,2,4,32,1,32,2,106,32,3,54,2,0,32,1,32,0,65,3,114,54,2,4,5,65,248,195,0,65,0,54,2,0,65,132,196,0,65,0,54,2,0,32,1,32,2,65,3,114,54,2,4,32,1,32,2,106,65,4,106,34,0,32,0,40,2,0,65,1,114,54,2,0,11,12,2,11,65,252,195,0,40,2,0,34,2,32,0,75,4,64,65,252,195,0,32,2,32,0,107,34,2,54,2,0,12,1,11,65,200,199,0,40,2,0,4,127,65,208,199,0,40,2,0,5,65,208,199,0,65,128,32,54,2,0,65,204,199,0,65,128,32,54,2,0,65,212,199,0,65,127,54,2,0,65,216,199,0,65,127,54,2,0,65,220,199,0,65,0,54,2,0,65,172,199,0,65,0,54,2,0,65,200,199,0,32,10,65,112,113,65,216,170,213,170,5,115,54,2,0,65,128,32,11,34,1,32,0,65,47,106,34,6,106,34,5,65,0,32,1,107,34,8,113,34,4,32,0,77,4,64,32,10,36,4,65,0,15,11,65,168,199,0,40,2,0,34,1,4,64,65,160,199,0,40,2,0,34,3,32,4,106,34,7,32,3,77,32,7,32,1,75,114,4,64,32,10,36,4,65,0,15,11,11,32,0,65,48,106,33,7,2,64,2,64,65,172,199,0,40,2,0,65,4,113,4,64,65,0,33,2,5,2,64,2,64,2,64,65,136,196,0,40,2,0,34,1,69,13,0,65,176,199,0,33,3,3,64,2,64,32,3,40,2,0,34,9,32,1,77,4,64,32,9,32,3,65,4,106,34,9,40,2,0,106,32,1,75,13,1,11,32,3,40,2,8,34,3,13,1,12,2,11,11,32,5,32,2,107,32,8,113,34,2,65,255,255,255,255,7,73,4,64,32,2,16,51,34,1,32,3,40,2,0,32,9,40,2,0,106,70,4,64,32,1,65,127,71,13,6,5,12,3,11,5,65,0,33,2,11,12,2,11,65,0,16,51,34,1,65,127,70,4,127,65,0,5,65,204,199,0,40,2,0,34,2,65,127,106,34,3,32,1,106,65,0,32,2,107,113,32,1,107,33,2,32,3,32,1,113,4,127,32,2,5,65,0,11,32,4,106,34,2,65,160,199,0,40,2,0,34,5,106,33,3,32,2,32,0,75,32,2,65,255,255,255,255,7,73,113,4,127,65,168,199,0,40,2,0,34,8,4,64,32,3,32,5,77,32,3,32,8,75,114,4,64,65,0,33,2,12,5,11,11,32,2,16,51,34,3,32,1,70,13,5,32,3,33,1,12,2,5,65,0,11,11,33,2,12,1,11,32,7,32,2,75,32,2,65,255,255,255,255,7,73,32,1,65,127,71,113,113,69,4,64,32,1,65,127,70,4,64,65,0,33,2,12,2,5,12,4,11,0,11,32,6,32,2,107,65,208,199,0,40,2,0,34,3,106,65,0,32,3,107,113,34,3,65,255,255,255,255,7,79,13,2,65,0,32,2,107,33,6,32,3,16,51,65,127,70,4,127,32,6,16,51,26,65,0,5,32,3,32,2,106,33,2,12,3,11,33,2,11,65,172,199,0,65,172,199,0,40,2,0,65,4,114,54,2,0,11,32,4,65,255,255,255,255,7,73,4,64,32,4,16,51,34,1,65,0,16,51,34,3,73,32,1,65,127,71,32,3,65,127,71,113,113,33,4,32,3,32,1,107,34,3,32,0,65,40,106,75,34,6,4,64,32,3,33,2,11,32,1,65,127,70,32,6,65,1,115,114,32,4,65,1,115,114,69,13,1,11,12,1,11,65,160,199,0,65,160,199,0,40,2,0,32,2,106,34,3,54,2,0,32,3,65,164,199,0,40,2,0,75,4,64,65,164,199,0,32,3,54,2,0,11,2,64,65,136,196,0,40,2,0,34,4,4,64,65,176,199,0,33,3,2,64,2,64,3,64,32,1,32,3,40,2,0,34,6,32,3,65,4,106,34,5,40,2,0,34,8,106,70,13,1,32,3,40,2,8,34,3,13,0,11,12,1,11,32,3,40,2,12,65,8,113,69,4,64,32,1,32,4,75,32,6,32,4,77,113,4,64,32,5,32,8,32,2,106,54,2,0,65,252,195,0,40,2,0,32,2,106,33,2,65,0,32,4,65,8,106,34,3,107,65,7,113,33,1,65,136,196,0,32,4,32,3,65,7,113,4,127,32,1,5,65,0,34,1,11,106,34,3,54,2,0,65,252,195,0,32,2,32,1,107,34,1,54,2,0,32,3,32,1,65,1,114,54,2,4,32,4,32,2,106,65,40,54,2,4,65,140,196,0,65,216,199,0,40,2,0,54,2,0,12,4,11,11,11,32,1,65,128,196,0,40,2,0,73,4,64,65,128,196,0,32,1,54,2,0,11,32,1,32,2,106,33,6,65,176,199,0,33,3,2,64,2,64,3,64,32,3,40,2,0,32,6,70,13,1,32,3,40,2,8,34,3,13,0,11,12,1,11,32,3,40,2,12,65,8,113,69,4,64,32,3,32,1,54,2,0,32,3,65,4,106,34,3,32,3,40,2,0,32,2,106,54,2,0,65,0,32,1,65,8,106,34,2,107,65,7,113,33,3,65,0,32,6,65,8,106,34,8,107,65,7,113,33,9,32,1,32,2,65,7,113,4,127,32,3,5,65,0,11,106,34,7,32,0,106,33,5,32,6,32,8,65,7,113,4,127,32,9,5,65,0,11,106,34,2,32,7,107,32,0,107,33,3,32,7,32,0,65,3,114,54,2,4,2,64,32,4,32,2,70,4,64,65,252,195,0,65,252,195,0,40,2,0,32,3,106,34,0,54,2,0,65,136,196,0,32,5,54,2,0,32,5,32,0,65,1,114,54,2,4,5,65,132,196,0,40,2,0,32,2,70,4,64,65,248,195,0,65,248,195,0,40,2,0,32,3,106,34,0,54,2,0,65,132,196,0,32,5,54,2,0,32,5,32,0,65,1,114,54,2,4,32,5,32,0,106,32,0,54,2,0,12,2,11,32,2,40,2,4,34,0,65,3,113,65,1,70,4,64,32,0,65,120,113,33,9,32,0,65,3,118,33,4,2,64,32,0,65,128,2,73,4,64,32,2,40,2,12,34,0,32,2,40,2,8,34,1,70,4,64,65,240,195,0,65,240,195,0,40,2,0,65,1,32,4,116,65,127,115,113,54,2,0,5,32,1,32,0,54,2,12,32,0,32,1,54,2,8,11,5,32,2,40,2,24,33,8,2,64,32,2,40,2,12,34,0,32,2,70,4,64,32,2,65,16,106,34,1,65,4,106,34,4,40,2,0,34,0,4,64,32,4,33,1,5,32,1,40,2,0,34,0,69,4,64,65,0,33,0,12,3,11,11,3,64,2,64,32,0,65,20,106,34,4,40,2,0,34,6,69,4,64,32,0,65,16,106,34,4,40,2,0,34,6,69,13,1,11,32,4,33,1,32,6,33,0,12,1,11,11,32,1,65,0,54,2,0,5,32,2,40,2,8,34,1,32,0,54,2,12,32,0,32,1,54,2,8,11,11,32,8,69,13,1,2,64,32,2,40,2,28,34,1,65,2,116,65,160,198,0,106,34,4,40,2,0,32,2,70,4,64,32,4,32,0,54,2,0,32,0,13,1,65,244,195,0,65,244,195,0,40,2,0,65,1,32,1,116,65,127,115,113,54,2,0,12,3,5,32,8,65,20,106,33,1,32,8,65,16,106,34,4,40,2,0,32,2,70,4,127,32,4,5,32,1,11,32,0,54,2,0,32,0,69,13,3,11,11,32,0,32,8,54,2,24,32,2,65,16,106,34,4,40,2,0,34,1,4,64,32,0,32,1,54,2,16,32,1,32,0,54,2,24,11,32,4,40,2,4,34,1,69,13,1,32,0,32,1,54,2,20,32,1,32,0,54,2,24,11,11,32,2,32,9,106,33,2,32,9,32,3,106,33,3,11,32,2,65,4,106,34,0,32,0,40,2,0,65,126,113,54,2,0,32,5,32,3,65,1,114,54,2,4,32,5,32,3,106,32,3,54,2,0,32,3,65,3,118,33,1,32,3,65,128,2,73,4,64,32,1,65,3,116,65,152,196,0,106,33,0,65,240,195,0,40,2,0,34,2,65,1,32,1,116,34,1,113,4,127,32,0,65,8,106,34,2,40,2,0,5,65,240,195,0,32,2,32,1,114,54,2,0,32,0,65,8,106,33,2,32,0,11,33,1,32,2,32,5,54,2,0,32,1,32,5,54,2,12,32,5,32,1,54,2,8,32,5,32,0,54,2,12,12,2,11,2,127,32,3,65,8,118,34,0,4,127,65,31,32,3,65,255,255,255,7,75,13,1,26,32,3,65,14,32,0,32,0,65,128,254,63,106,65,16,118,65,8,113,34,0,116,34,1,65,128,224,31,106,65,16,118,65,4,113,34,2,32,0,114,32,1,32,2,116,34,0,65,128,128,15,106,65,16,118,65,2,113,34,1,114,107,32,0,32,1,116,65,15,118,106,34,0,65,7,106,118,65,1,113,32,0,65,1,116,114,5,65,0,11,11,34,1,65,2,116,65,160,198,0,106,33,0,32,5,32,1,54,2,28,32,5,65,16,106,34,2,65,0,54,2,4,32,2,65,0,54,2,0,65,244,195,0,40,2,0,34,2,65,1,32,1,116,34,4,113,69,4,64,65,244,195,0,32,2,32,4,114,54,2,0,32,0,32,5,54,2,0,32,5,32,0,54,2,24,32,5,32,5,54,2,12,32,5,32,5,54,2,8,12,2,11,2,64,32,0,40,2,0,34,0,40,2,4,65,120,113,32,3,70,4,127,32,0,5,65,25,32,1,65,1,118,107,33,2,32,3,32,1,65,31,70,4,127,65,0,5,32,2,11,116,33,2,3,64,32,0,65,16,106,32,2,65,31,118,65,2,116,106,34,4,40,2,0,34,1,4,64,32,2,65,1,116,33,2,32,1,40,2,4,65,120,113,32,3,70,13,3,32,1,33,0,12,1,11,11,32,4,32,5,54,2,0,32,5,32,0,54,2,24,32,5,32,5,54,2,12,32,5,32,5,54,2,8,12,3,11,33,1,11,32,1,65,8,106,34,0,40,2,0,34,2,32,5,54,2,12,32,0,32,5,54,2,0,32,5,32,2,54,2,8,32,5,32,1,54,2,12,32,5,65,0,54,2,24,11,11,32,10,36,4,32,7,65,8,106,15,11,11,65,176,199,0,33,3,3,64,2,64,32,3,40,2,0,34,6,32,4,77,4,64,32,6,32,3,40,2,4,106,34,7,32,4,75,13,1,11,32,3,40,2,8,33,3,12,1,11,11,65,0,32,7,65,81,106,34,3,65,8,106,34,6,107,65,7,113,33,5,32,3,32,6,65,7,113,4,127,32,5,5,65,0,11,106,34,3,32,4,65,16,106,34,12,73,4,127,32,4,34,3,5,32,3,11,65,8,106,33,8,32,3,65,24,106,33,6,32,2,65,88,106,33,9,65,0,32,1,65,8,106,34,11,107,65,7,113,33,5,65,136,196,0,32,1,32,11,65,7,113,4,127,32,5,5,65,0,34,5,11,106,34,11,54,2,0,65,252,195,0,32,9,32,5,107,34,5,54,2,0,32,11,32,5,65,1,114,54,2,4,32,1,32,9,106,65,40,54,2,4,65,140,196,0,65,216,199,0,40,2,0,54,2,0,32,3,65,4,106,34,5,65,27,54,2,0,32,8,65,176,199,0,41,2,0,55,2,0,32,8,65,184,199,0,41,2,0,55,2,8,65,176,199,0,32,1,54,2,0,65,180,199,0,32,2,54,2,0,65,188,199,0,65,0,54,2,0,65,184,199,0,32,8,54,2,0,32,6,33,1,3,64,32,1,65,4,106,34,2,65,7,54,2,0,32,1,65,8,106,32,7,73,4,64,32,2,33,1,12,1,11,11,32,3,32,4,71,4,64,32,5,32,5,40,2,0,65,126,113,54,2,0,32,4,32,3,32,4,107,34,6,65,1,114,54,2,4,32,3,32,6,54,2,0,32,6,65,3,118,33,2,32,6,65,128,2,73,4,64,32,2,65,3,116,65,152,196,0,106,33,1,65,240,195,0,40,2,0,34,3,65,1,32,2,116,34,2,113,4,127,32,1,65,8,106,34,3,40,2,0,5,65,240,195,0,32,3,32,2,114,54,2,0,32,1,65,8,106,33,3,32,1,11,33,2,32,3,32,4,54,2,0,32,2,32,4,54,2,12,32,4,32,2,54,2,8,32,4,32,1,54,2,12,12,3,11,32,6,65,8,118,34,1,4,127,32,6,65,255,255,255,7,75,4,127,65,31,5,32,6,65,14,32,1,32,1,65,128,254,63,106,65,16,118,65,8,113,34,1,116,34,2,65,128,224,31,106,65,16,118,65,4,113,34,3,32,1,114,32,2,32,3,116,34,1,65,128,128,15,106,65,16,118,65,2,113,34,2,114,107,32,1,32,2,116,65,15,118,106,34,1,65,7,106,118,65,1,113,32,1,65,1,116,114,11,5,65,0,11,34,2,65,2,116,65,160,198,0,106,33,1,32,4,32,2,54,2,28,32,4,65,0,54,2,20,32,12,65,0,54,2,0,65,244,195,0,40,2,0,34,3,65,1,32,2,116,34,5,113,69,4,64,65,244,195,0,32,3,32,5,114,54,2,0,32,1,32,4,54,2,0,32,4,32,1,54,2,24,32,4,32,4,54,2,12,32,4,32,4,54,2,8,12,3,11,2,64,32,1,40,2,0,34,1,40,2,4,65,120,113,32,6,70,4,127,32,1,5,65,25,32,2,65,1,118,107,33,3,32,6,32,2,65,31,70,4,127,65,0,5,32,3,11,116,33,3,3,64,32,1,65,16,106,32,3,65,31,118,65,2,116,106,34,5,40,2,0,34,2,4,64,32,3,65,1,116,33,3,32,2,40,2,4,65,120,113,32,6,70,13,3,32,2,33,1,12,1,11,11,32,5,32,4,54,2,0,32,4,32,1,54,2,24,32,4,32,4,54,2,12,32,4,32,4,54,2,8,12,4,11,33,2,11,32,2,65,8,106,34,1,40,2,0,34,3,32,4,54,2,12,32,1,32,4,54,2,0,32,4,32,3,54,2,8,32,4,32,2,54,2,12,32,4,65,0,54,2,24,11,5,65,128,196,0,40,2,0,34,3,69,32,1,32,3,73,114,4,64,65,128,196,0,32,1,54,2,0,11,65,176,199,0,32,1,54,2,0,65,180,199,0,32,2,54,2,0,65,188,199,0,65,0,54,2,0,65,148,196,0,65,200,199,0,40,2,0,54,2,0,65,144,196,0,65,127,54,2,0,65,164,196,0,65,152,196,0,54,2,0,65,160,196,0,65,152,196,0,54,2,0,65,172,196,0,65,160,196,0,54,2,0,65,168,196,0,65,160,196,0,54,2,0,65,180,196,0,65,168,196,0,54,2,0,65,176,196,0,65,168,196,0,54,2,0,65,188,196,0,65,176,196,0,54,2,0,65,184,196,0,65,176,196,0,54,2,0,65,196,196,0,65,184,196,0,54,2,0,65,192,196,0,65,184,196,0,54,2,0,65,204,196,0,65,192,196,0,54,2,0,65,200,196,0,65,192,196,0,54,2,0,65,212,196,0,65,200,196,0,54,2,0,65,208,196,0,65,200,196,0,54,2,0,65,220,196,0,65,208,196,0,54,2,0,65,216,196,0,65,208,196,0,54,2,0,65,228,196,0,65,216,196,0,54,2,0,65,224,196,0,65,216,196,0,54,2,0,65,236,196,0,65,224,196,0,54,2,0,65,232,196,0,65,224,196,0,54,2,0,65,244,196,0,65,232,196,0,54,2,0,65,240,196,0,65,232,196,0,54,2,0,65,252,196,0,65,240,196,0,54,2,0,65,248,196,0,65,240,196,0,54,2,0,65,132,197,0,65,248,196,0,54,2,0,65,128,197,0,65,248,196,0,54,2,0,65,140,197,0,65,128,197,0,54,2,0,65,136,197,0,65,128,197,0,54,2,0,65,148,197,0,65,136,197,0,54,2,0,65,144,197,0,65,136,197,0,54,2,0,65,156,197,0,65,144,197,0,54,2,0,65,152,197,0,65,144,197,0,54,2,0,65,164,197,0,65,152,197,0,54,2,0,65,160,197,0,65,152,197,0,54,2,0,65,172,197,0,65,160,197,0,54,2,0,65,168,197,0,65,160,197,0,54,2,0,65,180,197,0,65,168,197,0,54,2,0,65,176,197,0,65,168,197,0,54,2,0,65,188,197,0,65,176,197,0,54,2,0,65,184,197,0,65,176,197,0,54,2,0,65,196,197,0,65,184,197,0,54,2,0,65,192,197,0,65,184,197,0,54,2,0,65,204,197,0,65,192,197,0,54,2,0,65,200,197,0,65,192,197,0,54,2,0,65,212,197,0,65,200,197,0,54,2,0,65,208,197,0,65,200,197,0,54,2,0,65,220,197,0,65,208,197,0,54,2,0,65,216,197,0,65,208,197,0,54,2,0,65,228,197,0,65,216,197,0,54,2,0,65,224,197,0,65,216,197,0,54,2,0,65,236,197,0,65,224,197,0,54,2,0,65,232,197,0,65,224,197,0,54,2,0,65,244,197,0,65,232,197,0,54,2,0,65,240,197,0,65,232,197,0,54,2,0,65,252,197,0,65,240,197,0,54,2,0,65,248,197,0,65,240,197,0,54,2,0,65,132,198,0,65,248,197,0,54,2,0,65,128,198,0,65,248,197,0,54,2,0,65,140,198,0,65,128,198,0,54,2,0,65,136,198,0,65,128,198,0,54,2,0,65,148,198,0,65,136,198,0,54,2,0,65,144,198,0,65,136,198,0,54,2,0,65,156,198,0,65,144,198,0,54,2,0,65,152,198,0,65,144,198,0,54,2,0,32,2,65,88,106,33,3,65,0,32,1,65,8,106,34,4,107,65,7,113,33,2,65,136,196,0,32,1,32,4,65,7,113,4,127,32,2,5,65,0,34,2,11,106,34,4,54,2,0,65,252,195,0,32,3,32,2,107,34,2,54,2,0,32,4,32,2,65,1,114,54,2,4,32,1,32,3,106,65,40,54,2,4,65,140,196,0,65,216,199,0,40,2,0,54,2,0,11,11,65,252,195,0,40,2,0,34,1,32,0,75,4,64,65,252,195,0,32,1,32,0,107,34,2,54,2,0,12,2,11,11,65,160,200,0,65,12,54,2,0,32,10,36,4,65,0,15,11,65,136,196,0,65,136,196,0,40,2,0,34,1,32,0,106,34,3,54,2,0,32,3,32,2,65,1,114,54,2,4,32,1,32,0,65,3,114,54,2,4,11,32,10,36,4,32,1,65,8,106,11,56,1,1,127,35,4,33,3,35,4,65,16,106,36,4,32,3,32,2,54,2,0,65,224,55,65,128,4,32,1,32,3,16,104,32,0,65,5,79,4,64,32,3,36,4,15,11,32,0,16,137,2,32,3,36,4,11,23,0,32,0,40,2,0,65,32,113,69,4,64,32,1,32,2,32,0,16,206,1,11,11,125,1,1,127,35,4,33,5,35,4,65,128,2,106,36,4,32,2,32,3,74,32,4,65,128,192,4,113,69,113,4,64,32,5,32,1,65,24,116,65,24,117,32,2,32,3,107,34,2,65,128,2,73,4,127,32,2,5,65,128,2,11,16,42,26,32,2,65,255,1,75,4,64,32,2,33,1,3,64,32,0,32,5,65,128,2,16,45,32,1,65,128,126,106,34,1,65,255,1,75,13,0,11,32,2,65,255,1,113,33,2,11,32,0,32,5,32,2,16,45,11,32,5,36,4,11,167,1,2,3,127,2,125,32,1,4,64,32,0,40,2,0,34,4,65,127,106,32,1,71,4,64,32,1,65,127,106,33,3,32,0,40,2,4,33,2,32,1,65,1,106,34,0,32,4,73,4,127,32,0,5,32,1,34,0,11,32,1,70,4,64,32,2,32,1,65,2,116,106,42,2,0,32,2,32,3,65,2,116,106,42,2,0,95,4,127,32,1,5,32,3,11,179,15,5,32,2,32,3,65,2,116,106,42,2,0,34,5,32,2,32,0,65,2,116,106,42,2,0,34,6,147,67,0,0,0,63,148,32,5,32,2,32,1,65,2,116,106,42,2,0,67,0,0,0,64,148,147,32,6,146,149,32,1,179,146,15,11,0,11,11,32,1,179,11,67,1,1,127,32,0,69,4,64,65,1,33,0,11,3,127,2,127,32,0,16,43,34,1,4,64,32,1,12,1,11,2,127,65,164,200,0,65,164,200,0,40,2,0,34,1,54,2,0,32,1,11,4,127,65,46,17,8,0,12,2,5,65,0,11,11,11,11,249,1,1,3,127,32,1,65,4,106,33,4,32,0,65,8,106,33,1,3,64,32,3,32,0,40,2,0,34,5,73,4,64,32,1,40,2,0,32,3,65,2,116,106,32,4,40,2,0,32,3,65,2,116,106,40,2,0,54,2,0,32,3,65,1,106,33,3,12,1,11,11,32,5,65,1,32,1,40,2,0,32,0,40,2,20,32,0,40,2,16,16,88,32,2,65,4,106,34,3,40,2,0,32,1,40,2,0,40,2,0,54,2,0,32,3,40,2,0,32,0,40,2,0,65,1,118,65,2,116,106,32,1,40,2,0,40,2,4,54,2,0,32,0,65,4,106,33,4,65,1,33,2,3,64,32,2,32,4,40,2,0,65,127,106,73,4,64,32,3,40,2,0,32,2,65,2,116,106,32,1,40,2,0,32,2,65,1,116,34,5,65,2,116,106,40,2,0,54,2,0,32,3,40,2,0,32,0,40,2,0,32,2,107,65,2,116,106,32,1,40,2,0,32,5,65,1,114,65,2,116,106,42,2,0,140,56,2,0,32,2,65,1,106,33,2,12,1,11,11,11,6,0,65,11,16,3,11,81,1,1,127,32,0,65,0,74,35,3,40,2,0,34,1,32,0,106,34,0,32,1,72,113,32,0,65,0,72,114,4,64,16,6,26,65,12,16,7,65,127,15,11,35,3,32,0,54,2,0,32,0,16,5,74,4,64,16,4,69,4,64,35,3,32,1,54,2,0,65,12,16,7,65,127,15,11,11,32,1,11,21,1,1,127,32,0,16,199,1,33,2,32,1,4,127,32,2,5,32,0,11,11,11,0,32,0,67,0,0,0,0,16,77,11,20,0,32,0,40,2,4,16,40,32,0,40,2,8,16,40,32,0,16,40,11,65,2,2,127,1,125,32,0,40,2,0,33,1,32,0,65,4,106,33,2,65,0,33,0,3,64,32,0,32,1,71,4,64,32,3,32,2,40,2,0,32,0,65,2,116,106,42,2,0,146,33,3,32,0,65,1,106,33,0,12,1,11,11,32,3,11,41,0,32,0,40,2,16,16,40,32,0,40,2,20,16,40,32,0,40,2,24,16,38,32,0,40,2,8,16,40,32,0,40,2,12,16,40,32,0,16,40,11,241,2,1,4,127,35,4,33,4,35,4,65,16,106,36,4,65,28,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,28,16,42,26,11,11,32,4,65,8,106,33,2,2,64,32,0,65,2,72,4,64,32,4,32,0,54,2,0,65,0,65,244,36,32,4,16,44,5,32,0,65,127,106,32,0,113,69,65,1,71,4,64,32,2,32,0,54,2,0,65,0,65,170,37,32,2,16,44,12,2,11,32,1,32,0,54,2,0,32,1,65,4,106,34,2,32,0,65,1,118,65,1,106,54,2,0,32,1,32,0,16,39,54,2,24,32,1,40,2,0,65,2,116,34,3,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,3,16,42,26,11,11,32,1,32,0,54,2,8,32,1,40,2,0,65,2,116,34,3,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,3,16,42,26,11,11,32,1,32,0,54,2,12,32,2,40,2,0,65,2,116,34,3,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,3,16,42,26,11,11,32,1,65,20,106,34,3,32,0,54,2,0,32,2,40,2,0,65,2,116,34,2,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,2,16,42,26,11,11,32,1,32,0,54,2,16,32,3,40,2,0,65,0,54,2,0,32,4,36,4,32,1,15,11,11,32,1,16,40,32,4,36,4,65,0,11,131,1,2,2,127,1,126,32,0,167,33,2,32,0,66,255,255,255,255,15,86,4,64,3,64,32,1,65,127,106,34,1,32,0,32,0,66,10,128,34,4,66,118,126,124,167,65,255,1,113,65,48,114,58,0,0,32,0,66,255,255,255,255,159,1,86,4,64,32,4,33,0,12,1,11,11,32,4,167,33,2,11,32,2,4,64,3,64,32,1,65,127,106,34,1,32,2,32,2,65,10,110,34,3,65,118,108,106,65,48,114,58,0,0,32,2,65,10,79,4,64,32,3,33,2,12,1,11,11,11,32,1,11,153,1,1,3,127,32,0,65,36,106,34,3,40,2,0,40,2,0,32,1,40,2,0,107,33,4,65,0,33,0,3,64,32,0,32,4,71,4,64,32,3,40,2,0,40,2,4,34,2,32,0,65,2,116,106,32,2,32,0,32,1,40,2,0,106,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,32,1,65,4,106,33,2,65,0,33,0,3,64,32,0,32,1,40,2,0,73,4,64,32,3,40,2,0,40,2,4,32,0,32,4,106,65,2,116,106,32,2,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,11,114,2,1,127,4,125,32,0,16,55,34,4,67,0,0,0,0,91,4,64,67,0,0,0,0,15,11,32,0,16,83,33,5,32,0,40,2,0,33,2,32,1,179,33,6,32,0,65,4,106,33,1,65,0,33,0,3,64,32,0,32,2,71,4,64,32,3,32,0,179,32,5,147,187,32,6,187,16,0,182,32,1,40,2,0,32,0,65,2,116,106,42,2,0,148,146,33,3,32,0,65,1,106,33,0,12,1,11,11,32,3,32,4,149,11,195,3,1,3,127,32,2,65,128,192,0,78,4,64,32,0,32,1,32,2,16,34,15,11,32,0,33,4,32,0,32,2,106,33,3,32,0,65,3,113,32,1,65,3,113,70,4,64,3,64,32,0,65,3,113,4,64,32,2,69,4,64,32,4,15,11,32,0,32,1,44,0,0,58,0,0,32,0,65,1,106,33,0,32,1,65,1,106,33,1,32,2,65,1,107,33,2,12,1,11,11,32,3,65,124,113,34,2,65,64,106,33,5,3,64,32,0,32,5,76,4,64,32,0,32,1,40,2,0,54,2,0,32,0,32,1,40,2,4,54,2,4,32,0,32,1,40,2,8,54,2,8,32,0,32,1,40,2,12,54,2,12,32,0,32,1,40,2,16,54,2,16,32,0,32,1,40,2,20,54,2,20,32,0,32,1,40,2,24,54,2,24,32,0,32,1,40,2,28,54,2,28,32,0,32,1,40,2,32,54,2,32,32,0,32,1,40,2,36,54,2,36,32,0,32,1,40,2,40,54,2,40,32,0,32,1,40,2,44,54,2,44,32,0,32,1,40,2,48,54,2,48,32,0,32,1,40,2,52,54,2,52,32,0,32,1,40,2,56,54,2,56,32,0,32,1,40,2,60,54,2,60,32,0,65,64,107,33,0,32,1,65,64,107,33,1,12,1,11,11,3,64,32,0,32,2,72,4,64,32,0,32,1,40,2,0,54,2,0,32,0,65,4,106,33,0,32,1,65,4,106,33,1,12,1,11,11,5,32,3,65,4,107,33,2,3,64,32,0,32,2,72,4,64,32,0,32,1,44,0,0,58,0,0,32,0,32,1,44,0,1,58,0,1,32,0,32,1,44,0,2,58,0,2,32,0,32,1,44,0,3,58,0,3,32,0,65,4,106,33,0,32,1,65,4,106,33,1,12,1,11,11,11,3,64,32,0,32,3,72,4,64,32,0,32,1,44,0,0,58,0,0,32,0,65,1,106,33,0,32,1,65,1,106,33,1,12,1,11,11,32,4,11,138,1,1,4,127,35,4,33,2,35,4,65,16,106,36,4,32,0,40,2,0,34,3,32,1,40,2,0,34,4,71,4,64,32,2,32,3,54,2,0,32,2,32,4,54,2,4,65,0,65,167,46,32,2,16,44,32,2,36,4,15,11,32,0,65,4,106,33,4,32,1,65,4,106,33,5,65,0,33,0,3,64,32,0,32,3,73,4,64,32,5,40,2,0,32,0,65,2,116,106,32,4,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,32,1,40,2,0,33,3,12,1,11,11,32,2,36,4,11,100,1,3,127,32,0,40,2,0,34,3,32,1,40,2,0,34,2,79,4,64,32,2,33,3,11,32,1,65,4,106,33,1,32,0,65,4,106,33,2,65,0,33,0,3,64,32,0,32,3,73,4,64,32,2,40,2,0,32,0,65,2,116,106,34,4,32,4,42,2,0,32,1,40,2,0,32,0,65,2,116,106,42,2,0,148,56,2,0,32,0,65,1,106,33,0,12,1,11,11,11,155,1,1,2,127,32,0,65,1,72,4,64,65,0,15,11,65,12,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,12,16,42,26,11,11,32,1,32,0,65,1,118,65,1,106,34,0,54,2,0,32,0,65,2,116,34,2,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,2,16,42,26,11,11,32,1,32,0,54,2,4,32,1,40,2,0,65,2,116,34,2,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,2,16,42,26,11,11,32,1,32,0,54,2,8,32,1,11,196,3,2,9,127,3,125,2,64,32,0,40,2,4,33,2,32,0,40,2,0,65,127,106,34,0,65,1,118,33,6,2,64,2,64,3,64,2,64,32,0,32,5,77,13,4,32,0,32,5,65,1,106,34,4,70,13,0,32,2,32,5,32,0,106,65,1,118,65,2,116,106,34,1,42,2,0,34,10,32,2,32,0,65,2,116,106,34,3,42,2,0,34,11,94,4,64,32,1,32,11,56,2,0,32,3,32,10,56,2,0,5,32,11,33,10,11,32,2,32,5,65,2,116,106,34,7,42,2,0,34,11,32,10,94,4,125,32,7,32,10,56,2,0,32,3,32,11,56,2,0,32,7,42,2,0,5,32,11,11,33,10,32,1,42,2,0,34,11,32,10,94,4,127,32,1,32,10,56,2,0,32,7,32,11,56,2,0,32,1,40,2,0,5,32,11,188,11,33,3,32,1,32,2,32,4,65,2,116,106,34,1,40,2,0,54,2,0,32,1,32,3,54,2,0,32,0,33,1,3,64,32,7,42,2,0,33,10,3,64,32,10,32,2,32,4,65,1,106,34,4,65,2,116,106,34,9,42,2,0,34,12,94,13,0,11,32,1,33,3,3,64,32,2,32,3,65,127,106,34,1,65,2,116,106,34,8,42,2,0,34,11,32,10,94,4,64,32,1,33,3,12,1,11,11,32,1,32,4,79,4,64,32,9,32,11,56,2,0,32,8,32,12,56,2,0,12,1,11,11,32,7,32,11,56,2,0,32,8,32,10,56,2,0,32,1,32,6,77,4,64,32,4,33,5,11,32,3,65,126,106,33,4,32,1,32,6,79,4,64,32,4,33,0,11,12,1,11,11,11,11,32,2,32,5,65,2,116,106,34,1,42,2,0,34,10,32,2,32,0,65,2,116,106,34,0,42,2,0,34,11,94,69,13,0,32,1,32,11,56,2,0,32,0,32,10,56,2,0,32,2,32,6,65,2,116,106,42,2,0,15,11,32,2,32,6,65,2,116,106,42,2,0,11,87,2,4,127,2,125,32,0,40,2,0,33,2,32,0,40,2,4,34,3,42,2,0,33,5,65,0,33,0,3,64,32,1,32,2,71,4,64,32,5,32,3,32,1,65,2,116,106,42,2,0,34,6,93,34,4,69,4,64,32,1,33,0,11,32,4,69,4,64,32,6,33,5,11,32,1,65,1,106,33,1,12,1,11,11,32,0,11,36,0,32,1,16,39,34,1,4,64,32,1,32,0,16,132,2,4,64,32,1,16,38,65,0,33,1,11,5,65,0,33,1,11,32,1,11,100,1,2,127,32,0,65,1,72,4,64,65,0,15,11,65,8,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,8,16,42,26,11,11,32,1,32,0,54,2,0,32,0,65,3,116,34,2,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,2,16,42,26,11,11,32,1,32,0,54,2,4,32,1,11,11,0,32,0,67,0,0,128,63,16,77,11,249,3,2,8,127,12,125,32,0,65,15,74,4,64,32,0,32,1,32,2,16,90,65,16,33,3,3,64,32,3,65,3,116,34,4,32,0,76,4,64,32,0,32,3,32,1,32,2,16,89,32,4,33,3,12,1,11,11,5,65,2,33,3,11,32,3,65,1,116,34,2,32,0,72,4,64,65,0,33,0,3,64,32,0,32,3,72,4,64,32,0,32,3,106,34,2,32,3,106,34,4,32,3,106,33,5,32,1,32,0,65,2,116,106,34,6,42,2,0,34,14,32,1,32,2,65,2,116,106,34,7,42,2,0,34,15,146,33,11,32,1,32,0,65,1,114,65,2,116,106,34,8,42,2,0,34,16,32,1,32,2,65,1,106,65,2,116,106,34,2,42,2,0,34,17,146,33,12,32,1,32,4,65,1,106,65,2,116,106,34,9,42,2,0,34,18,32,1,32,5,65,1,106,65,2,116,106,34,10,42,2,0,34,19,146,33,13,32,6,32,11,32,1,32,4,65,2,116,106,34,4,42,2,0,34,20,32,1,32,5,65,2,116,106,34,5,42,2,0,34,21,146,34,22,146,56,2,0,32,8,32,12,32,13,146,56,2,0,32,4,32,11,32,22,147,56,2,0,32,9,32,12,32,13,147,56,2,0,32,7,32,14,32,15,147,34,11,32,18,32,19,147,34,12,147,56,2,0,32,2,32,16,32,17,147,34,13,32,20,32,21,147,34,14,146,56,2,0,32,5,32,11,32,12,146,56,2,0,32,10,32,13,32,14,147,56,2,0,32,0,65,2,106,33,0,12,1,11,11,15,11,32,2,32,0,71,4,64,15,11,65,0,33,0,3,64,32,0,32,3,72,4,64,32,1,32,0,65,2,116,106,34,4,42,2,0,33,11,32,1,32,0,32,3,106,34,2,65,2,116,106,34,5,42,2,0,33,12,32,1,32,0,65,1,114,65,2,116,106,34,6,42,2,0,34,13,32,1,32,2,65,1,106,65,2,116,106,34,2,42,2,0,147,33,14,32,4,32,11,32,12,146,56,2,0,32,6,32,13,32,2,42,2,0,146,56,2,0,32,5,32,11,32,12,147,56,2,0,32,2,32,14,56,2,0,32,0,65,2,106,33,0,12,1,11,11,11,234,7,1,15,127,32,1,65,0,54,2,0,65,1,33,13,3,64,32,13,65,3,116,34,3,32,0,72,4,64,32,0,65,1,117,33,0,65,0,33,7,3,64,32,7,32,13,72,4,64,32,1,32,13,32,7,106,65,2,116,106,32,1,32,7,65,2,116,106,40,2,0,32,0,106,54,2,0,32,7,65,1,106,33,7,12,1,11,11,32,13,65,1,116,33,13,12,1,11,11,32,13,65,1,116,33,7,32,3,32,0,70,4,64,32,13,65,2,116,33,12,65,0,33,0,3,64,32,0,32,13,72,4,64,32,1,32,0,65,2,116,106,33,8,32,0,65,1,116,33,14,65,0,33,3,3,64,32,3,32,0,71,4,64,32,2,32,3,65,1,116,32,8,40,2,0,106,34,4,65,2,116,106,34,9,40,2,0,33,10,32,2,32,4,65,1,106,65,2,116,106,34,11,40,2,0,33,15,32,2,32,14,32,1,32,3,65,2,116,106,40,2,0,106,34,5,65,2,116,106,33,6,32,2,32,5,65,1,106,65,2,116,106,34,16,40,2,0,33,17,32,9,32,6,40,2,0,54,2,0,32,11,32,17,54,2,0,32,6,32,10,54,2,0,32,16,32,15,54,2,0,32,2,32,4,32,7,106,34,4,65,2,116,106,34,9,40,2,0,33,10,32,2,32,4,65,1,106,65,2,116,106,34,11,40,2,0,33,15,32,2,32,5,32,12,106,34,5,65,2,116,106,33,6,32,2,32,5,65,1,106,65,2,116,106,34,16,40,2,0,33,17,32,9,32,6,40,2,0,54,2,0,32,11,32,17,54,2,0,32,6,32,10,54,2,0,32,16,32,15,54,2,0,32,2,32,4,32,7,106,34,4,65,2,116,106,34,9,40,2,0,33,10,32,2,32,4,65,1,106,65,2,116,106,34,11,40,2,0,33,15,32,2,32,5,32,7,107,34,5,65,2,116,106,33,6,32,2,32,5,65,1,106,65,2,116,106,34,16,40,2,0,33,17,32,9,32,6,40,2,0,54,2,0,32,11,32,17,54,2,0,32,6,32,10,54,2,0,32,16,32,15,54,2,0,32,2,32,4,32,7,106,34,4,65,2,116,106,34,6,40,2,0,33,9,32,2,32,4,65,1,106,65,2,116,106,34,10,40,2,0,33,11,32,2,32,5,32,12,106,34,5,65,2,116,106,33,4,32,2,32,5,65,1,106,65,2,116,106,34,5,40,2,0,33,15,32,6,32,4,40,2,0,54,2,0,32,10,32,15,54,2,0,32,4,32,9,54,2,0,32,5,32,11,54,2,0,32,3,65,1,106,33,3,12,1,11,11,32,14,32,7,106,32,8,40,2,0,106,34,3,32,7,106,33,8,32,2,32,3,65,2,116,106,34,14,40,2,0,33,4,32,2,32,3,65,1,106,65,2,116,106,34,3,40,2,0,33,5,32,2,32,8,65,1,106,65,2,116,106,34,6,40,2,0,33,9,32,14,32,2,32,8,65,2,116,106,34,8,40,2,0,54,2,0,32,3,32,9,54,2,0,32,8,32,4,54,2,0,32,6,32,5,54,2,0,32,0,65,1,106,33,0,12,1,11,11,5,65,1,33,0,3,64,32,0,32,13,72,4,64,32,1,32,0,65,2,116,106,33,4,32,0,65,1,116,33,5,65,0,33,3,3,64,32,3,32,0,71,4,64,32,2,32,3,65,1,116,32,4,40,2,0,106,34,12,65,2,116,106,34,6,40,2,0,33,9,32,2,32,12,65,1,106,65,2,116,106,34,10,40,2,0,33,11,32,2,32,5,32,1,32,3,65,2,116,106,40,2,0,106,34,8,65,2,116,106,33,14,32,2,32,8,65,1,106,65,2,116,106,34,15,40,2,0,33,16,32,6,32,14,40,2,0,54,2,0,32,10,32,16,54,2,0,32,14,32,9,54,2,0,32,15,32,11,54,2,0,32,2,32,12,32,7,106,34,12,65,2,116,106,34,14,40,2,0,33,6,32,2,32,12,65,1,106,65,2,116,106,34,9,40,2,0,33,10,32,2,32,8,32,7,106,34,8,65,2,116,106,33,12,32,2,32,8,65,1,106,65,2,116,106,34,8,40,2,0,33,11,32,14,32,12,40,2,0,54,2,0,32,9,32,11,54,2,0,32,12,32,6,54,2,0,32,8,32,10,54,2,0,32,3,65,1,106,33,3,12,1,11,11,32,0,65,1,106,33,0,12,1,11,11,11,11,37,0,32,0,32,1,32,0,65,24,106,34,0,40,2,0,16,49,32,0,40,2,0,34,0,32,2,16,150,1,32,0,32,2,16,149,1,11,8,0,65,4,16,3,65,0,11,254,19,2,22,127,1,126,35,4,33,17,35,4,65,64,107,36,4,32,17,65,40,106,33,11,32,17,65,60,106,33,22,32,17,65,56,106,34,14,32,1,54,2,0,32,0,65,0,71,33,18,32,17,65,40,106,34,21,33,19,32,17,65,39,106,33,24,32,17,65,48,106,34,23,65,4,106,33,26,65,0,33,1,2,64,2,64,3,64,2,64,3,64,32,10,65,127,74,4,64,32,1,65,255,255,255,255,7,32,10,107,74,4,127,65,160,200,0,65,203,0,54,2,0,65,127,5,32,1,32,10,106,11,33,10,11,32,14,40,2,0,34,8,44,0,0,34,6,69,13,3,32,8,33,1,2,64,2,64,3,64,2,64,2,64,2,64,2,64,32,6,65,24,116,65,24,117,14,38,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,11,12,4,11,12,1,11,32,14,32,1,65,1,106,34,1,54,2,0,32,1,44,0,0,33,6,12,1,11,11,12,1,11,32,1,33,6,3,64,32,6,44,0,1,65,37,71,13,1,32,1,65,1,106,33,1,32,14,32,6,65,2,106,34,6,54,2,0,32,6,44,0,0,65,37,70,13,0,11,11,32,1,32,8,107,33,1,32,18,4,64,32,0,32,8,32,1,16,45,11,32,1,13,0,11,32,14,40,2,0,34,6,44,0,1,34,1,65,80,106,65,10,73,4,64,32,1,65,80,106,33,16,32,6,44,0,2,65,36,70,34,12,4,127,65,3,5,65,1,11,33,1,32,12,4,64,65,1,33,5,11,32,12,69,4,64,65,127,33,16,11,5,65,127,33,16,65,1,33,1,11,32,14,32,6,32,1,106,34,1,54,2,0,32,1,44,0,0,34,12,65,96,106,34,6,65,31,75,65,1,32,6,116,65,137,209,4,113,69,114,4,64,65,0,33,6,5,65,0,33,12,3,64,65,1,32,6,116,32,12,114,33,6,32,14,32,1,65,1,106,34,1,54,2,0,32,1,44,0,0,34,12,65,96,106,34,15,65,31,75,65,1,32,15,116,65,137,209,4,113,69,114,69,4,64,32,6,33,12,32,15,33,6,12,1,11,11,11,2,64,32,12,65,255,1,113,65,42,70,4,127,2,127,2,64,32,1,65,1,106,34,12,44,0,0,34,15,65,80,106,65,10,79,13,0,32,1,44,0,2,65,36,71,13,0,32,4,32,15,65,80,106,65,2,116,106,65,10,54,2,0,32,3,32,12,44,0,0,65,80,106,65,3,116,106,41,3,0,167,33,5,65,1,33,7,32,1,65,3,106,12,1,11,32,5,4,64,65,127,33,10,12,4,11,32,18,4,64,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,5,32,2,32,1,65,4,106,54,2,0,5,65,0,33,5,11,65,0,33,7,32,12,11,33,1,32,14,32,1,54,2,0,32,6,65,128,192,0,114,33,12,65,0,32,5,107,33,15,32,5,65,0,72,34,9,4,64,32,12,33,6,11,32,9,69,4,64,32,5,33,15,11,32,7,33,12,32,1,5,32,14,16,102,34,15,65,0,72,4,64,65,127,33,10,12,3,11,32,5,33,12,32,14,40,2,0,11,34,5,44,0,0,65,46,70,4,64,32,5,65,1,106,34,1,44,0,0,65,42,71,4,64,32,14,32,1,54,2,0,32,14,16,102,33,1,32,14,40,2,0,33,5,12,2,11,32,5,65,2,106,34,7,44,0,0,34,1,65,80,106,65,10,73,4,64,32,5,44,0,3,65,36,70,4,64,32,4,32,1,65,80,106,65,2,116,106,65,10,54,2,0,32,3,32,7,44,0,0,65,80,106,65,3,116,106,41,3,0,167,33,1,32,14,32,5,65,4,106,34,5,54,2,0,12,3,11,11,32,12,4,64,65,127,33,10,12,3,11,32,18,4,64,32,2,40,2,0,65,3,106,65,124,113,34,5,40,2,0,33,1,32,2,32,5,65,4,106,54,2,0,5,65,0,33,1,11,32,14,32,7,54,2,0,32,7,33,5,5,65,127,33,1,11,11,65,0,33,13,3,64,32,5,44,0,0,65,191,127,106,65,57,75,4,64,65,127,33,10,12,2,11,32,14,32,5,65,1,106,34,9,54,2,0,32,13,65,58,108,32,5,44,0,0,106,65,143,10,106,44,0,0,34,20,65,255,1,113,34,7,65,127,106,65,8,73,4,64,32,7,33,13,32,9,33,5,12,1,11,11,32,20,69,4,64,65,127,33,10,12,1,11,32,16,65,127,74,33,9,2,64,2,64,2,64,32,20,65,19,70,4,64,32,9,4,64,65,127,33,10,12,5,11,5,32,9,4,64,32,4,32,16,65,2,116,106,32,7,54,2,0,32,11,32,3,32,16,65,3,116,106,41,3,0,55,3,0,12,2,11,32,18,69,4,64,65,0,33,10,12,5,11,32,11,32,7,32,2,16,101,12,2,11,11,32,18,13,0,65,0,33,1,12,1,11,32,5,44,0,0,34,5,65,95,113,33,7,32,13,65,0,71,32,5,65,15,113,65,3,70,113,69,4,64,32,5,33,7,11,32,6,65,255,255,123,113,33,9,32,6,65,128,192,0,113,4,127,32,9,5,32,6,11,33,5,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,7,65,193,0,107,14,56,11,12,9,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,10,12,12,12,12,2,12,12,12,12,12,12,12,12,11,12,6,4,11,11,11,12,4,12,12,12,7,0,3,1,12,12,8,12,5,12,12,2,12,11,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,13,65,255,1,113,65,24,116,65,24,117,14,8,0,1,2,3,4,7,5,6,7,11,32,11,40,2,0,32,10,54,2,0,65,0,33,1,12,26,11,32,11,40,2,0,32,10,54,2,0,65,0,33,1,12,25,11,32,11,40,2,0,32,10,172,55,3,0,65,0,33,1,12,24,11,32,11,40,2,0,32,10,59,1,0,65,0,33,1,12,23,11,32,11,40,2,0,32,10,58,0,0,65,0,33,1,12,22,11,32,11,40,2,0,32,10,54,2,0,65,0,33,1,12,21,11,32,11,40,2,0,32,10,172,55,3,0,65,0,33,1,12,20,11,65,0,33,1,12,19,11,65,248,0,33,7,32,1,65,8,77,4,64,65,8,33,1,11,32,5,65,8,114,33,5,12,11,11,12,10,11,32,19,32,11,41,3,0,34,27,32,21,16,213,1,34,6,107,34,9,65,1,106,33,13,65,0,33,7,65,155,55,33,8,32,5,65,8,113,69,32,1,32,9,74,114,69,4,64,32,13,33,1,11,12,13,11,32,11,41,3,0,34,27,66,0,83,4,64,32,11,66,0,32,27,125,34,27,55,3,0,65,1,33,7,65,155,55,33,8,5,32,5,65,128,16,113,69,33,6,32,5,65,1,113,4,127,65,157,55,5,65,155,55,11,33,8,32,5,65,129,16,113,65,0,71,33,7,32,6,69,4,64,65,156,55,33,8,11,11,12,9,11,65,0,33,7,65,155,55,33,8,32,11,41,3,0,33,27,12,8,11,32,24,32,11,41,3,0,60,0,0,32,24,33,6,65,0,33,7,65,155,55,33,13,65,1,33,8,32,9,33,5,32,19,33,1,12,12,11,65,160,200,0,40,2,0,65,136,200,0,16,208,1,33,6,12,7,11,32,11,40,2,0,34,6,69,4,64,65,165,55,33,6,11,12,6,11,32,23,32,11,41,3,0,62,2,0,32,26,65,0,54,2,0,32,11,32,23,54,2,0,65,127,33,7,32,23,33,6,12,6,11,32,1,4,64,32,1,33,7,32,11,40,2,0,33,6,12,6,5,32,0,65,32,32,15,65,0,32,5,16,46,65,0,33,1,12,8,11,0,11,32,0,32,11,43,3,0,32,15,32,1,32,5,32,7,16,210,1,33,1,12,8,11,32,8,33,6,65,0,33,7,65,155,55,33,13,32,1,33,8,32,19,33,1,12,6,11,32,11,41,3,0,34,27,32,21,32,7,65,32,113,16,214,1,33,6,32,7,65,4,118,65,155,55,106,33,8,32,5,65,8,113,69,32,27,66,0,81,114,34,7,4,64,65,155,55,33,8,11,32,7,4,127,65,0,5,65,2,11,33,7,12,3,11,32,27,32,21,16,58,33,6,12,2,11,32,6,32,1,16,212,1,34,20,69,33,25,32,20,32,6,107,33,5,32,6,32,1,106,33,16,65,0,33,7,65,155,55,33,13,32,25,4,127,32,1,5,32,5,11,33,8,32,9,33,5,32,25,4,127,32,16,5,32,20,11,33,1,12,3,11,32,6,33,8,65,0,33,1,2,64,2,64,3,64,32,8,40,2,0,34,9,4,64,32,22,32,9,16,100,34,9,65,0,72,34,13,32,9,32,7,32,1,107,75,114,13,2,32,8,65,4,106,33,8,32,7,32,9,32,1,106,34,1,75,13,1,11,11,12,1,11,32,13,4,64,65,127,33,10,12,6,11,11,32,0,65,32,32,15,32,1,32,5,16,46,32,1,4,64,65,0,33,8,3,64,32,6,40,2,0,34,7,69,13,3,32,22,32,7,16,100,34,7,32,8,106,34,8,32,1,74,13,3,32,6,65,4,106,33,6,32,0,32,22,32,7,16,45,32,8,32,1,73,13,0,11,5,65,0,33,1,11,12,1,11,32,5,65,255,255,123,113,33,9,32,1,65,127,74,4,64,32,9,33,5,11,32,1,65,0,71,32,27,66,0,82,34,13,114,33,9,32,1,32,19,32,6,107,32,13,65,1,115,65,1,113,106,34,13,76,4,64,32,13,33,1,11,32,9,69,4,64,65,0,33,1,11,32,9,69,4,64,32,21,33,6,11,32,8,33,13,32,1,33,8,32,19,33,1,12,1,11,32,0,65,32,32,15,32,1,32,5,65,128,192,0,115,16,46,32,15,32,1,74,4,64,32,15,33,1,11,12,1,11,32,0,65,32,32,15,32,8,32,1,32,6,107,34,9,72,4,127,32,9,5,32,8,11,34,16,32,7,106,34,8,72,4,127,32,8,5,32,15,11,34,1,32,8,32,5,16,46,32,0,32,13,32,7,16,45,32,0,65,48,32,1,32,8,32,5,65,128,128,4,115,16,46,32,0,65,48,32,16,32,9,65,0,16,46,32,0,32,6,32,9,16,45,32,0,65,32,32,1,32,8,32,5,65,128,192,0,115,16,46,11,32,12,33,5,12,1,11,11,12,1,11,32,0,69,4,64,32,5,4,64,65,1,33,0,3,64,32,4,32,0,65,2,116,106,40,2,0,34,1,4,64,32,3,32,0,65,3,116,106,32,1,32,2,16,101,32,0,65,1,106,34,0,65,10,73,13,1,65,1,33,10,12,4,11,11,65,0,33,1,3,64,32,1,4,64,65,127,33,10,12,4,11,32,0,65,1,106,34,0,65,10,73,4,127,32,4,32,0,65,2,116,106,40,2,0,33,1,12,1,5,65,1,11,33,10,11,5,65,0,33,10,11,11,11,32,17,36,4,32,10,11,58,1,3,127,32,0,65,4,106,33,3,3,64,32,2,32,0,40,2,0,73,4,64,32,3,40,2,0,32,2,65,2,116,106,34,4,32,4,42,2,0,32,1,146,56,2,0,32,2,65,1,106,33,2,12,1,11,11,11,85,2,4,127,2,125,32,0,40,2,0,33,2,32,0,65,4,106,33,3,65,0,33,0,3,64,32,1,32,2,71,4,64,32,5,32,3,40,2,0,32,1,65,2,116,106,42,2,0,34,6,94,34,4,69,4,64,32,1,33,0,11,32,4,69,4,64,32,6,33,5,11,32,1,65,1,106,33,1,12,1,11,11,32,0,11,50,1,2,127,32,0,65,4,106,33,3,3,64,32,2,32,0,40,2,0,73,4,64,32,3,40,2,0,32,2,65,2,116,106,32,1,56,2,0,32,2,65,1,106,33,2,12,1,11,11,11,61,2,2,127,1,125,32,0,40,2,4,33,2,3,64,32,1,32,2,71,4,64,32,3,32,0,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,146,33,3,32,1,65,1,106,33,1,12,1,11,11,32,3,32,2,179,149,11,83,1,4,127,32,0,65,4,106,33,2,32,0,65,8,106,33,3,3,64,32,1,32,2,40,2,0,73,4,64,32,0,40,2,0,40,2,4,32,1,65,2,116,106,34,4,32,4,42,2,0,32,3,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,148,56,2,0,32,1,65,1,106,33,1,12,1,11,11,11,147,2,2,5,127,4,125,32,1,16,109,33,7,32,1,16,130,2,34,9,32,7,147,32,0,65,4,106,34,5,40,2,0,179,34,10,149,33,8,32,0,65,12,106,34,3,40,2,0,32,7,32,9,67,0,0,0,0,32,10,16,113,32,0,65,8,106,34,4,40,2,0,40,2,4,32,7,32,8,67,0,0,0,63,148,146,56,2,0,65,1,33,2,3,64,32,2,32,5,40,2,0,73,4,64,32,4,40,2,0,40,2,4,34,6,32,2,65,2,116,106,32,6,42,2,0,32,8,32,2,179,148,146,56,2,0,32,2,65,1,106,33,2,12,1,11,11,32,3,40,2,0,32,1,16,134,2,32,0,40,2,0,16,53,32,1,65,4,106,33,4,65,0,33,2,3,64,32,2,32,1,40,2,0,73,4,64,32,4,40,2,0,32,2,65,2,116,106,42,2,0,34,7,67,0,0,0,0,92,4,64,32,7,142,168,34,3,65,127,74,4,64,32,5,40,2,0,32,3,74,4,64,32,0,40,2,0,40,2,4,32,3,65,2,116,106,34,3,32,3,42,2,0,67,0,0,128,63,146,56,2,0,11,11,11,32,2,65,1,106,33,2,12,1,11,11,11,34,0,32,0,40,2,8,16,38,32,0,40,2,12,16,38,32,0,40,2,20,16,38,32,0,40,2,16,16,38,32,0,16,40,11,206,2,3,8,127,1,125,1,124,32,0,40,2,0,33,6,32,0,40,2,20,40,2,4,33,4,32,0,40,2,16,40,2,4,33,2,32,0,40,2,8,40,2,4,33,9,32,0,40,2,12,40,2,4,33,7,32,1,65,4,106,33,8,3,64,32,3,32,1,40,2,0,73,4,64,32,8,40,2,0,32,3,65,2,116,106,42,2,0,34,10,187,33,11,32,4,32,10,139,187,68,57,30,40,163,253,76,70,55,99,4,124,68,0,0,0,0,0,0,0,0,34,11,5,32,11,11,57,3,0,32,2,32,7,43,3,0,32,11,162,34,11,57,3,0,65,1,33,0,3,64,32,0,32,6,73,4,64,32,2,32,11,32,7,32,0,65,3,116,106,43,3,0,32,4,32,0,65,3,116,106,43,3,0,162,160,34,11,57,3,0,32,2,32,11,32,9,32,0,65,3,116,106,43,3,0,32,2,32,0,65,3,116,106,43,3,0,162,161,34,11,57,3,0,32,0,65,1,106,33,0,12,1,11,11,32,8,40,2,0,32,3,65,2,116,106,32,11,182,56,2,0,32,6,33,0,3,64,32,0,65,127,106,34,5,4,64,32,4,32,5,65,3,116,106,32,4,32,0,65,126,106,34,0,65,3,116,106,43,3,0,57,3,0,32,2,32,5,65,3,116,106,32,2,32,0,65,3,116,106,43,3,0,57,3,0,32,5,33,0,12,1,11,11,32,3,65,1,106,33,3,12,1,11,11,11,93,2,2,127,2,125,32,0,16,55,34,4,67,0,0,0,0,91,4,64,67,0,0,0,0,15,11,32,0,40,2,0,33,1,32,0,65,4,106,33,2,65,0,33,0,3,64,32,0,32,1,71,4,64,32,3,32,2,40,2,0,32,0,65,2,116,106,42,2,0,32,0,179,148,146,33,3,32,0,65,1,106,33,0,12,1,11,11,32,3,32,4,149,11,151,3,3,8,127,1,125,1,124,32,1,40,2,0,33,6,32,2,65,4,106,34,7,40,2,0,67,0,0,0,0,56,2,0,32,0,65,16,106,34,2,40,2,0,40,2,4,67,0,0,0,0,56,2,0,32,1,65,8,106,33,4,32,0,65,20,106,33,3,32,0,65,24,106,33,5,32,0,65,8,106,33,8,32,1,65,4,106,33,9,65,0,33,1,3,64,32,1,32,6,71,4,64,32,2,40,2,0,40,2,4,32,1,65,2,116,106,32,4,40,2,0,32,1,65,2,116,106,42,2,0,187,32,3,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,187,68,0,0,0,0,0,0,0,64,162,161,32,5,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,187,160,182,187,34,12,68,24,45,68,84,251,33,9,64,160,154,68,24,45,68,84,251,33,25,64,163,182,142,187,68,0,0,0,0,0,0,240,63,160,68,24,45,68,84,251,33,25,64,162,32,12,160,182,56,2,0,32,2,40,2,0,40,2,4,32,1,65,2,116,106,34,10,32,8,42,2,0,32,9,40,2,0,32,1,65,2,116,106,42,2,0,93,4,125,32,10,42,2,0,139,5,67,0,0,0,0,11,56,2,0,32,5,40,2,0,40,2,4,32,1,65,2,116,106,32,3,40,2,0,40,2,4,32,1,65,2,116,106,40,2,0,54,2,0,32,3,40,2,0,40,2,4,32,1,65,2,116,106,32,4,40,2,0,32,1,65,2,116,106,40,2,0,54,2,0,32,1,65,1,106,33,1,12,1,11,11,32,0,65,28,106,34,0,40,2,0,32,2,40,2,0,16,80,32,0,40,2,0,16,79,32,0,40,2,0,16,78,33,11,32,7,40,2,0,32,11,56,2,0,11,48,0,32,0,40,2,12,16,38,32,0,40,2,20,16,38,32,0,40,2,16,16,38,32,0,40,2,24,16,38,32,0,40,2,28,16,38,32,0,40,2,8,16,56,32,0,16,40,11,190,3,1,4,127,2,64,35,4,33,4,35,4,65,32,106,36,4,65,52,16,43,34,2,4,64,32,2,65,124,106,40,2,0,65,3,113,4,64,32,2,65,0,65,52,16,42,26,11,11,32,4,65,16,106,33,3,32,4,65,8,106,33,5,2,64,32,1,65,1,72,4,64,32,4,32,1,54,2,0,65,0,65,158,38,32,4,16,44,5,32,0,65,2,72,4,64,32,5,32,0,54,2,0,65,0,65,214,38,32,5,16,44,12,2,11,32,0,32,1,73,4,64,32,3,32,1,54,2,0,32,3,32,0,54,2,4,65,0,65,145,39,32,3,16,44,12,2,11,32,2,32,0,16,57,34,3,54,2,8,32,3,4,64,32,2,32,0,16,39,54,2,12,32,2,32,0,16,39,54,2,20,32,0,32,1,75,34,3,4,64,32,2,32,0,32,1,107,34,5,16,39,54,2,16,32,2,32,5,16,39,54,2,24,5,32,2,65,1,16,39,54,2,16,32,2,65,1,16,39,54,2,24,11,32,2,65,170,47,32,0,16,67,54,2,28,32,2,32,1,54,2,4,32,2,32,0,54,2,0,32,1,65,1,116,34,5,32,0,75,4,64,32,2,65,0,54,2,32,5,32,2,32,0,32,1,107,32,1,107,54,2,32,11,32,2,32,3,4,127,32,2,32,0,32,1,107,34,3,54,2,36,32,3,65,2,116,5,32,2,65,0,54,2,36,65,0,11,34,3,54,2,44,32,2,32,1,65,2,116,34,3,54,2,48,32,3,32,0,70,4,64,32,2,67,171,170,42,63,56,2,40,12,4,11,32,1,65,3,116,32,0,70,4,64,32,2,67,171,170,170,62,56,2,40,12,4,11,32,2,65,40,106,33,1,32,5,32,0,70,4,64,32,1,67,0,0,128,63,56,2,0,5,32,1,67,0,0,0,63,56,2,0,11,12,3,11,11,11,32,2,16,40,32,4,36,4,65,0,15,11,32,4,36,4,32,2,11,50,1,1,127,32,0,32,1,16,139,1,32,0,65,12,106,34,3,40,2,0,32,0,40,2,28,16,63,32,3,40,2,0,16,128,2,32,0,40,2,8,32,3,40,2,0,32,2,16,72,11,155,2,2,2,127,2,125,32,3,40,2,0,34,5,65,2,116,32,0,72,4,64,32,0,65,2,117,34,5,32,3,32,4,16,145,1,11,32,3,40,2,4,34,6,65,2,116,32,0,72,4,64,32,0,65,2,117,34,6,32,3,32,4,32,5,65,2,116,106,16,143,1,11,32,1,65,127,74,4,64,32,0,65,4,74,4,64,32,0,32,3,65,8,106,32,2,16,71,32,0,32,2,32,4,16,70,32,0,32,2,32,6,32,4,32,5,65,2,116,106,16,141,1,5,32,0,65,4,70,4,64,65,4,32,2,32,4,16,70,11,11,32,2,32,2,42,2,0,34,7,32,2,65,4,106,34,0,42,2,0,34,8,146,56,2,0,32,0,32,7,32,8,147,56,2,0,15,11,32,2,42,2,0,34,8,32,2,65,4,106,34,1,42,2,0,147,67,0,0,0,63,148,33,7,32,1,32,7,56,2,0,32,2,32,8,32,7,147,56,2,0,32,0,65,4,74,4,64,32,0,32,2,32,6,32,4,32,5,65,2,116,106,16,140,1,32,0,32,3,65,8,106,32,2,16,71,32,0,32,2,32,4,16,144,1,15,11,32,0,65,4,71,4,64,15,11,65,4,32,2,32,4,16,70,11,189,19,2,21,127,40,125,32,3,42,2,8,33,41,3,64,32,4,32,1,72,4,64,32,4,32,1,106,34,10,32,1,106,34,5,32,1,106,34,14,32,1,106,34,6,32,1,106,34,7,32,1,106,34,8,32,1,106,33,9,32,2,32,4,65,2,116,106,34,11,42,2,0,34,28,32,2,32,10,65,2,116,106,34,12,42,2,0,34,37,146,33,30,32,2,32,4,65,1,114,65,2,116,106,34,13,42,2,0,34,38,32,2,32,10,65,1,106,65,2,116,106,34,10,42,2,0,34,32,146,33,31,32,2,32,5,65,2,116,106,34,15,42,2,0,34,34,32,2,32,14,65,2,116,106,34,16,42,2,0,34,42,146,33,33,32,2,32,5,65,1,106,65,2,116,106,34,5,42,2,0,34,43,32,2,32,14,65,1,106,65,2,116,106,34,14,42,2,0,34,44,146,33,29,32,2,32,6,65,2,116,106,34,17,42,2,0,34,35,32,2,32,7,65,2,116,106,34,18,42,2,0,34,39,146,33,45,32,2,32,6,65,1,106,65,2,116,106,34,6,42,2,0,34,27,32,2,32,7,65,1,106,65,2,116,106,34,7,42,2,0,34,40,146,33,46,32,2,32,8,65,2,116,106,34,19,42,2,0,34,48,32,2,32,9,65,2,116,106,34,20,42,2,0,34,51,146,33,36,32,2,32,8,65,1,106,65,2,116,106,34,8,42,2,0,34,25,32,2,32,9,65,1,106,65,2,116,106,34,9,42,2,0,34,26,146,33,49,32,35,32,39,147,34,47,32,25,32,26,147,34,25,147,33,35,32,27,32,40,147,34,27,32,48,32,51,147,34,40,146,33,39,32,41,32,47,32,25,146,34,48,32,27,32,40,147,34,40,147,148,33,27,32,12,32,28,32,37,147,34,28,32,43,32,44,147,34,37,147,34,43,32,41,32,35,32,39,147,148,34,44,146,56,2,0,32,10,32,38,32,32,147,34,38,32,34,32,42,147,34,32,146,34,34,32,41,32,35,32,39,146,148,34,35,146,56,2,0,32,18,32,43,32,44,147,56,2,0,32,7,32,34,32,35,147,56,2,0,32,16,32,28,32,37,146,34,35,32,41,32,48,32,40,146,148,34,39,147,56,2,0,32,14,32,38,32,32,147,34,28,32,27,146,56,2,0,32,20,32,35,32,39,146,56,2,0,32,9,32,28,32,27,147,56,2,0,32,11,32,30,32,33,146,34,35,32,45,32,36,146,34,39,146,56,2,0,32,13,32,31,32,29,146,34,27,32,46,32,49,146,34,28,146,56,2,0,32,17,32,35,32,39,147,56,2,0,32,6,32,27,32,28,147,56,2,0,32,15,32,30,32,33,147,34,30,32,46,32,49,147,34,33,147,56,2,0,32,5,32,31,32,29,147,34,31,32,45,32,36,147,34,29,146,56,2,0,32,19,32,30,32,33,146,56,2,0,32,8,32,31,32,29,147,56,2,0,32,4,65,2,106,33,4,12,1,11,11,32,1,65,3,116,34,14,32,0,78,4,64,15,11,32,3,42,2,16,33,30,32,3,42,2,20,33,31,32,1,65,9,108,33,12,32,14,33,4,3,64,32,4,32,12,72,4,64,32,4,32,1,106,34,10,32,1,106,34,5,32,1,106,34,6,32,1,106,34,7,32,1,106,34,8,32,1,106,34,9,32,1,106,33,11,32,2,32,4,65,2,116,106,34,13,42,2,0,34,27,32,2,32,10,65,2,116,106,34,15,42,2,0,34,28,146,33,33,32,2,32,4,65,1,114,65,2,116,106,34,16,42,2,0,34,37,32,2,32,10,65,1,106,65,2,116,106,34,10,42,2,0,34,38,146,33,29,32,2,32,5,65,2,116,106,34,17,42,2,0,34,32,32,2,32,6,65,2,116,106,34,18,42,2,0,34,34,146,33,45,32,2,32,5,65,1,106,65,2,116,106,34,5,42,2,0,34,42,32,2,32,6,65,1,106,65,2,116,106,34,6,42,2,0,34,43,146,33,46,32,2,32,7,65,2,116,106,34,19,42,2,0,34,44,32,2,32,8,65,2,116,106,34,20,42,2,0,34,40,146,33,36,32,2,32,7,65,1,106,65,2,116,106,34,7,42,2,0,34,48,32,2,32,8,65,1,106,65,2,116,106,34,8,42,2,0,34,51,146,33,49,32,2,32,9,65,2,116,106,34,21,42,2,0,34,25,32,2,32,11,65,2,116,106,34,22,42,2,0,34,26,146,33,35,32,2,32,9,65,1,106,65,2,116,106,34,9,42,2,0,34,47,32,2,32,11,65,1,106,65,2,116,106,34,11,42,2,0,34,50,146,33,39,32,15,32,30,32,27,32,28,147,34,27,32,42,32,43,147,34,28,147,34,42,148,32,31,32,37,32,38,147,34,37,32,32,32,34,147,34,38,146,34,32,148,147,34,34,32,31,32,44,32,40,147,34,43,32,47,32,50,147,34,44,147,34,40,148,32,30,32,48,32,51,147,34,48,32,25,32,26,147,34,51,146,34,25,148,147,34,26,146,56,2,0,32,10,32,30,32,32,148,32,31,32,42,148,146,34,32,32,31,32,25,148,32,30,32,40,148,146,34,42,146,56,2,0,32,20,32,42,32,32,147,56,2,0,32,8,32,34,32,26,147,56,2,0,32,18,32,31,32,27,32,28,146,34,27,148,32,30,32,37,32,38,147,34,28,148,147,34,37,32,30,32,43,32,44,146,34,38,148,32,31,32,51,32,48,147,34,32,148,146,34,34,147,56,2,0,32,6,32,31,32,28,148,32,30,32,27,148,146,34,27,32,30,32,32,148,32,31,32,38,148,147,34,28,146,56,2,0,32,22,32,28,32,27,147,56,2,0,32,11,32,37,32,34,146,56,2,0,32,13,32,33,32,45,146,34,27,32,36,32,35,146,34,28,146,56,2,0,32,16,32,29,32,46,146,34,37,32,49,32,39,146,34,38,146,56,2,0,32,19,32,38,32,37,147,56,2,0,32,7,32,27,32,28,147,56,2,0,32,17,32,41,32,33,32,45,147,34,33,32,49,32,39,147,34,45,147,34,49,32,29,32,46,147,34,29,32,36,32,35,147,34,46,146,34,36,147,148,56,2,0,32,5,32,41,32,36,32,49,146,148,56,2,0,32,21,32,41,32,46,32,29,147,34,29,32,33,32,45,146,34,33,147,148,56,2,0,32,9,32,41,32,33,32,29,146,148,56,2,0,32,4,65,2,106,33,4,12,1,11,11,32,1,65,4,116,33,5,65,4,33,4,3,64,32,5,32,0,72,4,64,32,3,32,4,65,4,106,34,10,65,2,116,106,42,2,0,34,30,32,3,32,4,65,7,106,65,2,116,106,42,2,0,34,31,67,0,0,0,64,148,34,36,32,3,32,4,65,5,106,65,2,116,106,42,2,0,34,33,148,147,33,45,67,0,0,128,63,32,36,32,31,148,147,33,49,32,45,32,36,32,3,32,4,65,6,106,65,2,116,106,42,2,0,34,46,148,34,35,67,0,0,0,64,148,34,29,32,33,148,147,33,39,32,29,32,30,148,32,36,32,30,148,32,33,147,34,36,147,33,27,32,46,32,29,32,31,148,147,33,28,32,29,32,46,148,32,31,147,33,37,32,30,32,29,32,36,148,147,33,38,32,29,32,45,148,32,33,147,33,29,32,5,32,1,106,33,15,32,5,33,4,3,64,32,4,32,15,72,4,64,32,4,32,1,106,34,6,32,1,106,34,7,32,1,106,34,8,32,1,106,34,9,32,1,106,34,11,32,1,106,34,12,32,1,106,33,13,32,2,32,4,65,2,116,106,34,16,42,2,0,34,50,32,2,32,6,65,2,116,106,34,17,42,2,0,34,52,146,33,32,32,2,32,4,65,1,114,65,2,116,106,34,18,42,2,0,34,53,32,2,32,6,65,1,106,65,2,116,106,34,6,42,2,0,34,55,146,33,34,32,2,32,7,65,2,116,106,34,19,42,2,0,34,56,32,2,32,8,65,2,116,106,34,20,42,2,0,34,62,146,33,42,32,2,32,7,65,1,106,65,2,116,106,34,7,42,2,0,34,57,32,2,32,8,65,1,106,65,2,116,106,34,8,42,2,0,34,58,146,33,43,32,2,32,9,65,2,116,106,34,21,42,2,0,34,25,32,2,32,11,65,2,116,106,34,22,42,2,0,34,26,146,33,44,32,2,32,9,65,1,106,65,2,116,106,34,9,42,2,0,34,47,32,2,32,11,65,1,106,65,2,116,106,34,11,42,2,0,34,54,146,33,40,32,2,32,12,65,2,116,106,34,23,42,2,0,34,59,32,2,32,13,65,2,116,106,34,24,42,2,0,34,60,146,33,48,32,2,32,12,65,1,106,65,2,116,106,34,12,42,2,0,34,61,32,2,32,13,65,1,106,65,2,116,106,34,13,42,2,0,34,63,146,33,51,32,25,32,26,147,34,64,32,61,32,63,147,34,61,147,33,25,32,47,32,54,147,34,47,32,59,32,60,147,34,54,146,33,26,32,41,32,64,32,61,146,34,59,32,47,32,54,147,34,54,147,148,33,47,32,17,32,30,32,50,32,52,147,34,50,32,57,32,58,147,34,52,147,34,57,32,41,32,25,32,26,147,148,34,58,146,34,60,148,32,33,32,53,32,55,147,34,53,32,56,32,62,147,34,55,146,34,56,32,41,32,25,32,26,146,148,34,25,146,34,26,148,147,56,2,0,32,6,32,30,32,26,148,32,33,32,60,148,146,56,2,0,32,22,32,39,32,57,32,58,147,34,26,148,32,27,32,56,32,25,147,34,25,148,147,56,2,0,32,11,32,39,32,25,148,32,27,32,26,148,146,56,2,0,32,20,32,45,32,50,32,52,146,34,25,32,41,32,59,32,54,146,148,34,26,147,34,50,148,32,36,32,53,32,55,147,34,52,32,47,146,34,53,148,147,56,2,0,32,8,32,45,32,53,148,32,36,32,50,148,146,56,2,0,32,24,32,38,32,25,32,26,146,34,25,148,32,29,32,52,32,47,147,34,26,148,147,56,2,0,32,13,32,38,32,26,148,32,29,32,25,148,146,56,2,0,32,16,32,32,32,42,146,34,25,32,44,32,48,146,34,26,146,56,2,0,32,18,32,34,32,43,146,34,47,32,40,32,51,146,34,50,146,56,2,0,32,21,32,49,32,25,32,26,147,34,25,148,32,35,32,47,32,50,147,34,26,148,147,56,2,0,32,9,32,49,32,26,148,32,35,32,25,148,146,56,2,0,32,19,32,46,32,32,32,42,147,34,32,32,40,32,51,147,34,42,147,34,40,148,32,31,32,34,32,43,147,34,34,32,44,32,48,147,34,43,146,34,44,148,147,56,2,0,32,7,32,46,32,44,148,32,31,32,40,148,146,56,2,0,32,23,32,28,32,32,32,42,146,34,32,148,32,37,32,34,32,43,147,34,34,148,147,56,2,0,32,12,32,28,32,34,148,32,37,32,32,148,146,56,2,0,32,4,65,2,106,33,4,12,1,11,11,32,5,32,14,106,33,5,32,10,33,4,12,1,11,11,11,239,16,2,18,127,35,125,32,1,42,2,0,34,25,32,1,65,8,106,34,4,42,2,0,34,26,146,33,21,32,1,65,4,106,34,5,42,2,0,34,37,32,1,65,12,106,34,3,42,2,0,34,38,146,33,23,32,1,65,16,106,34,6,42,2,0,34,39,32,1,65,24,106,34,7,42,2,0,34,33,146,33,22,32,1,65,20,106,34,8,42,2,0,34,44,32,1,65,28,106,34,9,42,2,0,34,45,146,33,31,32,1,65,32,106,34,10,42,2,0,34,29,32,1,65,40,106,34,11,42,2,0,34,30,146,33,40,32,1,65,36,106,34,12,42,2,0,34,27,32,1,65,44,106,34,13,42,2,0,34,34,146,33,28,32,1,65,48,106,34,14,42,2,0,34,35,32,1,65,56,106,34,15,42,2,0,34,36,146,33,32,32,1,65,52,106,34,16,42,2,0,34,41,32,1,65,60,106,34,17,42,2,0,34,42,146,33,24,32,2,42,2,8,34,43,32,29,32,30,147,34,30,32,41,32,42,147,34,41,147,34,42,32,27,32,34,147,34,27,32,35,32,36,147,34,34,146,34,35,147,148,33,29,32,43,32,30,32,41,146,34,36,32,27,32,34,147,34,27,147,148,33,30,32,4,32,25,32,26,147,34,25,32,44,32,45,147,34,26,147,34,44,32,29,146,56,2,0,32,3,32,37,32,38,147,34,37,32,39,32,33,147,34,38,146,34,39,32,43,32,42,32,35,146,148,34,33,146,56,2,0,32,11,32,44,32,29,147,56,2,0,32,13,32,39,32,33,147,56,2,0,32,7,32,25,32,26,146,34,29,32,43,32,36,32,27,146,148,34,25,147,56,2,0,32,9,32,37,32,38,147,34,26,32,30,146,56,2,0,32,15,32,29,32,25,146,56,2,0,32,17,32,26,32,30,147,56,2,0,32,1,32,21,32,22,146,34,29,32,40,32,32,146,34,30,146,56,2,0,32,5,32,23,32,31,146,34,25,32,28,32,24,146,34,26,146,56,2,0,32,10,32,29,32,30,147,56,2,0,32,12,32,25,32,26,147,56,2,0,32,6,32,21,32,22,147,34,21,32,28,32,24,147,34,22,147,56,2,0,32,8,32,23,32,31,147,34,23,32,40,32,32,147,34,31,146,56,2,0,32,14,32,21,32,22,146,56,2,0,32,16,32,23,32,31,147,56,2,0,32,0,65,16,76,4,64,15,11,32,1,65,64,107,34,4,42,2,0,34,26,32,1,65,200,0,106,34,5,42,2,0,34,37,146,33,22,32,1,65,196,0,106,34,3,42,2,0,34,38,32,1,65,204,0,106,34,6,42,2,0,34,39,146,33,31,32,1,65,208,0,106,34,7,42,2,0,34,33,32,1,65,216,0,106,34,8,42,2,0,34,44,146,33,40,32,1,65,212,0,106,34,9,42,2,0,34,45,32,1,65,220,0,106,34,10,42,2,0,34,27,146,33,28,32,1,65,224,0,106,34,11,42,2,0,34,23,32,1,65,232,0,106,34,12,42,2,0,34,25,146,33,32,32,1,65,228,0,106,34,13,42,2,0,34,34,32,1,65,236,0,106,34,14,42,2,0,34,35,146,33,24,32,1,65,240,0,106,34,15,42,2,0,34,36,32,1,65,248,0,106,34,16,42,2,0,34,41,146,33,29,32,1,65,244,0,106,34,17,42,2,0,34,42,32,1,65,252,0,106,34,18,42,2,0,34,46,146,33,30,32,2,42,2,20,34,21,32,23,32,25,147,34,47,32,42,32,46,147,34,42,147,34,46,148,32,2,42,2,16,34,23,32,34,32,35,147,34,34,32,36,32,41,147,34,35,146,34,36,148,147,33,25,32,5,32,23,32,26,32,37,147,34,26,32,45,32,27,147,34,37,147,34,45,148,32,21,32,38,32,39,147,34,38,32,33,32,44,147,34,39,146,34,33,148,147,34,44,32,25,146,56,2,0,32,6,32,23,32,33,148,32,21,32,45,148,146,34,33,32,21,32,36,148,32,23,32,46,148,146,34,45,146,56,2,0,32,12,32,45,32,33,147,56,2,0,32,14,32,44,32,25,147,56,2,0,32,8,32,21,32,26,32,37,146,34,25,148,32,23,32,38,32,39,147,34,26,148,147,34,37,32,23,32,47,32,42,146,34,38,148,32,21,32,35,32,34,147,34,39,148,146,34,33,147,56,2,0,32,10,32,21,32,26,148,32,23,32,25,148,146,34,25,32,23,32,39,148,32,21,32,38,148,147,34,21,146,56,2,0,32,16,32,21,32,25,147,56,2,0,32,18,32,37,32,33,146,56,2,0,32,4,32,22,32,40,146,34,21,32,32,32,29,146,34,23,146,56,2,0,32,3,32,31,32,28,146,34,25,32,24,32,30,146,34,26,146,56,2,0,32,11,32,26,32,25,147,56,2,0,32,13,32,21,32,23,147,56,2,0,32,7,32,43,32,22,32,40,147,34,21,32,24,32,30,147,34,23,147,34,22,32,31,32,28,147,34,31,32,32,32,29,147,34,40,146,34,28,147,148,56,2,0,32,9,32,43,32,28,32,22,146,148,56,2,0,32,15,32,43,32,40,32,31,147,34,22,32,21,32,23,146,34,21,147,148,56,2,0,32,17,32,43,32,21,32,22,146,148,56,2,0,65,32,33,3,65,4,33,4,3,64,32,3,32,0,72,4,64,32,2,32,4,65,4,106,34,5,65,2,116,106,42,2,0,34,21,32,2,32,4,65,7,106,65,2,116,106,42,2,0,34,23,67,0,0,0,64,148,34,28,32,2,32,4,65,5,106,65,2,116,106,42,2,0,34,22,148,147,34,32,32,28,32,2,32,4,65,6,106,65,2,116,106,42,2,0,34,40,148,34,29,67,0,0,0,64,148,34,31,32,22,148,147,33,30,32,1,32,3,65,2,116,106,34,4,42,2,0,34,35,32,1,32,3,65,2,114,65,2,116,106,34,6,42,2,0,34,36,146,33,25,32,1,32,3,65,1,114,65,2,116,106,34,7,42,2,0,34,41,32,1,32,3,65,3,114,65,2,116,106,34,8,42,2,0,34,42,146,33,26,32,1,32,3,65,4,114,65,2,116,106,34,9,42,2,0,34,46,32,1,32,3,65,6,114,65,2,116,106,34,10,42,2,0,34,47,146,33,37,32,1,32,3,65,5,114,65,2,116,106,34,11,42,2,0,34,48,32,1,32,3,65,7,114,65,2,116,106,34,12,42,2,0,34,50,146,33,38,32,1,32,3,65,8,114,65,2,116,106,34,13,42,2,0,34,24,32,1,32,3,65,10,114,65,2,116,106,34,14,42,2,0,34,27,146,33,39,32,1,32,3,65,9,114,65,2,116,106,34,15,42,2,0,34,34,32,1,32,3,65,11,114,65,2,116,106,34,16,42,2,0,34,49,146,33,33,32,1,32,3,65,12,114,65,2,116,106,34,17,42,2,0,34,51,32,1,32,3,65,14,114,65,2,116,106,34,18,42,2,0,34,52,146,33,44,32,1,32,3,65,13,114,65,2,116,106,34,19,42,2,0,34,53,32,1,32,3,65,15,114,65,2,116,106,34,20,42,2,0,34,54,146,33,45,32,24,32,27,147,34,55,32,53,32,54,147,34,53,147,33,24,32,34,32,49,147,34,34,32,51,32,52,147,34,49,146,33,27,32,43,32,55,32,53,146,34,51,32,34,32,49,147,34,49,147,148,33,34,32,6,32,21,32,35,32,36,147,34,35,32,48,32,50,147,34,36,147,34,48,32,43,32,24,32,27,147,148,34,50,146,34,52,148,32,22,32,41,32,42,147,34,41,32,46,32,47,147,34,42,146,34,46,32,43,32,24,32,27,146,148,34,27,146,34,24,148,147,56,2,0,32,8,32,21,32,24,148,32,22,32,52,148,146,56,2,0,32,14,32,30,32,48,32,50,147,34,47,148,32,31,32,21,148,32,28,32,21,148,32,22,147,34,24,147,34,48,32,46,32,27,147,34,27,148,147,56,2,0,32,16,32,30,32,27,148,32,48,32,47,148,146,56,2,0,32,10,32,32,32,35,32,36,146,34,30,32,43,32,51,32,49,146,148,34,27,147,34,35,148,32,24,32,41,32,42,147,34,36,32,34,146,34,41,148,147,56,2,0,32,12,32,32,32,41,148,32,24,32,35,148,146,56,2,0,32,18,32,21,32,31,32,24,148,147,34,21,32,30,32,27,146,34,24,148,32,31,32,32,148,32,22,147,34,22,32,36,32,34,147,34,32,148,147,56,2,0,32,20,32,21,32,32,148,32,22,32,24,148,146,56,2,0,32,4,32,25,32,37,146,34,21,32,39,32,44,146,34,22,146,56,2,0,32,7,32,26,32,38,146,34,32,32,33,32,45,146,34,24,146,56,2,0,32,13,67,0,0,128,63,32,28,32,23,148,147,34,28,32,21,32,22,147,34,21,148,32,29,32,32,32,24,147,34,22,148,147,56,2,0,32,15,32,28,32,22,148,32,29,32,21,148,146,56,2,0,32,9,32,40,32,25,32,37,147,34,21,32,33,32,45,147,34,22,147,34,28,148,32,23,32,26,32,38,147,34,32,32,39,32,44,147,34,24,146,34,29,148,147,56,2,0,32,11,32,40,32,29,148,32,23,32,28,148,146,56,2,0,32,17,32,40,32,31,32,23,148,147,34,28,32,21,32,22,146,34,21,148,32,31,32,40,148,32,23,147,34,23,32,32,32,24,147,34,22,148,147,56,2,0,32,19,32,28,32,22,148,32,23,32,21,148,146,56,2,0,32,3,65,16,106,33,3,32,5,33,4,12,1,11,11,11,154,2,3,4,127,1,125,1,124,68,0,0,0,0,0,0,0,64,32,0,40,2,0,184,163,33,8,32,0,65,12,106,34,3,40,2,0,32,1,65,4,106,34,4,40,2,0,40,2,0,54,2,0,32,3,40,2,0,32,4,40,2,0,32,0,40,2,0,65,1,118,65,2,116,106,40,2,0,54,2,4,32,0,65,4,106,33,5,65,1,33,1,3,64,32,1,32,5,40,2,0,65,127,106,73,4,64,32,3,40,2,0,32,1,65,1,116,34,6,65,2,116,106,32,4,40,2,0,32,1,65,2,116,106,40,2,0,54,2,0,32,3,40,2,0,32,6,65,1,114,65,2,116,106,32,4,40,2,0,32,0,40,2,0,32,1,107,65,2,116,106,42,2,0,140,56,2,0,32,1,65,1,106,33,1,12,1,11,11,32,8,182,33,7,32,0,40,2,0,65,127,32,3,40,2,0,32,0,40,2,20,32,0,40,2,16,16,88,32,2,65,4,106,33,2,65,0,33,1,3,64,32,1,32,0,40,2,0,73,4,64,32,2,40,2,0,32,1,65,2,116,106,32,3,40,2,0,32,1,65,2,116,106,42,2,0,32,7,148,56,2,0,32,1,65,1,106,33,1,12,1,11,11,11,28,0,67,0,0,128,63,32,0,40,2,0,40,2,4,32,0,40,2,8,65,2,116,106,42,2,0,147,11,8,0,65,7,16,3,65,0,11,8,0,65,6,16,3,65,0,11,8,0,65,5,16,3,65,0,11,11,0,65,3,16,3,67,0,0,0,0,11,246,2,2,2,127,2,125,32,0,188,34,1,65,31,118,33,2,32,1,65,255,255,255,255,7,113,34,1,65,255,255,255,227,4,75,4,64,32,1,65,128,128,128,252,7,75,33,1,32,2,4,125,67,218,15,201,191,5,67,218,15,201,63,11,33,3,32,1,4,125,32,0,5,32,3,11,15,11,32,1,65,128,128,128,247,3,73,4,64,32,1,65,128,128,128,204,3,73,4,127,32,0,15,5,65,127,11,33,1,5,32,0,139,33,0,32,1,65,128,128,224,252,3,73,4,125,32,1,65,128,128,192,249,3,73,4,125,65,0,33,1,32,0,67,0,0,0,64,148,67,0,0,128,191,146,32,0,67,0,0,0,64,146,149,5,65,1,33,1,32,0,67,0,0,128,191,146,32,0,67,0,0,128,63,146,149,11,5,32,1,65,128,128,240,128,4,73,4,125,65,2,33,1,32,0,67,0,0,192,191,146,32,0,67,0,0,192,63,148,67,0,0,128,63,146,149,5,65,3,33,1,67,0,0,128,191,32,0,149,11,11,33,0,11,32,0,32,0,148,34,4,32,4,148,33,3,32,4,32,3,32,3,67,37,172,124,61,148,67,13,245,17,62,146,148,67,169,170,170,62,146,148,33,4,32,3,67,152,202,76,190,32,3,67,71,18,218,61,148,147,148,33,3,32,1,65,0,72,4,125,32,0,32,0,32,3,32,4,146,148,147,5,32,1,65,2,116,65,160,29,106,42,2,0,32,0,32,3,32,4,146,148,32,1,65,2,116,65,176,29,106,42,2,0,147,32,0,147,147,34,0,140,33,3,32,2,4,125,32,3,5,32,0,11,11,11,11,0,32,0,32,1,16,200,1,32,0,11,152,1,2,1,127,2,126,2,64,2,64,2,64,32,0,189,34,3,66,52,136,34,4,167,65,255,15,113,34,2,4,64,32,2,65,255,15,70,4,64,12,4,5,12,3,11,0,11,32,1,32,0,68,0,0,0,0,0,0,0,0,98,4,127,32,0,68,0,0,0,0,0,0,240,67,162,32,1,16,99,33,0,32,1,40,2,0,65,64,106,5,65,0,11,34,2,54,2,0,12,2,0,11,0,0,11,32,1,32,4,167,65,255,15,113,65,130,120,106,54,2,0,32,3,66,255,255,255,255,255,255,255,135,128,127,131,66,128,128,128,128,128,128,128,240,63,132,191,33,0,11,32,0,11,17,0,32,0,4,127,32,0,32,1,16,209,1,5,65,0,11,11,218,3,3,1,127,1,126,1,124,2,64,32,1,65,20,77,4,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,1,65,9,107,14,10,0,1,2,3,4,5,6,7,8,9,10,11,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,3,32,2,32,1,65,4,106,54,2,0,32,0,32,3,54,2,0,12,11,11,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,3,32,2,32,1,65,4,106,54,2,0,32,0,32,3,172,55,3,0,12,10,11,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,3,32,2,32,1,65,4,106,54,2,0,32,0,32,3,173,55,3,0,12,9,11,32,2,40,2,0,65,7,106,65,120,113,34,1,41,3,0,33,4,32,2,32,1,65,8,106,54,2,0,32,0,32,4,55,3,0,12,8,11,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,3,32,2,32,1,65,4,106,54,2,0,32,0,32,3,65,255,255,3,113,65,16,116,65,16,117,172,55,3,0,12,7,11,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,3,32,2,32,1,65,4,106,54,2,0,32,0,32,3,65,255,255,3,113,173,55,3,0,12,6,11,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,3,32,2,32,1,65,4,106,54,2,0,32,0,32,3,65,255,1,113,65,24,116,65,24,117,172,55,3,0,12,5,11,32,2,40,2,0,65,3,106,65,124,113,34,1,40,2,0,33,3,32,2,32,1,65,4,106,54,2,0,32,0,32,3,65,255,1,113,173,55,3,0,12,4,11,32,2,40,2,0,65,7,106,65,120,113,34,1,43,3,0,33,5,32,2,32,1,65,8,106,54,2,0,32,0,32,5,57,3,0,12,3,11,32,2,40,2,0,65,7,106,65,120,113,34,1,43,3,0,33,5,32,2,32,1,65,8,106,54,2,0,32,0,32,5,57,3,0,11,11,11,11,92,1,4,127,32,0,40,2,0,34,2,44,0,0,34,1,65,80,106,65,10,73,4,64,3,64,32,3,65,10,108,65,80,106,32,1,65,24,116,65,24,117,106,33,1,32,0,32,2,65,1,106,34,2,54,2,0,32,2,44,0,0,34,4,65,80,106,65,10,73,4,64,32,1,33,3,32,4,33,1,12,1,11,11,5,65,0,33,1,11,32,1,11,227,2,1,10,127,35,4,33,3,35,4,65,224,1,106,36,4,32,3,65,160,1,106,34,4,66,0,55,3,0,32,4,66,0,55,3,8,32,4,66,0,55,3,16,32,4,66,0,55,3,24,32,4,66,0,55,3,32,32,3,65,208,1,106,34,5,32,2,40,2,0,54,2,0,65,0,32,1,32,5,32,3,65,208,0,106,34,2,32,4,16,74,65,0,72,4,64,65,127,33,1,5,32,0,40,2,76,26,32,0,40,2,0,33,6,32,0,44,0,74,65,1,72,4,64,32,0,32,6,65,95,113,54,2,0,11,32,0,65,48,106,34,7,40,2,0,4,64,32,0,32,1,32,5,32,2,32,4,16,74,33,1,5,32,0,65,44,106,34,8,40,2,0,33,9,32,8,32,3,54,2,0,32,0,65,28,106,34,11,32,3,54,2,0,32,0,65,20,106,34,10,32,3,54,2,0,32,7,65,208,0,54,2,0,32,0,65,16,106,34,12,32,3,65,208,0,106,54,2,0,32,0,32,1,32,5,32,2,32,4,16,74,33,1,32,9,4,64,32,0,65,0,65,0,32,0,40,2,36,65,7,113,65,32,106,17,5,0,26,32,10,40,2,0,69,4,64,65,127,33,1,11,32,8,32,9,54,2,0,32,7,65,0,54,2,0,32,12,65,0,54,2,0,32,11,65,0,54,2,0,32,10,65,0,54,2,0,11,11,32,0,32,0,40,2,0,34,0,32,6,65,32,113,114,54,2,0,32,0,65,32,113,4,64,65,127,33,1,11,11,32,3,36,4,32,1,11,208,2,1,3,127,35,4,33,5,35,4,65,128,1,106,36,4,32,5,34,4,65,236,31,41,2,0,55,2,0,32,4,65,244,31,41,2,0,55,2,8,32,4,65,252,31,41,2,0,55,2,16,32,4,65,132,32,41,2,0,55,2,24,32,4,65,140,32,41,2,0,55,2,32,32,4,65,148,32,41,2,0,55,2,40,32,4,65,156,32,41,2,0,55,2,48,32,4,65,164,32,41,2,0,55,2,56,32,4,65,64,107,65,172,32,41,2,0,55,2,0,32,4,65,180,32,41,2,0,55,2,72,32,4,65,188,32,41,2,0,55,2,80,32,4,65,196,32,41,2,0,55,2,88,32,4,65,204,32,41,2,0,55,2,96,32,4,65,212,32,41,2,0,55,2,104,32,4,65,220,32,41,2,0,55,2,112,32,4,65,228,32,40,2,0,54,2,120,32,1,65,127,106,65,254,255,255,255,7,75,4,64,65,160,200,0,65,203,0,54,2,0,5,32,4,65,126,32,0,107,34,5,32,1,73,4,127,32,5,5,32,1,34,5,11,54,2,48,32,4,65,20,106,34,6,32,0,54,2,0,32,4,32,0,54,2,44,32,4,65,16,106,34,1,32,0,32,5,106,34,0,54,2,0,32,4,32,0,54,2,28,32,4,32,2,32,3,16,103,26,32,5,4,64,32,6,40,2,0,34,0,32,0,32,1,40,2,0,70,65,31,116,65,31,117,106,65,0,58,0,0,11,11,32,4,36,4,11,178,3,1,11,127,35,4,33,8,35,4,65,48,106,36,4,32,8,65,32,106,33,6,32,8,34,3,32,0,65,28,106,34,9,40,2,0,34,5,54,2,0,32,3,32,0,65,20,106,34,10,40,2,0,32,5,107,34,5,54,2,4,32,3,32,1,54,2,8,32,3,32,2,54,2,12,32,3,65,16,106,34,1,32,0,65,60,106,34,12,40,2,0,54,2,0,32,1,32,3,54,2,4,32,1,65,2,54,2,8,2,64,2,64,32,5,32,2,106,34,5,65,146,1,32,1,16,9,34,4,65,128,96,75,4,127,65,160,200,0,65,0,32,4,107,54,2,0,65,127,34,4,5,32,4,11,70,13,0,65,2,33,7,32,3,33,1,32,4,33,3,3,64,32,3,65,0,78,4,64,32,5,32,3,107,33,5,32,1,65,8,106,33,4,32,3,32,1,40,2,4,34,13,75,34,11,4,64,32,4,33,1,11,32,7,32,11,65,31,116,65,31,117,106,33,7,32,1,32,1,40,2,0,32,3,32,11,4,127,32,13,5,65,0,11,107,34,3,106,54,2,0,32,1,65,4,106,34,4,32,4,40,2,0,32,3,107,54,2,0,32,6,32,12,40,2,0,54,2,0,32,6,32,1,54,2,4,32,6,32,7,54,2,8,32,5,65,146,1,32,6,16,9,34,3,65,128,96,75,4,127,65,160,200,0,65,0,32,3,107,54,2,0,65,127,34,3,5,32,3,11,70,13,2,12,1,11,11,32,0,65,0,54,2,16,32,9,65,0,54,2,0,32,10,65,0,54,2,0,32,0,32,0,40,2,0,65,32,114,54,2,0,32,7,65,2,70,4,127,65,0,5,32,2,32,1,40,2,4,107,11,33,2,12,1,11,32,0,32,0,40,2,44,34,1,32,0,40,2,48,106,54,2,16,32,9,32,1,54,2,0,32,10,32,1,54,2,0,11,32,8,36,4,32,2,11,97,2,2,127,1,125,35,4,33,3,35,4,65,16,106,36,4,32,0,40,2,0,33,4,32,1,32,0,40,2,4,34,1,65,1,117,106,33,0,32,1,65,1,113,4,64,32,0,40,2,0,32,4,106,40,2,0,33,4,11,32,3,32,2,54,2,0,32,0,32,3,32,4,65,3,113,65,12,106,17,6,0,33,5,32,3,40,2,0,16,24,32,3,36,4,32,5,11,20,0,32,0,16,254,1,187,16,36,182,67,0,0,32,65,148,32,1,93,11,76,1,1,125,32,0,40,2,4,34,0,32,1,65,2,116,106,42,2,0,34,2,32,0,32,1,65,127,106,65,2,116,106,42,2,0,94,69,4,64,65,0,15,11,32,2,32,0,32,1,65,1,106,65,2,116,106,42,2,0,94,69,4,64,65,0,15,11,32,2,67,0,0,0,0,94,11,75,2,2,127,2,125,32,0,40,2,0,33,1,32,0,40,2,4,34,2,42,2,0,33,3,65,1,33,0,3,64,32,0,32,1,73,4,64,32,3,32,2,32,0,65,2,116,106,42,2,0,34,4,93,69,4,64,32,4,33,3,11,32,0,65,1,106,33,0,12,1,11,11,32,3,11,57,1,2,127,32,0,65,4,106,33,2,3,64,32,1,32,0,40,2,0,73,4,64,32,2,40,2,0,32,1,65,3,116,106,68,0,0,0,0,0,0,0,0,57,3,0,32,1,65,1,106,33,1,12,1,11,11,11,152,1,1,3,127,32,0,40,2,0,32,2,40,2,0,34,3,32,1,40,2,0,34,4,73,34,5,4,127,32,3,5,32,4,11,73,33,4,32,5,4,127,32,2,5,32,1,11,33,3,32,4,4,127,32,0,5,32,3,11,40,2,0,33,3,32,0,65,4,106,33,4,32,1,65,4,106,33,1,32,2,65,4,106,33,2,65,0,33,0,3,64,32,0,32,3,71,4,64,32,2,40,2,0,32,0,65,2,116,106,32,4,40,2,0,32,0,65,2,116,106,42,2,0,32,1,40,2,0,32,0,65,2,116,106,42,2,0,148,56,2,0,32,0,65,1,106,33,0,12,1,11,11,11,112,1,6,127,32,0,65,4,106,33,2,3,64,32,0,40,2,0,34,3,179,67,0,0,0,63,148,142,32,1,179,94,4,64,32,2,40,2,0,34,4,32,1,65,2,116,106,34,5,40,2,0,33,6,32,5,32,4,32,3,65,127,106,32,1,107,65,2,116,106,40,2,0,54,2,0,32,2,40,2,0,32,0,40,2,0,65,127,106,32,1,107,65,2,116,106,32,6,54,2,0,32,1,65,1,106,33,1,12,1,11,11,11,72,1,1,125,32,0,32,1,56,2,0,32,0,32,2,56,2,4,32,0,32,3,56,2,8,32,0,32,4,56,2,12,32,2,32,1,147,34,5,67,0,0,0,0,91,4,64,32,0,67,0,0,0,0,56,2,16,5,32,0,32,4,32,3,147,32,5,149,56,2,16,11,11,185,1,2,5,127,1,125,65,16,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,65,16,16,42,26,11,11,32,0,65,4,106,34,3,65,10,54,2,0,32,0,65,10,16,39,54,2,0,32,0,65,8,106,34,2,65,10,16,39,54,2,0,32,0,67,0,0,0,0,67,219,15,73,64,67,0,0,32,65,16,135,2,54,2,12,32,2,40,2,0,40,2,4,67,124,217,32,62,56,2,0,65,1,33,1,67,124,217,160,62,33,5,3,64,32,1,32,3,40,2,0,73,4,64,32,2,40,2,0,40,2,4,34,4,32,1,65,2,116,106,32,4,42,2,0,32,5,146,56,2,0,32,1,65,1,106,33,1,32,5,67,124,217,160,62,146,33,5,12,1,11,11,32,0,11,153,1,1,3,127,65,24,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,24,16,42,26,11,11,32,0,65,1,72,4,127,32,1,16,40,65,0,5,32,1,32,0,16,68,54,2,20,32,1,32,0,16,68,54,2,16,32,1,65,8,106,34,2,32,0,16,68,54,2,0,32,1,65,12,106,34,3,32,0,16,68,54,2,0,32,1,65,0,54,2,4,32,1,32,0,54,2,0,32,2,40,2,0,40,2,4,68,0,0,0,0,0,0,240,63,57,3,0,32,3,40,2,0,40,2,4,68,0,0,0,0,0,0,240,63,57,3,0,32,1,11,11,16,0,32,0,40,2,20,16,110,32,0,40,2,16,16,110,11,138,6,3,13,127,5,125,1,124,32,0,40,2,44,33,8,32,0,65,8,106,34,10,40,2,0,40,2,0,33,3,32,0,65,12,106,34,4,40,2,0,40,2,0,33,9,32,1,32,0,65,24,106,34,7,40,2,0,16,62,32,7,40,2,0,32,4,40,2,0,16,63,32,7,40,2,0,16,112,32,1,40,2,0,32,1,40,2,4,32,0,65,28,106,34,11,40,2,0,40,2,4,16,246,1,32,0,40,2,40,34,1,69,4,64,65,4,33,1,11,32,0,65,32,106,34,6,40,2,0,16,53,32,3,65,127,106,33,12,65,1,33,4,3,64,32,4,32,12,73,4,64,65,1,33,3,3,64,32,3,32,1,77,4,64,32,3,65,1,116,33,13,32,4,32,3,108,33,14,32,3,184,68,0,0,0,0,0,0,0,64,162,68,0,0,0,0,0,0,240,191,160,33,21,65,1,33,5,3,64,32,5,32,13,73,4,64,32,6,40,2,0,40,2,4,32,4,65,2,116,106,34,15,32,11,40,2,0,40,2,4,32,14,32,5,106,65,127,106,65,2,116,106,42,2,0,187,32,21,163,32,15,42,2,0,187,160,182,56,2,0,32,5,65,1,106,33,5,12,1,11,11,32,3,65,1,106,33,3,12,1,11,11,32,4,65,1,106,33,4,12,1,11,11,32,6,40,2,0,32,10,40,2,0,16,63,2,64,2,64,32,6,40,2,0,34,1,16,76,34,3,69,13,0,32,3,32,1,40,2,0,65,127,106,79,13,0,32,0,32,1,32,3,16,47,56,2,76,12,1,11,32,0,32,0,40,2,48,179,56,2,76,11,32,0,16,148,2,32,0,42,2,72,34,17,67,0,0,0,0,91,4,64,32,2,16,53,15,11,32,9,179,32,17,149,142,169,33,5,32,0,65,36,106,34,4,40,2,0,16,53,65,0,33,1,3,64,32,17,32,1,179,94,4,64,65,0,33,3,3,64,32,3,32,5,71,4,64,32,4,40,2,0,40,2,4,32,1,65,2,116,106,34,6,32,6,42,2,0,32,7,40,2,0,40,2,4,32,1,32,17,32,3,179,148,67,0,0,0,63,146,142,169,106,65,2,116,106,42,2,0,146,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,1,65,1,106,33,1,12,1,11,11,32,4,40,2,0,32,0,40,2,20,16,63,32,4,40,2,0,34,1,16,76,34,3,32,9,65,127,106,73,4,64,32,1,32,3,16,47,33,16,32,0,65,52,106,33,1,32,8,179,33,19,5,32,8,179,34,19,32,0,65,52,106,34,1,42,2,0,147,33,16,11,32,2,16,53,32,17,32,16,67,0,0,128,63,146,34,18,147,34,20,32,17,146,33,16,32,17,187,68,154,153,153,153,153,153,217,191,162,32,19,32,1,42,2,0,147,32,18,147,187,100,69,4,64,32,20,33,16,11,3,64,32,16,32,17,146,34,18,67,0,0,0,0,93,4,64,32,18,33,16,12,1,11,11,32,2,65,4,106,33,2,32,16,67,0,0,0,0,96,4,127,32,2,40,2,0,32,16,56,2,4,65,2,5,65,1,11,33,0,3,64,32,16,32,17,146,34,18,32,19,95,4,64,32,2,40,2,0,32,0,65,2,116,106,32,18,56,2,0,32,18,33,16,32,0,65,1,106,33,0,12,1,11,11,32,1,32,16,56,2,0,32,2,40,2,0,32,0,179,56,2,0,11,62,0,32,0,40,2,8,16,38,32,0,40,2,16,16,38,32,0,40,2,12,16,38,32,0,40,2,24,16,38,32,0,40,2,28,16,38,32,0,40,2,32,16,38,32,0,40,2,20,16,38,32,0,40,2,36,16,38,32,0,16,40,11,182,3,3,4,127,4,125,1,124,65,216,0,16,43,34,3,4,64,32,3,65,124,106,40,2,0,65,3,113,4,64,32,3,65,0,65,216,0,16,42,26,11,11,67,24,114,49,63,32,2,184,68,0,0,0,0,0,0,78,64,162,68,0,0,0,0,0,0,94,64,163,32,1,184,163,182,34,7,149,34,8,32,0,65,2,106,179,148,187,16,1,182,33,9,32,3,32,1,54,2,0,32,3,32,2,54,2,4,32,3,67,0,0,0,0,56,2,52,32,3,65,0,54,2,56,32,3,65,0,54,2,60,32,3,65,64,107,67,252,169,121,64,56,2,0,32,3,67,0,0,128,63,56,2,76,32,3,67,0,0,0,0,56,2,68,32,3,32,7,169,54,2,48,32,3,32,0,65,2,118,34,4,54,2,44,32,3,65,8,106,34,5,32,4,16,39,54,2,0,32,3,32,4,16,39,54,2,16,32,3,65,12,106,34,6,32,0,16,39,54,2,0,32,3,32,0,16,39,54,2,24,32,3,32,0,16,39,54,2,28,32,3,32,4,16,39,54,2,32,32,3,32,4,65,1,116,16,39,54,2,20,32,3,32,0,16,39,54,2,36,32,3,65,0,54,2,40,65,0,33,1,3,64,32,1,32,0,71,4,64,32,8,32,1,65,1,106,34,2,179,148,187,16,1,182,32,9,149,33,10,32,6,40,2,0,40,2,4,32,1,65,2,116,106,32,10,56,2,0,32,2,33,1,12,1,11,11,32,7,32,7,148,34,8,187,68,0,0,0,0,0,0,0,64,162,33,11,65,0,33,0,3,64,32,0,32,4,71,4,64,32,0,184,68,0,0,0,0,0,0,240,63,160,182,34,7,32,8,149,32,7,32,7,148,140,187,32,11,163,182,187,16,1,182,148,33,7,32,5,40,2,0,40,2,4,32,0,65,2,116,106,32,7,56,2,0,32,0,65,1,106,33,0,12,1,11,11,32,3,11,175,1,2,1,127,2,125,32,1,40,2,0,33,3,32,1,65,4,106,33,1,65,0,33,0,3,64,32,0,32,3,71,4,64,32,4,32,1,40,2,0,32,0,65,2,116,106,42,2,0,34,4,32,4,148,146,33,4,32,0,65,1,106,33,0,12,1,11,11,32,4,67,0,0,0,0,91,4,64,32,2,40,2,4,67,0,0,0,0,56,2,0,15,11,32,4,187,68,102,102,102,102,102,102,238,63,162,182,33,5,67,0,0,0,0,33,4,65,0,33,0,3,64,32,4,32,5,93,4,64,32,4,32,1,40,2,0,32,0,65,2,116,106,42,2,0,34,4,32,4,148,146,33,4,32,0,65,1,106,33,0,12,1,11,11,32,2,40,2,4,32,0,179,56,2,0,11,147,1,2,2,127,2,125,32,1,16,55,33,5,32,2,65,4,106,34,2,40,2,0,67,0,0,0,0,56,2,0,32,5,67,0,0,0,0,91,4,64,15,11,32,1,65,4,106,34,4,40,2,0,42,2,0,33,6,65,1,33,0,3,64,32,0,32,1,40,2,0,73,4,64,32,2,40,2,0,34,3,32,3,42,2,0,32,4,40,2,0,34,3,32,0,65,2,116,106,42,2,0,32,3,42,2,0,147,32,0,179,149,146,56,2,0,32,0,65,1,106,33,0,12,1,11,11,32,2,40,2,0,34,0,32,0,42,2,0,32,5,32,6,147,149,56,2,0,11,174,2,3,2,127,2,125,1,124,32,1,40,2,0,33,3,65,0,33,0,3,64,32,0,32,3,71,4,64,32,5,32,0,32,0,108,179,146,33,5,32,0,65,1,106,33,0,12,1,11,11,32,1,16,55,33,6,32,2,65,4,106,34,0,40,2,0,67,0,0,0,0,56,2,0,32,6,67,0,0,0,0,91,4,64,15,11,32,5,32,3,179,148,187,32,3,184,34,7,68,0,0,0,0,0,0,240,191,160,32,7,162,68,0,0,0,0,0,0,224,63,162,34,7,32,7,162,161,182,33,5,32,1,65,4,106,33,3,65,0,33,2,3,64,32,2,32,1,40,2,0,34,4,73,4,64,32,0,40,2,0,34,4,32,4,42,2,0,32,3,40,2,0,32,2,65,2,116,106,42,2,0,32,2,179,148,146,56,2,0,32,2,65,1,106,33,2,12,1,11,11,32,0,40,2,0,34,2,32,2,42,2,0,32,4,179,148,56,2,0,32,0,40,2,0,34,2,32,2,42,2,0,187,32,6,32,1,40,2,0,34,1,179,148,32,1,65,127,106,179,148,187,68,0,0,0,0,0,0,224,63,162,161,182,56,2,0,32,0,40,2,0,34,1,32,1,42,2,0,32,5,149,56,2,0,32,0,40,2,0,34,0,32,0,42,2,0,32,6,149,56,2,0,11,79,1,2,125,32,1,65,2,16,60,34,3,67,0,0,0,0,91,4,64,32,2,40,2,4,67,0,0,0,0,56,2,0,5,32,1,65,4,16,60,33,4,32,2,65,4,106,34,0,40,2,0,32,4,56,2,0,32,0,40,2,0,34,0,32,0,42,2,0,32,3,32,3,148,149,56,2,0,11,11,94,1,2,125,32,1,65,2,16,60,34,3,67,0,0,0,0,91,4,64,32,2,40,2,4,67,0,0,0,0,56,2,0,5,32,1,65,3,16,60,33,4,32,2,65,4,106,34,0,40,2,0,32,4,56,2,0,32,3,145,187,68,0,0,0,0,0,0,8,64,16,0,182,33,3,32,0,40,2,0,34,0,32,0,42,2,0,32,3,149,56,2,0,11,11,22,1,1,125,32,1,65,2,16,60,33,3,32,2,40,2,4,32,3,56,2,0,11,20,1,1,125,32,1,16,83,33,3,32,2,40,2,4,32,3,56,2,0,11,48,0,32,0,40,2,20,16,81,32,0,40,2,24,16,38,32,0,40,2,28,16,38,32,0,40,2,32,16,38,32,0,40,2,36,16,38,32,0,40,2,40,16,38,32,0,16,40,11,164,1,1,1,127,2,64,2,64,2,64,2,64,2,64,2,64,32,0,40,2,0,65,1,107,14,8,3,4,1,2,2,0,0,0,4,11,32,0,40,2,12,16,38,32,0,16,40,15,11,32,0,40,2,12,16,38,32,0,40,2,16,16,38,32,0,40,2,20,16,38,32,0,40,2,24,16,38,32,0,16,40,15,11,32,0,40,2,16,16,38,32,0,40,2,20,16,38,32,0,40,2,24,16,38,12,2,11,32,0,40,2,12,16,38,32,0,40,2,16,16,38,12,1,11,32,0,16,40,15,11,32,0,40,2,28,34,1,40,2,0,16,38,32,1,40,2,8,16,38,32,1,40,2,12,16,40,32,1,16,40,32,0,16,40,11,137,6,1,2,127,35,4,33,3,35,4,65,16,106,36,4,65,32,16,43,34,2,4,64,32,2,65,124,106,40,2,0,65,3,113,4,64,32,2,65,0,65,32,16,42,26,11,11,32,1,65,1,118,65,1,106,33,1,2,64,2,64,32,0,65,208,39,16,41,69,13,0,2,64,32,0,65,215,39,16,41,4,64,2,64,32,0,65,224,39,16,41,4,64,2,64,2,64,32,0,65,228,39,16,41,69,13,0,32,0,65,242,39,16,41,69,13,0,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,0,65,250,39,16,41,4,127,32,0,65,128,40,16,41,4,127,32,0,65,135,40,16,41,4,127,32,0,65,139,40,16,41,4,127,32,0,65,241,42,16,41,4,127,32,0,65,142,40,16,41,69,13,6,32,0,65,151,40,16,41,69,13,7,32,0,65,158,40,16,41,69,13,8,32,0,65,167,40,16,41,69,13,9,32,0,65,176,40,16,41,69,13,10,32,0,65,182,40,16,41,69,13,11,32,0,65,191,40,16,41,69,13,12,32,0,65,199,40,16,41,69,13,16,32,0,65,227,48,16,41,69,13,16,32,3,32,0,54,2,0,65,0,65,211,40,32,3,16,44,32,2,16,40,32,3,36,4,65,0,15,5,65,8,11,5,65,6,11,5,65,7,11,33,0,32,2,32,1,16,39,54,2,12,12,2,5,65,5,11,5,65,4,11,33,0,32,2,32,1,16,39,54,2,16,32,2,32,1,16,39,54,2,20,32,2,32,1,16,39,54,2,24,32,2,16,114,54,2,28,32,2,67,205,204,204,61,56,2,8,11,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,0,14,16,0,1,2,3,11,12,13,14,15,4,5,6,7,8,9,10,16,11,12,29,11,12,27,11,12,24,11,12,21,11,12,12,11,12,12,11,12,12,11,12,12,11,12,12,11,12,12,11,12,12,11,32,2,65,11,54,2,4,65,4,33,0,12,19,11,32,2,65,12,54,2,4,65,5,33,0,12,18,11,32,2,65,14,54,2,4,65,6,33,0,12,17,11,32,2,65,15,54,2,4,65,7,33,0,12,16,11,32,2,65,16,54,2,4,65,8,33,0,12,15,11,12,14,11,32,2,65,17,54,2,4,65,9,33,0,12,13,11,32,2,65,18,54,2,4,65,10,33,0,12,12,11,32,2,65,19,54,2,4,65,11,33,0,12,11,11,32,2,65,20,54,2,4,65,12,33,0,12,10,11,32,2,65,21,54,2,4,65,13,33,0,12,9,11,32,2,65,22,54,2,4,65,14,33,0,12,8,11,32,2,65,23,54,2,4,65,15,33,0,12,7,11,32,2,32,1,16,39,54,2,12,32,2,32,1,16,39,54,2,16,32,2,32,1,16,39,54,2,20,32,2,32,1,16,39,54,2,24,11,32,2,65,10,54,2,4,65,3,33,0,12,5,11,11,32,2,65,9,54,2,4,65,2,33,0,12,3,5,32,2,32,1,16,39,54,2,12,32,2,32,1,16,39,54,2,16,32,2,16,114,54,2,28,32,2,67,205,204,204,61,56,2,8,11,11,32,2,65,13,54,2,4,65,1,33,0,12,1,11,32,2,65,8,54,2,4,65,0,33,0,11,32,2,32,0,54,2,0,32,3,36,4,32,2,11,164,1,2,4,127,2,125,32,2,65,4,106,34,6,40,2,0,67,0,0,0,0,56,2,0,32,1,65,4,106,33,4,32,0,65,12,106,33,5,3,64,32,3,32,1,40,2,0,73,4,64,32,4,40,2,0,32,3,65,2,116,106,34,2,42,2,0,34,7,32,5,40,2,0,40,2,4,32,3,65,2,116,106,34,0,42,2,0,34,8,94,4,64,32,6,40,2,0,34,0,32,0,42,2,0,32,7,32,8,147,146,56,2,0,32,5,40,2,0,40,2,4,32,3,65,2,116,106,33,0,32,4,40,2,0,32,3,65,2,116,106,33,2,11,32,0,32,2,40,2,0,54,2,0,32,3,65,1,106,33,3,12,1,11,11,11,214,1,2,3,127,1,125,32,2,65,4,106,34,2,40,2,0,67,0,0,0,0,56,2,0,32,1,65,4,106,33,3,32,0,65,12,106,33,4,65,0,33,0,3,64,32,0,32,1,40,2,0,73,4,64,32,3,40,2,0,32,0,65,2,116,106,42,2,0,187,32,4,40,2,0,40,2,4,32,0,65,2,116,106,42,2,0,187,68,154,153,153,153,153,153,185,63,160,163,68,0,0,0,0,0,0,240,63,160,182,187,16,2,182,33,6,32,2,40,2,0,34,5,32,5,42,2,0,32,6,146,56,2,0,32,4,40,2,0,40,2,4,32,0,65,2,116,106,32,3,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,32,2,40,2,0,34,0,42,2,0,188,65,255,255,255,255,7,113,65,128,128,128,252,7,77,4,64,15,11,32,0,67,0,0,0,0,56,2,0,11,219,1,2,3,127,1,125,32,2,65,4,106,34,2,40,2,0,67,0,0,0,0,56,2,0,32,1,65,4,106,33,3,32,0,65,12,106,33,4,65,0,33,0,3,64,32,0,32,1,40,2,0,73,4,64,32,3,40,2,0,32,0,65,2,116,106,42,2,0,34,6,32,6,187,32,4,40,2,0,40,2,4,32,0,65,2,116,106,42,2,0,187,68,154,153,153,153,153,153,185,63,160,163,68,0,0,0,0,0,0,240,63,160,182,187,16,2,182,148,33,6,32,2,40,2,0,34,5,32,5,42,2,0,32,6,146,56,2,0,32,4,40,2,0,40,2,4,32,0,65,2,116,106,32,3,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,32,2,40,2,0,34,0,42,2,0,188,65,255,255,255,255,7,113,65,128,128,128,252,7,77,4,64,15,11,32,0,67,0,0,0,0,56,2,0,11,146,2,2,6,127,1,125,32,1,40,2,0,33,5,32,2,65,4,106,34,6,40,2,0,67,0,0,0,0,56,2,0,32,1,65,4,106,33,2,32,0,65,12,106,33,4,32,0,65,16,106,33,3,32,0,65,8,106,33,7,65,0,33,1,3,64,32,1,32,5,71,4,64,32,3,40,2,0,40,2,4,32,1,65,2,116,106,32,2,40,2,0,32,1,65,2,116,106,42,2,0,34,9,32,9,148,32,4,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,34,9,32,9,148,147,139,145,56,2,0,32,3,40,2,0,40,2,4,32,1,65,2,116,106,34,8,32,7,42,2,0,32,2,40,2,0,32,1,65,2,116,106,42,2,0,93,4,125,32,8,42,2,0,139,5,67,0,0,0,0,11,34,9,56,2,0,32,4,40,2,0,40,2,4,32,1,65,2,116,106,32,2,40,2,0,32,1,65,2,116,106,40,2,0,54,2,0,32,1,65,1,106,33,1,12,1,11,11,32,0,65,28,106,34,0,40,2,0,32,3,40,2,0,16,80,32,0,40,2,0,16,79,32,0,40,2,0,16,78,33,9,32,6,40,2,0,32,9,56,2,0,11,133,1,2,4,127,1,125,32,0,32,1,32,2,16,84,32,1,65,4,106,33,5,32,0,65,16,106,33,4,3,64,32,3,32,1,40,2,0,73,4,64,32,4,40,2,0,40,2,4,32,3,65,2,116,106,34,6,32,6,42,2,0,32,5,40,2,0,32,3,65,2,116,106,42,2,0,148,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,0,65,28,106,34,0,40,2,0,32,4,40,2,0,16,80,32,0,40,2,0,16,79,32,0,40,2,0,16,78,33,7,32,2,40,2,4,32,7,56,2,0,11,163,1,1,3,127,65,44,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,65,44,16,42,26,11,11,32,0,67,205,204,204,61,56,2,0,32,0,65,4,106,34,1,65,5,54,2,0,32,0,65,8,106,34,2,65,1,54,2,0,32,0,65,1,54,2,12,32,0,65,1,54,2,16,32,0,65,7,16,39,54,2,40,32,0,32,1,40,2,0,32,2,40,2,0,106,65,1,106,16,39,54,2,24,32,0,32,1,40,2,0,32,2,40,2,0,106,65,1,106,16,39,54,2,28,32,0,65,3,16,39,54,2,32,32,0,65,1,16,39,54,2,36,32,0,16,141,2,54,2,20,32,0,11,243,2,2,7,127,2,125,32,1,40,2,0,33,7,32,2,65,4,106,34,8,40,2,0,67,0,0,0,0,56,2,0,32,0,65,20,106,33,2,32,0,65,24,106,33,3,32,0,65,16,106,33,4,32,0,65,12,106,33,5,32,1,65,4,106,33,6,32,1,65,8,106,33,1,65,0,33,0,3,64,32,0,32,7,71,4,64,32,4,40,2,0,40,2,4,32,0,65,2,116,106,32,2,40,2,0,40,2,4,32,0,65,2,116,106,42,2,0,187,68,0,0,0,0,0,0,0,64,162,32,3,40,2,0,40,2,4,32,0,65,2,116,106,42,2,0,187,161,182,56,2,0,32,5,40,2,0,40,2,4,32,0,65,2,116,106,42,2,0,34,10,32,10,148,32,6,40,2,0,32,0,65,2,116,106,42,2,0,34,11,32,11,148,146,32,10,67,0,0,0,64,148,32,11,148,32,4,40,2,0,40,2,4,32,0,65,2,116,106,42,2,0,32,1,40,2,0,32,0,65,2,116,106,42,2,0,147,187,16,35,182,148,147,139,145,33,10,32,8,40,2,0,34,9,32,9,42,2,0,32,10,146,56,2,0,32,3,40,2,0,40,2,4,32,0,65,2,116,106,32,2,40,2,0,40,2,4,32,0,65,2,116,106,40,2,0,54,2,0,32,2,40,2,0,40,2,4,32,0,65,2,116,106,32,1,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,5,40,2,0,40,2,4,32,0,65,2,116,106,32,6,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,11,88,1,2,127,32,2,65,4,106,34,2,40,2,0,67,0,0,0,0,56,2,0,32,1,65,4,106,33,3,65,0,33,0,3,64,32,0,32,1,40,2,0,73,4,64,32,2,40,2,0,34,4,32,4,42,2,0,32,3,40,2,0,32,0,65,2,116,106,42,2,0,32,0,65,1,106,34,0,179,148,146,56,2,0,12,1,11,11,11,93,2,2,127,1,125,32,2,65,4,106,34,2,40,2,0,67,0,0,0,0,56,2,0,32,1,65,4,106,33,3,65,0,33,0,3,64,32,0,32,1,40,2,0,73,4,64,32,2,40,2,0,34,4,32,4,42,2,0,32,3,40,2,0,32,0,65,2,116,106,42,2,0,34,5,32,5,148,146,56,2,0,32,0,65,1,106,33,0,12,1,11,11,11,193,1,1,4,127,32,0,40,2,12,40,2,4,33,3,32,0,40,2,16,40,2,4,33,5,32,0,65,36,106,33,4,3,64,32,2,32,4,40,2,0,73,4,64,32,3,32,2,65,2,116,106,32,5,32,2,65,2,116,106,40,2,0,54,2,0,32,2,65,1,106,33,2,12,1,11,11,32,0,65,4,106,33,2,65,0,33,0,3,64,32,0,32,2,40,2,0,73,4,64,32,3,32,4,40,2,0,32,0,106,65,2,116,106,32,1,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,65,0,33,0,3,64,32,0,32,4,40,2,0,73,4,64,32,5,32,0,65,2,116,106,32,3,32,0,32,2,40,2,0,106,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,11,134,2,2,8,127,7,125,32,1,65,4,106,34,5,32,5,42,2,0,140,56,2,0,32,2,65,1,116,32,0,65,1,117,34,7,109,33,9,65,0,33,5,65,2,33,4,3,64,32,4,32,7,72,4,64,67,0,0,0,63,32,3,32,2,32,5,32,9,106,34,5,107,65,2,116,106,42,2,0,147,34,12,32,1,32,4,65,2,116,106,34,10,42,2,0,34,14,32,1,32,0,32,4,107,34,6,65,2,116,106,34,8,42,2,0,147,34,15,148,32,3,32,5,65,2,116,106,42,2,0,34,16,32,1,32,4,65,1,114,65,2,116,106,34,11,42,2,0,34,17,32,1,32,6,65,1,106,65,2,116,106,34,6,42,2,0,146,34,18,148,146,33,13,32,10,32,14,32,13,147,56,2,0,32,11,32,12,32,18,148,32,16,32,15,148,147,34,12,32,17,147,56,2,0,32,8,32,8,42,2,0,32,13,146,56,2,0,32,6,32,12,32,6,42,2,0,147,56,2,0,32,4,65,2,106,33,4,12,1,11,11,32,1,32,7,65,1,106,65,2,116,106,34,0,32,0,42,2,0,140,56,2,0,11,220,1,2,8,127,7,125,32,2,65,1,116,32,0,65,1,117,34,8,109,33,9,65,2,33,4,3,64,32,4,32,8,72,4,64,67,0,0,0,63,32,3,32,2,32,6,32,9,106,34,6,107,65,2,116,106,42,2,0,147,34,12,32,1,32,4,65,2,116,106,34,10,42,2,0,34,14,32,1,32,0,32,4,107,34,5,65,2,116,106,34,7,42,2,0,147,34,15,148,32,3,32,6,65,2,116,106,42,2,0,34,16,32,1,32,4,65,1,114,65,2,116,106,34,11,42,2,0,34,17,32,1,32,5,65,1,106,65,2,116,106,34,5,42,2,0,146,34,18,148,147,33,13,32,10,32,14,32,13,147,56,2,0,32,11,32,17,32,12,32,18,148,32,16,32,15,148,146,34,12,147,56,2,0,32,7,32,7,42,2,0,32,13,146,56,2,0,32,5,32,5,42,2,0,32,12,147,56,2,0,32,4,65,2,106,33,4,12,1,11,11,11,148,2,2,6,127,1,125,32,0,40,2,28,33,4,32,0,40,2,32,33,6,32,0,40,2,36,33,7,32,0,40,2,40,33,3,32,0,40,2,24,34,5,32,1,16,255,1,32,5,32,4,16,62,32,0,40,2,20,32,4,32,3,16,138,2,32,4,16,131,2,33,1,32,4,32,3,16,62,32,3,32,0,40,2,12,65,7,113,65,4,106,17,0,0,33,9,32,6,65,4,106,33,5,65,0,33,3,3,64,32,3,65,2,71,4,64,32,5,40,2,0,34,8,32,3,65,2,116,106,32,8,32,3,65,1,106,34,3,65,2,116,106,40,2,0,54,2,0,12,1,11,11,32,7,65,4,106,34,3,40,2,0,32,4,40,2,4,32,0,40,2,4,65,2,116,106,42,2,0,32,9,147,32,1,32,0,42,2,0,148,147,56,2,0,32,5,40,2,0,32,3,40,2,0,40,2,0,54,2,8,32,6,65,1,32,0,40,2,16,65,3,113,65,28,106,17,1,0,179,33,1,32,2,65,4,106,34,0,40,2,0,32,1,56,2,0,32,0,40,2,0,34,0,42,2,0,67,0,0,0,0,91,4,64,15,11,32,0,32,6,65,1,16,47,56,2,0,11,152,1,2,1,127,2,125,32,1,32,0,54,2,4,32,0,65,1,76,4,64,15,11,32,2,67,219,15,73,63,32,0,65,1,117,34,3,178,34,4,149,34,5,32,4,148,187,16,35,182,34,4,56,2,0,32,2,32,3,65,2,116,106,32,4,67,0,0,0,63,148,56,2,0,65,1,33,1,3,64,32,1,32,3,72,4,64,32,2,32,1,65,2,116,106,32,5,32,1,178,148,34,4,187,16,35,182,67,0,0,0,63,148,56,2,0,32,2,32,0,32,1,107,65,2,116,106,32,4,187,16,37,182,67,0,0,0,63,148,56,2,0,32,1,65,1,106,33,1,12,1,11,11,11,158,9,2,16,127,26,125,32,0,65,16,74,4,64,32,0,32,1,32,2,16,90,65,16,33,3,3,64,32,3,65,3,116,34,4,32,0,72,4,64,32,0,32,3,32,1,32,2,16,89,32,4,33,3,12,1,11,11,5,65,2,33,3,11,32,3,65,2,116,34,4,32,0,72,4,64,32,2,42,2,8,33,19,65,0,33,0,3,64,32,0,32,3,72,4,64,32,0,32,3,106,34,2,32,3,106,34,4,32,3,106,34,5,32,3,106,34,6,32,3,106,34,7,32,3,106,34,8,32,3,106,33,9,32,1,32,0,65,2,116,106,34,10,42,2,0,34,26,32,1,32,2,65,2,116,106,34,11,42,2,0,34,33,146,33,20,32,1,32,0,65,1,114,65,2,116,106,34,12,42,2,0,34,34,140,32,1,32,2,65,1,106,65,2,116,106,34,2,42,2,0,34,35,147,33,22,32,1,32,4,65,2,116,106,34,13,42,2,0,34,36,32,1,32,5,65,2,116,106,34,14,42,2,0,34,41,146,33,23,32,1,32,4,65,1,106,65,2,116,106,34,4,42,2,0,34,37,32,1,32,5,65,1,106,65,2,116,106,34,5,42,2,0,34,38,146,33,27,32,1,32,6,65,2,116,106,34,15,42,2,0,34,21,32,1,32,7,65,2,116,106,34,16,42,2,0,34,24,146,33,29,32,1,32,6,65,1,106,65,2,116,106,34,6,42,2,0,34,25,32,1,32,7,65,1,106,65,2,116,106,34,7,42,2,0,34,28,146,33,30,32,1,32,8,65,2,116,106,34,17,42,2,0,34,39,32,1,32,9,65,2,116,106,34,18,42,2,0,34,42,146,33,31,32,1,32,8,65,1,106,65,2,116,106,34,8,42,2,0,34,40,32,1,32,9,65,1,106,65,2,116,106,34,9,42,2,0,34,43,146,33,32,32,21,32,24,147,34,44,32,40,32,43,147,34,40,147,33,21,32,25,32,28,147,34,25,32,39,32,42,147,34,28,146,33,24,32,19,32,44,32,40,146,34,39,32,25,32,28,147,34,28,147,148,33,25,32,11,32,26,32,33,147,34,26,32,37,32,38,147,34,33,147,34,37,32,19,32,21,32,24,147,148,34,38,146,56,2,0,32,2,32,35,32,34,147,34,34,32,36,32,41,147,34,35,147,34,36,32,19,32,21,32,24,146,148,34,21,147,56,2,0,32,16,32,37,32,38,147,56,2,0,32,7,32,36,32,21,146,56,2,0,32,14,32,26,32,33,146,34,21,32,19,32,39,32,28,146,148,34,24,147,56,2,0,32,5,32,34,32,35,146,34,26,32,25,147,56,2,0,32,18,32,21,32,24,146,56,2,0,32,9,32,26,32,25,146,56,2,0,32,10,32,20,32,23,146,34,21,32,29,32,31,146,34,24,146,56,2,0,32,12,32,22,32,27,147,34,25,32,30,32,32,146,34,26,147,56,2,0,32,15,32,21,32,24,147,56,2,0,32,6,32,25,32,26,146,56,2,0,32,13,32,20,32,23,147,34,20,32,30,32,32,147,34,23,147,56,2,0,32,4,32,22,32,27,146,34,22,32,29,32,31,147,34,27,147,56,2,0,32,17,32,20,32,23,146,56,2,0,32,8,32,22,32,27,146,56,2,0,32,0,65,2,106,33,0,12,1,11,11,15,11,32,4,32,0,70,4,64,65,0,33,0,3,64,32,0,32,3,72,4,64,32,0,32,3,106,34,2,32,3,106,34,4,32,3,106,33,5,32,1,32,0,65,2,116,106,34,6,42,2,0,34,23,32,1,32,2,65,2,116,106,34,7,42,2,0,34,27,146,33,19,32,1,32,0,65,1,114,65,2,116,106,34,8,42,2,0,34,29,140,32,1,32,2,65,1,106,65,2,116,106,34,2,42,2,0,34,30,147,33,20,32,1,32,4,65,1,106,65,2,116,106,34,9,42,2,0,34,31,32,1,32,5,65,1,106,65,2,116,106,34,10,42,2,0,34,32,146,33,22,32,6,32,19,32,1,32,4,65,2,116,106,34,4,42,2,0,34,21,32,1,32,5,65,2,116,106,34,5,42,2,0,34,24,146,34,25,146,56,2,0,32,8,32,20,32,22,147,56,2,0,32,4,32,19,32,25,147,56,2,0,32,9,32,20,32,22,146,56,2,0,32,7,32,23,32,27,147,34,19,32,31,32,32,147,34,20,147,56,2,0,32,2,32,30,32,29,147,34,22,32,21,32,24,147,34,23,147,56,2,0,32,5,32,19,32,20,146,56,2,0,32,10,32,22,32,23,146,56,2,0,32,0,65,2,106,33,0,12,1,11,11,5,65,0,33,0,3,64,32,0,32,3,72,4,64,32,1,32,0,65,2,116,106,34,4,42,2,0,33,19,32,1,32,0,32,3,106,34,2,65,2,116,106,34,5,42,2,0,33,20,32,1,32,2,65,1,106,65,2,116,106,34,2,42,2,0,32,1,32,0,65,1,114,65,2,116,106,34,6,42,2,0,34,22,147,33,23,32,4,32,19,32,20,146,56,2,0,32,6,32,22,140,32,2,42,2,0,147,56,2,0,32,5,32,19,32,20,147,56,2,0,32,2,32,23,56,2,0,32,0,65,2,106,33,0,12,1,11,11,11,11,198,2,2,5,127,3,125,32,1,32,0,54,2,0,32,1,65,1,54,2,4,32,0,65,2,76,4,64,15,11,32,2,67,0,0,128,63,56,2,0,32,2,67,0,0,0,0,56,2,4,67,219,15,73,63,32,0,65,1,117,34,4,178,34,8,149,34,10,32,8,148,187,16,35,182,33,8,32,2,32,4,65,2,116,106,32,8,56,2,0,32,2,32,4,65,1,106,65,2,116,106,32,8,56,2,0,32,0,65,5,76,4,64,15,11,65,2,33,3,3,64,32,3,32,4,72,4,64,32,10,32,3,178,148,34,9,187,16,35,182,33,8,32,9,187,16,37,182,33,9,32,2,32,3,65,2,116,106,32,8,56,2,0,32,2,32,3,65,1,114,65,2,116,106,32,9,56,2,0,32,2,32,0,32,3,107,34,5,65,2,116,106,32,9,56,2,0,32,2,32,5,65,1,106,65,2,116,106,32,8,56,2,0,32,3,65,2,106,33,3,12,1,11,11,32,4,33,3,3,64,32,3,65,126,106,33,5,32,3,65,3,74,4,64,32,2,32,5,65,1,116,34,3,65,1,114,65,2,116,106,40,2,0,33,6,32,2,32,4,32,5,106,34,7,65,2,116,106,32,2,32,3,65,2,116,106,40,2,0,54,2,0,32,2,32,7,65,1,106,65,2,116,106,32,6,54,2,0,32,5,33,3,12,1,11,11,32,0,32,1,65,8,106,32,2,16,71,11,108,2,3,127,1,125,32,0,65,4,106,33,2,32,0,65,8,106,33,3,32,1,65,4,106,33,4,65,0,33,0,3,64,32,0,32,1,40,2,0,65,1,118,77,4,64,32,2,40,2,0,32,0,65,2,116,106,42,2,0,32,3,40,2,0,32,0,65,2,116,106,42,2,0,187,16,35,182,148,33,5,32,4,40,2,0,32,0,65,2,116,106,32,5,56,2,0,32,0,65,1,106,33,0,12,1,11,11,11,116,2,4,127,1,125,32,0,65,4,106,33,2,32,0,65,8,106,33,3,32,1,65,4,106,33,4,65,1,33,0,3,64,32,0,32,1,40,2,0,34,5,65,1,106,65,1,118,73,4,64,32,2,40,2,0,32,0,65,2,116,106,42,2,0,32,3,40,2,0,32,0,65,2,116,106,42,2,0,187,16,37,182,148,33,6,32,4,40,2,0,32,5,32,0,107,65,2,116,106,32,6,56,2,0,32,0,65,1,106,33,0,12,1,11,11,11,39,1,2,127,32,1,32,0,65,24,106,34,3,40,2,0,34,4,16,147,1,32,1,32,4,16,146,1,32,0,32,3,40,2,0,32,2,16,91,11,158,1,2,5,127,1,125,32,1,65,4,106,34,4,40,2,0,32,0,65,4,106,34,5,40,2,0,42,2,0,139,56,2,0,65,1,33,2,3,64,32,5,40,2,0,33,3,32,2,32,1,40,2,0,65,127,106,34,6,73,4,64,32,4,40,2,0,32,2,65,2,116,106,32,3,32,2,65,2,116,106,42,2,0,34,7,32,7,148,32,3,32,0,40,2,0,32,2,107,65,2,116,106,42,2,0,34,7,32,7,148,146,145,56,2,0,32,2,65,1,106,33,2,12,1,11,11,32,4,40,2,0,32,6,65,2,116,106,32,3,32,0,40,2,0,65,1,118,65,2,116,106,42,2,0,139,56,2,0,11,192,5,2,9,127,2,125,32,1,65,8,106,34,6,40,2,0,32,0,65,4,106,34,10,40,2,0,42,2,0,67,0,0,0,0,93,4,125,67,219,15,73,64,5,67,0,0,0,0,11,56,2,0,65,1,33,5,2,64,2,64,3,64,32,10,40,2,0,33,3,32,0,40,2,0,33,2,32,5,32,1,40,2,0,65,127,106,34,4,79,13,1,32,3,32,2,32,5,107,65,2,116,106,42,2,0,33,11,2,64,2,64,32,3,32,5,65,2,116,106,42,2,0,34,12,188,34,2,65,255,255,255,255,7,113,34,7,65,128,128,128,252,7,75,13,0,32,11,188,34,4,65,255,255,255,255,7,113,34,3,65,128,128,128,252,7,75,13,0,32,2,65,128,128,128,252,3,70,4,64,32,11,16,97,33,11,12,2,11,32,2,65,30,118,65,2,113,32,4,65,31,118,34,8,114,33,4,32,3,69,4,64,2,64,2,64,2,64,2,64,32,4,65,3,113,14,4,0,0,1,2,3,11,12,5,11,67,219,15,73,64,33,11,12,4,11,67,219,15,73,192,33,11,12,3,11,12,5,11,2,64,32,2,65,255,255,255,255,7,113,34,9,65,128,128,128,252,7,72,4,64,32,9,13,1,32,8,4,125,67,219,15,201,191,5,67,219,15,201,63,11,33,11,12,3,5,32,9,65,128,128,128,252,7,107,13,1,32,4,65,255,1,113,33,2,32,3,65,128,128,128,252,7,70,4,64,2,64,2,64,2,64,2,64,2,64,32,2,65,3,113,14,4,0,1,2,3,4,11,67,219,15,73,63,33,11,12,8,11,67,219,15,73,191,33,11,12,7,11,67,228,203,22,64,33,11,12,6,11,67,228,203,22,192,33,11,12,5,11,5,2,64,2,64,2,64,2,64,2,64,32,2,65,3,113,14,4,0,1,2,3,4,11,67,0,0,0,0,33,11,12,8,11,67,0,0,0,128,33,11,12,7,11,67,219,15,73,64,33,11,12,6,11,67,219,15,73,192,33,11,12,5,11,11,12,6,11,0,11,32,3,65,128,128,128,252,7,70,32,7,65,128,128,128,232,0,106,32,3,73,114,4,64,32,8,4,125,67,219,15,201,191,5,67,219,15,201,63,11,33,11,12,2,11,32,2,65,0,72,32,3,65,128,128,128,232,0,106,32,7,73,113,4,125,67,0,0,0,0,5,32,11,32,12,149,139,16,97,11,33,11,2,64,2,64,2,64,2,64,32,4,65,3,113,14,3,0,1,2,3,11,12,4,11,32,11,140,33,11,12,3,11,67,219,15,73,64,32,11,67,46,189,187,51,146,147,33,11,12,2,11,32,11,67,46,189,187,51,146,67,219,15,73,192,146,33,11,12,1,11,32,11,32,12,146,33,11,11,32,6,40,2,0,32,5,65,2,116,106,32,11,56,2,0,32,5,65,1,106,33,5,12,0,11,0,11,32,6,40,2,0,32,4,65,2,116,106,32,3,32,2,65,1,118,65,2,116,106,42,2,0,67,0,0,0,0,93,4,125,67,219,15,73,64,5,67,0,0,0,0,11,56,2,0,11,11,28,0,67,0,0,128,63,32,0,40,2,24,40,2,4,32,0,40,2,32,65,2,116,106,42,2,0,147,11,55,0,32,0,40,2,0,16,38,32,0,40,2,20,16,56,32,0,40,2,24,16,38,32,0,40,2,8,16,38,32,0,40,2,16,16,38,32,0,40,2,4,16,38,32,0,40,2,12,16,38,32,0,16,40,11,224,5,2,10,127,3,125,32,0,40,2,16,34,7,40,2,0,33,9,32,0,40,2,24,33,5,32,1,32,0,40,2,0,32,0,65,4,106,34,1,40,2,0,16,111,32,0,65,20,106,34,12,40,2,0,32,1,40,2,0,32,7,16,49,32,0,65,8,106,34,3,40,2,0,40,2,4,32,7,65,4,106,34,10,40,2,0,42,2,0,34,13,32,13,148,56,2,0,32,3,40,2,0,40,2,4,34,1,32,1,42,2,0,32,0,65,12,106,34,11,40,2,0,40,2,4,42,2,0,148,56,2,0,32,9,65,1,118,33,4,65,1,33,1,3,64,32,10,40,2,0,33,6,32,1,32,4,73,4,64,32,3,40,2,0,40,2,4,32,1,65,2,116,106,32,6,32,1,65,2,116,106,42,2,0,34,13,32,13,148,32,6,32,9,32,1,107,34,6,65,2,116,106,42,2,0,34,13,32,13,148,146,56,2,0,32,3,40,2,0,40,2,4,32,1,65,2,116,106,34,8,32,8,42,2,0,32,11,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,148,56,2,0,32,3,40,2,0,40,2,4,34,8,32,6,65,2,116,106,32,8,32,1,65,2,116,106,40,2,0,54,2,0,32,1,65,1,106,33,1,12,1,11,11,32,3,40,2,0,40,2,4,32,4,65,2,116,106,32,6,32,4,65,2,116,106,42,2,0,34,13,32,13,148,56,2,0,32,3,40,2,0,40,2,4,32,4,65,2,116,106,34,1,32,1,42,2,0,32,11,40,2,0,40,2,4,32,4,65,2,116,106,42,2,0,148,56,2,0,32,4,65,1,106,33,4,67,0,0,0,0,33,13,65,0,33,1,3,64,32,1,32,4,71,4,64,32,13,32,3,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,146,33,13,32,1,65,1,106,33,1,12,1,11,11,32,13,67,0,0,0,64,148,33,15,32,12,40,2,0,32,3,40,2,0,32,7,16,49,32,5,65,4,106,34,3,40,2,0,67,0,0,128,63,56,2,0,67,0,0,0,0,33,13,65,1,33,1,3,64,32,1,32,5,40,2,0,73,4,64,32,3,40,2,0,32,1,65,2,116,106,32,15,32,10,40,2,0,32,1,65,2,116,106,42,2,0,147,56,2,0,32,13,32,3,40,2,0,32,1,65,2,116,106,34,4,42,2,0,34,14,146,34,13,67,0,0,0,0,92,4,125,32,14,32,1,179,32,13,149,148,5,67,0,0,128,63,11,33,14,32,4,32,14,56,2,0,32,1,65,1,106,33,1,12,1,11,11,32,5,16,66,33,1,32,3,40,2,0,34,3,32,1,65,2,116,106,42,2,0,32,0,42,2,28,34,13,93,69,4,64,32,0,65,0,54,2,32,32,2,40,2,4,67,0,0,0,0,56,2,0,15,11,32,1,32,0,40,2,36,75,4,64,32,5,32,1,16,47,33,13,5,32,0,32,3,32,1,65,1,118,184,68,0,0,0,0,0,0,224,63,160,182,142,169,34,0,65,2,116,106,42,2,0,32,13,93,4,127,32,0,5,32,1,34,0,11,54,2,32,32,5,32,0,16,47,33,13,11,32,2,40,2,4,32,13,56,2,0,11,145,4,2,5,127,7,125,65,40,16,43,34,2,4,64,32,2,65,124,106,40,2,0,65,3,113,4,64,32,2,65,0,65,40,16,42,26,11,11,32,2,65,4,106,34,3,32,1,16,39,54,2,0,32,2,32,1,16,57,34,4,54,2,20,32,4,69,4,64,32,3,40,2,0,34,0,4,64,32,0,16,38,11,32,2,16,40,65,0,15,11,32,2,32,1,16,39,54,2,16,32,2,32,1,16,39,54,2,8,32,2,32,1,65,1,118,65,1,106,34,3,16,39,54,2,24,32,2,67,154,153,89,63,56,2,28,32,2,65,0,54,2,32,32,2,65,170,47,32,1,16,67,54,2,0,32,2,65,12,106,34,5,32,3,16,39,34,3,54,2,0,32,1,179,33,12,32,0,179,33,13,65,0,33,4,65,1,33,1,3,64,32,4,32,3,40,2,0,73,4,64,32,4,179,32,12,149,32,13,148,33,8,3,64,32,8,32,1,65,2,116,65,128,8,106,42,2,0,34,7,94,4,64,32,1,65,1,106,33,1,12,1,11,11,32,1,65,127,106,34,6,65,2,116,65,144,9,106,42,2,0,33,9,32,6,65,2,116,65,128,8,106,42,2,0,34,11,32,7,91,4,64,32,3,40,2,4,32,4,65,2,116,106,32,9,56,2,0,5,32,1,65,2,116,65,144,9,106,42,2,0,32,9,147,33,10,32,6,4,64,32,3,40,2,4,32,4,65,2,116,106,32,9,187,32,10,187,32,7,32,11,149,187,68,0,0,0,0,0,0,240,191,160,163,161,32,10,32,7,32,11,147,149,32,8,148,187,160,182,56,2,0,5,32,3,40,2,4,32,4,65,2,116,106,32,10,32,7,149,32,8,148,32,9,146,56,2,0,11,11,3,64,32,8,32,7,94,4,64,32,1,65,1,106,34,3,33,1,32,3,65,2,116,65,128,8,106,42,2,0,33,7,12,1,11,11,32,5,40,2,0,40,2,4,32,4,65,2,116,106,34,3,68,0,0,0,0,0,0,36,64,32,3,42,2,0,67,205,204,76,61,148,187,16,0,182,56,2,0,32,4,65,1,106,33,4,32,5,40,2,0,33,3,12,1,11,11,32,2,32,0,184,68,0,0,0,0,0,80,148,64,163,68,0,0,0,0,0,0,224,63,160,182,142,169,54,2,36,32,2,11,182,8,2,13,127,3,125,35,4,33,8,35,4,65,16,106,36,4,32,0,42,2,4,33,18,32,0,40,2,0,34,10,40,2,0,33,6,32,0,65,12,106,34,11,40,2,0,34,3,40,2,0,33,14,32,1,32,1,32,3,16,111,32,8,65,8,106,34,4,65,4,106,34,13,32,3,65,4,106,34,7,40,2,0,54,2,0,32,4,32,6,54,2,0,32,4,16,55,33,16,32,0,65,16,106,34,12,40,2,0,40,2,4,32,16,56,2,0,65,1,33,3,3,64,32,12,40,2,0,34,9,40,2,4,33,5,32,3,32,6,73,4,64,32,5,32,3,65,2,116,106,32,5,32,3,65,127,106,34,5,65,2,116,106,40,2,0,54,2,0,32,12,40,2,0,40,2,4,32,3,65,2,116,106,34,9,32,9,42,2,0,32,7,40,2,0,32,5,65,2,116,106,42,2,0,147,56,2,0,32,12,40,2,0,40,2,4,32,3,65,2,116,106,34,5,32,5,42,2,0,32,7,40,2,0,32,6,32,3,106,65,127,106,65,2,116,106,42,2,0,146,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,9,32,5,42,2,0,16,75,32,11,40,2,0,33,11,32,0,65,32,106,34,9,40,2,0,32,1,32,0,65,24,106,34,3,40,2,0,34,15,16,49,32,13,32,1,40,2,4,54,2,0,32,4,32,6,54,2,0,32,8,32,0,65,20,106,34,1,40,2,0,40,2,4,65,4,106,54,2,4,32,8,32,6,54,2,0,32,4,32,8,16,62,32,8,16,112,32,9,40,2,0,32,1,40,2,0,32,0,65,28,106,34,4,40,2,0,16,49,32,11,65,4,106,34,5,40,2,0,32,4,40,2,0,40,2,4,42,2,0,32,3,40,2,0,40,2,4,42,2,0,148,56,2,0,65,1,33,1,3,64,32,4,40,2,0,40,2,4,33,7,32,1,32,6,73,4,64,32,5,40,2,0,32,1,65,2,116,106,32,7,32,1,65,2,116,106,42,2,0,32,3,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,148,56,2,0,32,5,40,2,0,32,1,65,2,116,106,34,7,32,7,42,2,0,32,4,40,2,0,40,2,4,32,14,32,1,107,34,7,65,2,116,106,42,2,0,32,3,40,2,0,40,2,4,32,7,65,2,116,106,42,2,0,148,147,56,2,0,32,1,65,1,106,33,1,12,1,11,11,32,5,40,2,0,32,6,65,2,116,106,32,7,32,6,65,2,116,106,42,2,0,32,3,40,2,0,40,2,4,32,6,65,2,116,106,42,2,0,148,56,2,0,65,1,33,1,3,64,32,1,32,6,73,4,64,32,5,40,2,0,32,14,32,1,107,34,7,65,2,116,106,32,4,40,2,0,40,2,4,32,7,65,2,116,106,42,2,0,32,3,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,148,56,2,0,32,5,40,2,0,32,7,65,2,116,106,34,13,32,13,42,2,0,32,4,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,32,3,40,2,0,40,2,4,32,7,65,2,116,106,42,2,0,148,146,56,2,0,32,1,65,1,106,33,1,12,1,11,11,32,9,40,2,0,32,11,32,15,16,91,32,15,65,4,106,33,4,32,10,65,4,106,33,3,65,0,33,1,3,64,32,1,32,6,71,4,64,32,3,40,2,0,32,1,65,2,116,106,32,12,40,2,0,40,2,4,32,1,65,2,116,106,42,2,0,187,32,4,40,2,0,32,1,32,6,106,65,2,116,106,42,2,0,187,68,0,0,0,0,0,0,0,64,162,161,182,56,2,0,32,1,65,1,106,33,1,12,1,11,11,32,2,16,53,32,3,40,2,0,67,0,0,128,63,56,2,0,67,0,0,0,0,33,16,65,1,33,1,2,64,2,64,3,64,32,1,32,6,79,13,2,32,16,32,3,40,2,0,32,1,65,2,116,106,34,4,42,2,0,34,17,146,34,16,67,0,0,0,0,92,4,125,32,17,32,1,179,32,16,149,148,5,67,0,0,128,63,11,33,17,32,4,32,17,56,2,0,32,1,65,125,106,33,4,32,1,65,4,75,4,64,32,3,40,2,0,34,5,32,4,65,2,116,106,42,2,0,34,17,32,18,93,4,64,32,17,32,5,32,1,65,126,106,65,2,116,106,42,2,0,93,13,3,11,11,32,1,65,1,106,33,1,12,0,11,0,11,32,0,32,4,54,2,8,32,10,32,4,16,47,33,16,32,2,40,2,4,32,16,56,2,0,32,8,36,4,15,11,32,0,32,10,16,66,34,0,54,2,8,32,10,32,0,16,47,33,16,32,2,40,2,4,32,16,56,2,0,32,8,36,4,11,55,0,32,0,40,2,0,16,38,32,0,40,2,12,16,38,32,0,40,2,16,16,38,32,0,40,2,20,16,38,32,0,40,2,24,16,38,32,0,40,2,28,16,38,32,0,40,2,32,16,56,32,0,16,40,11,123,1,2,127,65,36,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,36,16,42,26,11,11,32,1,32,0,65,1,118,34,2,16,39,54,2,0,32,1,32,0,16,39,54,2,12,32,1,32,2,16,39,54,2,16,32,1,32,0,16,39,54,2,20,32,1,32,0,16,39,54,2,24,32,1,32,0,16,39,54,2,28,32,1,32,0,16,57,54,2,32,32,1,67,154,153,25,62,56,2,4,32,1,65,0,54,2,8,32,1,11,209,2,2,7,127,3,125,32,0,42,2,4,33,12,32,0,40,2,0,34,5,40,2,0,33,7,32,5,65,4,106,34,8,40,2,0,34,6,67,0,0,128,63,56,2,0,65,1,33,3,2,64,2,64,3,64,32,3,32,7,79,13,2,32,6,32,3,65,2,116,106,34,9,67,0,0,0,0,56,2,0,65,0,33,4,67,0,0,0,0,33,10,3,64,32,4,32,7,71,4,64,32,9,32,10,32,1,32,4,65,2,116,106,42,2,0,32,1,32,4,32,3,106,65,2,116,106,42,2,0,147,34,10,32,10,148,146,34,10,56,2,0,32,4,65,1,106,33,4,12,1,11,11,32,11,32,10,146,34,11,67,0,0,0,0,92,4,64,32,8,40,2,0,32,3,65,2,116,106,34,4,32,4,42,2,0,32,3,179,32,11,149,148,56,2,0,5,32,8,40,2,0,32,3,65,2,116,106,67,0,0,128,63,56,2,0,11,32,3,65,125,106,33,4,32,3,65,4,75,4,64,32,6,32,4,65,2,116,106,42,2,0,34,10,32,12,93,4,64,32,10,32,6,32,3,65,126,106,65,2,116,106,42,2,0,93,13,3,11,11,32,3,65,1,106,33,3,12,0,11,0,11,32,0,32,4,54,2,8,32,5,32,4,16,47,33,10,32,2,40,2,4,32,10,56,2,0,15,11,32,0,32,5,16,66,34,0,54,2,8,32,5,32,0,16,47,33,10,32,2,40,2,4,32,10,56,2,0,11,67,1,1,127,65,12,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,12,16,42,26,11,11,32,1,32,0,65,1,118,16,39,54,2,0,32,1,67,154,153,25,62,56,2,4,32,1,65,0,54,2,8,32,1,11,7,0,32,0,42,2,24,11,41,0,32,0,40,2,0,16,38,32,0,40,2,4,16,38,32,0,40,2,8,16,56,32,0,40,2,16,16,38,32,0,40,2,12,16,38,32,0,16,40,11,183,2,2,5,127,1,125,32,0,40,2,12,33,5,32,1,65,4,106,33,6,32,0,65,4,106,33,4,3,64,32,3,32,1,40,2,0,73,4,64,32,4,40,2,0,40,2,4,32,3,65,2,116,106,32,0,40,2,0,40,2,4,32,3,65,2,116,106,42,2,0,32,6,40,2,0,32,3,65,2,116,106,42,2,0,148,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,0,65,8,106,34,7,40,2,0,32,4,40,2,0,32,5,16,49,32,5,65,4,106,33,4,32,0,65,16,106,33,6,65,0,33,3,3,64,32,3,32,1,40,2,0,65,1,118,77,4,64,32,6,40,2,0,40,2,4,32,3,65,2,116,106,32,4,40,2,0,32,3,65,2,116,106,42,2,0,34,8,32,8,148,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,7,40,2,0,32,6,40,2,0,32,5,16,49,32,0,65,20,106,33,1,65,0,33,0,3,64,32,0,32,5,40,2,0,65,1,118,77,4,64,32,1,40,2,0,40,2,4,32,0,65,2,116,106,32,4,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,32,1,40,2,0,34,0,32,0,16,66,16,47,67,0,0,0,64,148,33,8,32,2,40,2,4,32,8,56,2,0,11,135,1,1,2,127,65,32,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,32,16,42,26,11,11,32,1,32,0,16,57,34,2,54,2,8,32,2,4,127,32,1,65,170,47,32,0,16,67,54,2,0,32,1,32,0,16,39,54,2,4,32,1,32,0,16,39,54,2,12,32,1,32,0,16,39,54,2,16,32,1,32,0,65,1,118,65,1,106,16,39,54,2,20,32,1,67,0,0,128,63,56,2,24,32,1,67,0,0,0,0,56,2,28,32,1,5,32,1,16,40,65,0,11,11,136,4,2,15,127,1,125,32,0,65,8,106,34,14,40,2,0,34,6,33,15,32,0,40,2,0,34,8,65,127,106,33,16,32,0,65,12,106,34,17,40,2,0,33,4,3,64,32,9,32,1,71,4,64,32,4,32,2,32,9,65,1,116,106,46,1,0,59,1,0,32,4,65,2,106,34,4,32,15,107,65,1,117,32,8,78,4,64,65,0,33,0,65,0,33,4,65,0,33,5,3,64,32,5,32,8,71,4,64,32,6,32,5,65,1,116,106,46,1,0,34,3,65,0,74,4,64,32,0,32,3,72,4,64,32,3,33,0,11,5,32,3,65,0,72,4,64,32,4,65,0,32,3,107,34,3,72,4,64,32,3,33,4,11,11,11,32,5,65,1,106,33,5,12,1,11,11,32,0,178,67,154,153,25,63,148,187,68,0,0,0,0,0,0,224,63,160,170,33,12,65,0,32,4,178,67,154,153,25,63,148,187,68,0,0,0,0,0,0,224,63,160,170,107,33,10,65,1,33,3,3,64,2,64,32,3,32,8,79,13,0,32,6,32,3,65,1,116,106,46,1,0,32,12,74,13,0,32,3,65,1,106,33,3,12,1,11,11,2,64,2,64,3,64,2,64,32,3,32,16,79,13,2,32,3,65,1,106,33,0,32,6,32,3,65,1,116,106,46,1,0,32,10,78,4,64,32,6,32,0,65,1,116,106,46,1,0,32,10,72,13,1,11,32,0,33,3,12,1,11,11,12,1,11,32,3,65,1,106,33,0,11,65,0,33,11,65,0,33,5,32,3,33,7,3,64,32,7,32,8,73,4,64,32,6,32,7,65,1,116,106,46,1,0,33,4,32,11,4,64,32,4,32,10,72,4,64,32,5,33,4,5,32,6,32,7,65,1,106,65,1,116,106,46,1,0,32,10,72,34,13,4,64,32,7,33,0,11,32,5,32,13,106,33,4,32,13,4,64,65,0,33,11,11,11,5,32,4,32,12,78,33,11,32,5,33,4,11,32,4,33,5,32,7,65,1,106,33,7,12,1,11,11,32,0,32,3,74,32,5,65,0,74,113,4,64,32,0,32,3,107,178,32,5,178,149,33,18,11,32,6,33,4,11,32,9,65,1,106,33,9,12,1,11,11,32,14,32,6,54,2,0,32,17,32,4,54,2,0,32,18,11,109,2,4,127,1,125,32,1,65,4,106,33,5,32,0,65,16,106,33,4,3,64,32,3,32,1,40,2,0,34,6,73,4,64,32,4,40,2,0,32,3,65,1,116,106,32,5,40,2,0,32,3,65,2,116,106,42,2,0,187,68,0,0,0,0,0,0,224,64,162,170,59,1,0,32,3,65,1,106,33,3,12,1,11,11,32,0,32,6,32,4,40,2,0,16,164,1,33,7,32,2,40,2,4,32,7,56,2,0,11,151,1,1,3,127,65,20,16,43,34,1,4,64,32,1,65,124,106,40,2,0,65,3,113,4,64,32,1,65,0,65,20,16,42,26,11,11,32,1,32,0,54,2,0,32,0,65,1,116,34,2,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,2,16,42,26,11,11,32,1,65,8,106,34,2,32,0,54,2,0,32,1,40,2,0,65,1,116,34,3,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,3,16,42,26,11,11,32,1,32,0,54,2,16,32,1,32,2,40,2,0,54,2,12,32,1,11,125,1,3,127,32,0,40,2,52,16,38,32,0,40,2,56,16,38,32,0,65,64,107,40,2,0,16,38,32,0,40,2,60,16,38,32,0,40,2,44,16,40,32,0,65,24,106,33,3,32,0,65,48,106,33,2,3,64,32,1,32,3,40,2,0,73,4,64,32,2,40,2,0,32,1,65,2,116,106,40,2,0,40,2,4,16,40,32,2,40,2,0,32,1,65,2,116,106,40,2,0,16,40,32,1,65,1,106,33,1,12,1,11,11,32,2,40,2,0,16,40,32,0,16,40,11,144,5,1,6,127,65,204,0,16,43,34,2,4,64,32,2,65,124,106,40,2,0,65,3,113,4,64,32,2,65,0,65,204,0,16,42,26,11,11,32,2,65,2,54,2,40,32,2,65,24,106,34,5,65,5,54,2,0,32,2,65,5,54,2,28,32,2,67,0,0,128,63,56,2,8,32,2,67,10,215,35,60,56,2,0,32,2,65,16,106,34,3,65,8,54,2,0,32,2,65,20,106,34,4,65,7,54,2,0,32,2,67,0,0,16,65,56,2,4,32,2,65,0,54,2,36,32,2,32,0,32,1,110,184,68,24,45,68,84,251,33,25,64,163,182,56,2,72,32,2,32,1,184,68,24,45,68,84,251,33,25,64,162,32,0,184,163,182,56,2,68,32,2,32,0,65,1,118,65,1,106,34,1,16,39,54,2,52,32,2,32,1,16,39,54,2,56,32,2,65,64,107,32,1,16,39,54,2,0,32,2,32,3,40,2,0,32,4,40,2,0,106,65,1,106,16,39,54,2,60,32,1,65,12,108,34,3,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,3,16,42,26,11,11,32,2,65,44,106,34,3,32,0,54,2,0,65,0,33,0,3,64,32,0,32,1,71,4,64,32,3,40,2,0,32,0,65,12,108,106,65,0,54,2,0,32,3,40,2,0,32,0,65,12,108,106,67,0,0,0,0,56,2,4,32,3,40,2,0,32,0,65,12,108,106,67,0,0,0,0,56,2,8,32,0,65,1,106,33,0,12,1,11,11,32,5,40,2,0,65,2,116,34,3,16,43,34,0,4,64,32,0,65,124,106,40,2,0,65,3,113,4,64,32,0,65,0,32,3,16,42,26,11,11,32,2,65,48,106,34,3,32,0,54,2,0,32,1,65,2,116,33,6,65,0,33,0,3,64,32,0,32,5,40,2,0,73,4,64,65,16,16,43,34,4,4,64,32,4,65,124,106,40,2,0,65,3,113,4,64,32,4,65,0,65,16,16,42,26,11,11,32,3,40,2,0,32,0,65,2,116,106,32,4,54,2,0,32,6,16,43,34,4,4,64,32,4,65,124,106,40,2,0,65,3,113,4,64,32,4,65,0,32,6,16,42,26,11,11,32,3,40,2,0,32,0,65,2,116,106,40,2,0,32,4,54,2,4,65,0,33,4,3,64,32,3,40,2,0,32,0,65,2,116,106,40,2,0,33,7,32,4,32,1,71,4,64,32,7,40,2,4,32,4,65,2,116,106,67,0,0,0,0,56,2,0,32,4,65,1,106,33,4,12,1,11,11,32,7,67,0,0,0,0,56,2,8,32,3,40,2,0,32,0,65,2,116,106,40,2,0,67,0,0,0,0,56,2,0,32,3,40,2,0,32,0,65,2,116,106,40,2,0,67,0,0,0,0,56,2,12,32,0,65,1,106,33,0,12,1,11,11,32,2,11,87,1,3,127,65,1,33,2,3,64,32,2,32,1,40,2,0,65,127,106,73,4,64,32,1,32,2,16,108,34,4,4,64,32,0,32,3,32,4,106,34,3,65,127,106,34,4,65,12,108,106,32,2,54,2,0,32,0,32,4,65,12,108,106,32,1,32,2,16,47,56,2,4,11,32,2,65,1,106,33,2,12,1,11,11,32,3,11,65,2,3,127,2,125,3,64,32,2,32,1,71,4,64,32,5,32,0,32,2,65,12,108,106,42,2,8,34,6,95,69,34,4,69,4,64,32,2,33,3,11,32,4,69,4,64,32,6,33,5,11,32,2,65,1,106,33,2,12,1,11,11,32,3,11,133,5,3,15,127,4,125,1,124,32,0,40,2,48,33,12,32,0,40,2,28,33,9,32,0,40,2,24,33,13,32,1,40,2,0,33,10,32,0,40,2,44,34,8,32,8,32,0,40,2,32,34,14,16,170,1,65,12,108,106,65,4,106,33,15,32,10,179,33,19,32,1,65,4,106,33,16,65,0,33,1,3,64,32,6,32,13,71,4,64,32,12,32,6,65,2,116,106,34,4,40,2,0,67,0,0,0,0,56,2,8,32,4,40,2,0,67,0,0,0,0,56,2,12,32,4,40,2,0,32,15,42,2,0,68,0,0,0,0,0,0,240,63,32,6,184,68,0,0,0,0,0,0,240,63,160,163,182,148,56,2,0,32,4,40,2,0,42,2,0,34,17,67,0,0,0,0,92,4,64,32,19,32,17,149,142,169,33,5,11,32,9,32,5,73,4,64,32,9,33,5,11,65,0,33,3,3,64,32,3,32,5,73,4,64,32,4,40,2,0,34,2,40,2,4,32,3,65,2,116,106,32,3,184,68,0,0,0,0,0,0,240,63,160,32,2,42,2,0,187,162,182,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,5,33,2,3,64,32,2,32,10,73,4,64,32,4,40,2,0,40,2,4,32,2,65,2,116,106,67,0,0,0,0,56,2,0,32,2,65,1,106,33,2,12,1,11,11,68,0,0,0,0,0,0,240,63,32,5,184,163,33,21,65,0,33,7,3,64,32,7,32,5,73,4,64,67,0,80,195,71,33,17,65,0,33,3,3,64,32,3,32,14,71,4,64,32,4,40,2,0,40,2,4,32,7,65,2,116,106,42,2,0,32,8,32,3,65,12,108,106,42,2,4,147,139,34,20,32,17,95,69,34,2,69,4,64,32,20,33,17,11,32,2,69,4,64,32,3,33,1,11,32,3,65,1,106,33,3,12,1,11,11,32,17,187,68,0,0,0,0,0,0,49,64,162,32,4,40,2,0,40,2,4,32,7,65,2,116,106,34,2,42,2,0,187,99,4,64,32,2,32,8,32,1,65,12,108,106,40,2,4,54,2,0,32,16,40,2,0,32,4,40,2,0,34,2,40,2,4,32,7,65,2,116,106,42,2,0,67,0,0,0,63,146,142,169,65,2,116,106,42,2,0,187,68,0,0,0,0,0,0,208,63,16,0,182,33,17,32,2,65,8,106,34,2,32,2,42,2,0,32,17,146,56,2,0,32,4,40,2,0,65,12,106,34,2,32,21,32,2,42,2,0,187,160,182,56,2,0,5,32,2,67,0,0,0,0,56,2,0,11,32,7,65,1,106,33,7,12,1,11,11,32,18,32,4,40,2,0,42,2,8,34,17,93,34,2,4,64,32,6,33,11,11,32,2,4,64,32,17,33,18,11,32,6,65,1,106,33,6,12,1,11,11,32,0,32,11,54,2,36,11,138,2,1,5,127,32,0,40,2,60,33,3,32,0,40,2,56,34,2,40,2,0,33,5,32,1,65,4,106,33,6,32,2,65,4,106,33,4,65,0,33,1,3,64,32,1,32,5,71,4,64,32,4,40,2,0,32,1,65,2,116,106,32,6,40,2,0,32,1,65,2,116,106,40,2,0,54,2,0,32,1,65,1,106,33,1,12,1,11,11,32,2,32,2,16,109,140,16,75,32,2,32,0,42,2,4,16,252,1,32,2,32,3,32,0,40,2,16,32,0,40,2,20,16,251,1,32,2,32,0,42,2,0,140,16,75,32,0,65,44,106,34,4,40,2,0,34,3,32,2,16,169,1,33,2,65,0,33,1,3,64,32,1,32,2,71,4,64,32,3,32,1,65,12,108,106,32,6,40,2,0,32,3,32,1,65,12,108,106,40,2,0,65,2,116,106,40,2,0,54,2,8,32,1,65,1,106,33,1,12,1,11,11,32,2,33,1,3,64,32,1,32,5,73,4,64,32,3,32,1,65,12,108,106,67,0,0,0,0,56,2,8,32,1,65,1,106,33,1,12,1,11,11,32,4,32,3,54,2,0,32,0,32,2,54,2,32,11,219,2,3,5,127,2,125,1,124,32,1,65,4,106,33,5,32,0,40,2,52,34,4,65,4,106,33,6,3,64,32,3,32,4,40,2,0,73,4,64,32,6,40,2,0,32,3,65,2,116,106,32,5,40,2,0,32,3,65,2,116,106,40,2,0,54,2,0,32,3,65,1,106,33,3,12,1,11,11,32,0,32,4,16,172,1,32,0,32,4,16,171,1,32,1,65,8,106,34,3,40,2,0,32,0,65,48,106,34,4,40,2,0,32,0,65,36,106,34,5,40,2,0,65,2,116,106,40,2,0,42,2,0,67,0,0,0,63,146,142,169,34,7,65,2,116,106,42,2,0,32,0,65,64,107,34,6,40,2,0,34,1,40,2,4,32,7,65,2,116,106,42,2,0,147,32,0,42,2,68,32,7,179,148,147,33,8,32,0,42,2,72,33,9,65,0,33,0,3,64,32,0,32,1,40,2,0,73,4,64,32,1,40,2,4,32,0,65,2,116,106,32,3,40,2,0,32,0,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,32,6,40,2,0,33,1,12,1,11,11,32,2,40,2,4,32,4,40,2,0,32,5,40,2,0,65,2,116,106,40,2,0,42,2,0,67,0,0,0,63,146,142,32,8,187,34,10,68,24,45,68,84,251,33,9,64,160,154,68,24,45,68,84,251,33,25,64,163,182,142,187,68,0,0,0,0,0,0,240,63,160,68,24,45,68,84,251,33,25,64,162,32,10,160,182,32,9,148,146,56,2,0,11,41,0,32,0,40,2,20,16,54,32,0,40,2,24,16,38,32,0,40,2,16,16,38,32,0,40,2,12,16,38,32,0,40,2,28,16,56,32,0,16,40,11,246,5,3,8,127,4,125,2,124,35,4,33,5,35,4,65,64,107,36,4,32,0,65,4,106,34,6,40,2,0,179,187,68,24,45,68,84,251,33,25,64,162,32,0,40,2,0,179,187,163,33,15,3,64,32,3,65,8,71,4,64,32,5,32,3,65,3,116,106,67,0,0,72,195,56,2,4,32,5,32,3,65,3,116,106,67,0,0,0,0,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,15,182,33,13,32,0,65,16,106,33,7,32,1,65,4,106,33,8,32,0,65,12,106,33,4,65,0,33,3,3,64,32,3,32,1,40,2,0,73,4,64,32,4,40,2,0,40,2,4,32,3,65,2,116,106,32,7,40,2,0,40,2,4,32,3,65,2,116,106,42,2,0,32,8,40,2,0,32,3,65,2,116,106,42,2,0,148,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,0,40,2,28,32,4,40,2,0,32,0,65,20,106,34,7,40,2,0,16,72,32,0,65,24,106,33,8,32,5,65,4,106,33,4,32,5,65,8,106,33,9,65,0,33,3,32,0,40,2,0,33,1,3,64,32,3,32,1,65,1,118,77,4,64,32,7,40,2,0,34,10,40,2,4,32,3,65,2,116,106,42,2,0,187,68,0,0,0,0,0,0,0,64,162,32,1,179,187,163,182,187,16,36,182,67,0,0,160,65,148,33,12,32,10,40,2,8,32,3,65,2,116,106,42,2,0,34,11,32,8,40,2,0,40,2,4,32,3,65,2,116,106,34,1,42,2,0,147,33,14,32,1,32,11,56,2,0,32,14,32,3,179,34,11,32,13,148,147,187,34,15,68,24,45,68,84,251,33,9,64,160,154,68,24,45,68,84,251,33,25,64,163,182,142,187,68,0,0,0,0,0,0,240,63,160,68,24,45,68,84,251,33,25,64,162,32,15,160,182,33,14,32,11,32,0,40,2,0,34,1,179,32,6,40,2,0,179,149,32,14,148,187,68,24,45,68,84,251,33,25,64,163,182,146,34,11,67,0,0,0,0,94,32,12,32,4,42,2,0,94,113,4,64,32,9,32,5,65,56,16,197,1,26,32,5,32,11,56,2,0,32,4,32,12,56,2,0,11,32,3,65,1,106,33,3,12,1,11,11,32,5,42,2,0,33,12,32,4,42,2,0,33,13,65,0,33,0,65,1,33,3,65,0,33,1,3,64,2,64,32,3,65,8,79,13,0,32,5,32,3,65,3,116,106,42,2,0,34,11,67,0,0,0,0,94,69,13,0,32,5,32,3,65,3,116,106,65,4,106,33,6,65,5,33,4,3,64,32,4,65,1,75,4,64,32,4,183,34,15,68,123,20,174,71,225,122,148,63,160,32,12,32,11,149,187,34,16,100,32,15,68,123,20,174,71,225,122,148,191,160,32,16,99,113,32,4,32,0,74,113,4,64,32,13,32,6,42,2,0,67,0,0,0,63,148,93,4,64,32,4,33,0,32,3,33,1,11,11,32,4,65,127,106,33,4,12,1,11,11,32,3,65,1,106,33,3,12,1,11,11,32,2,65,4,106,34,0,40,2,0,32,5,32,1,65,3,116,106,40,2,0,34,1,54,2,0,32,1,190,67,0,64,156,69,94,69,4,64,32,5,36,4,15,11,32,0,40,2,0,67,0,0,0,0,56,2,0,32,5,36,4,11,114,1,1,127,65,32,16,43,34,2,4,64,32,2,65,124,106,40,2,0,65,3,113,4,64,32,2,65,0,65,32,16,42,26,11,11,32,2,32,0,54,2,0,32,2,32,1,54,2,4,32,2,32,0,16,57,34,1,54,2,28,32,1,4,127,32,2,32,0,16,39,54,2,12,32,2,32,0,16,64,54,2,20,32,2,32,0,16,39,54,2,24,32,2,65,162,47,32,0,16,67,54,2,16,32,2,5,32,2,16,40,65,0,11,11,20,0,32,1,32,2,32,3,32,0,65,3,113,65,16,106,17,9,0,187,11,18,0,32,1,32,2,32,0,65,3,113,65,12,106,17,6,0,187,11,16,0,32,1,32,0,65,7,113,65,4,106,17,0,0,187,11,18,0,32,1,182,32,2,32,3,32,0,65,3,113,17,3,0,187,11,6,0,65,10,16,3,11,6,0,65,9,16,3,11,8,0,65,8,16,3,65,0,11,100,1,1,125,32,0,32,1,32,2,32,0,40,2,40,65,31,113,65,51,106,17,2,0,32,2,65,4,106,33,2,32,1,32,0,42,2,52,16,107,65,1,70,4,64,32,2,40,2,0,67,0,0,0,0,56,2,0,11,32,2,40,2,0,42,2,0,32,0,40,2,8,32,0,40,2,12,32,0,40,2,44,65,3,113,17,3,0,33,3,32,2,40,2,0,32,3,56,2,0,11,11,0,65,2,16,3,67,0,0,0,0,11,11,0,65,1,16,3,67,0,0,0,0,11,11,0,65,0,16,3,67,0,0,0,0,11,19,0,32,1,32,2,32,3,32,0,65,31,113,65,51,106,17,2,0,11,15,0,32,1,32,0,65,3,113,65,47,106,17,11,0,11,218,1,1,1,127,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,0,40,2,0,14,7,0,1,2,3,4,5,6,7,11,32,0,40,2,36,16,38,32,0,40,2,16,34,1,40,2,0,16,38,32,1,16,40,12,7,11,32,0,40,2,24,16,38,32,0,40,2,28,16,85,32,0,40,2,32,16,54,32,0,40,2,20,16,81,32,0,40,2,16,16,167,1,12,6,11,32,0,40,2,36,16,38,32,0,40,2,16,34,1,40,2,8,16,40,32,1,40,2,16,16,40,32,1,16,40,12,5,11,32,0,40,2,36,16,38,32,0,40,2,16,16,174,1,12,4,11,32,0,40,2,36,16,38,32,0,40,2,16,16,152,1,12,3,11,32,0,40,2,36,16,38,32,0,40,2,16,16,156,1,12,2,11,32,0,40,2,36,16,38,32,0,40,2,16,16,161,1,12,1,11,32,0,16,40,15,11,32,0,16,40,11,7,0,65,46,17,8,0,11,23,0,32,1,32,2,32,3,32,4,32,5,32,0,65,1,113,65,44,106,17,10,0,11,21,0,32,1,32,2,32,3,32,4,32,0,65,3,113,65,40,106,17,7,0,11,19,0,32,1,32,2,32,3,32,0,65,7,113,65,32,106,17,5,0,11,17,0,32,1,32,2,32,0,65,3,113,65,28,106,17,1,0,11,15,0,32,1,32,0,65,7,113,65,20,106,17,4,0,11,93,1,1,127,32,1,32,0,72,32,0,32,1,32,2,106,72,113,4,64,32,1,32,2,106,33,1,32,0,34,3,32,2,106,33,0,3,64,32,2,65,0,74,4,64,32,2,65,1,107,33,2,32,0,65,1,107,34,0,32,1,65,1,107,34,1,44,0,0,58,0,0,12,1,11,11,32,3,33,0,5,32,0,32,1,32,2,16,61,26,11,32,0,11,35,1,1,125,32,2,179,32,1,179,149,33,3,32,0,67,0,0,0,0,94,4,125,32,0,5,67,0,0,0,0,11,32,3,148,11,43,0,32,0,65,255,1,113,65,24,116,32,0,65,8,117,65,255,1,113,65,16,116,114,32,0,65,16,117,65,255,1,113,65,8,116,114,32,0,65,24,118,114,11,212,1,1,2,127,2,64,32,1,32,0,115,65,3,113,69,4,64,32,1,65,3,113,4,64,3,64,32,0,32,1,44,0,0,34,2,58,0,0,32,2,69,13,3,32,0,65,1,106,33,0,32,1,65,1,106,34,1,65,3,113,13,0,11,11,32,1,40,2,0,34,2,65,128,129,130,132,120,113,65,128,129,130,132,120,115,32,2,65,255,253,251,119,106,113,69,4,64,3,64,32,0,65,4,106,33,3,32,0,32,2,54,2,0,32,1,65,4,106,34,1,40,2,0,34,2,65,128,129,130,132,120,113,65,128,129,130,132,120,115,32,2,65,255,253,251,119,106,113,4,127,32,3,5,32,3,33,0,12,1,11,33,0,11,11,11,32,0,32,1,44,0,0,34,2,58,0,0,32,2,4,64,3,64,32,0,65,1,106,34,0,32,1,65,1,106,34,1,44,0,0,34,2,58,0,0,32,2,13,0,11,11,11,11,36,1,1,127,35,4,33,3,35,4,65,16,106,36,4,32,3,32,2,54,2,0,32,0,65,164,46,32,3,16,103,26,32,3,36,4,11,131,1,1,3,127,2,64,32,0,34,2,65,3,113,4,64,32,2,34,1,33,0,3,64,32,1,44,0,0,69,13,2,32,1,65,1,106,34,1,34,0,65,3,113,13,0,11,32,1,33,0,11,3,64,32,0,65,4,106,33,1,32,0,40,2,0,34,3,65,128,129,130,132,120,113,65,128,129,130,132,120,115,32,3,65,255,253,251,119,106,113,69,4,64,32,1,33,0,12,1,11,11,32,3,65,255,1,113,4,64,3,64,32,0,65,1,106,34,0,44,0,0,13,0,11,11,11,32,0,32,2,107,11,58,1,2,127,32,0,40,2,16,32,0,65,20,106,34,3,40,2,0,34,4,107,34,0,32,2,75,4,64,32,2,33,0,11,32,4,32,1,32,0,16,61,26,32,3,32,3,40,2,0,32,0,106,54,2,0,32,2,11,107,1,2,127,32,0,65,202,0,106,34,2,44,0,0,33,1,32,2,32,1,65,255,1,106,32,1,114,58,0,0,32,0,40,2,0,34,1,65,8,113,4,127,32,0,32,1,65,32,114,54,2,0,65,127,5,32,0,65,0,54,2,8,32,0,65,0,54,2,4,32,0,32,0,40,2,44,34,1,54,2,28,32,0,32,1,54,2,20,32,0,32,1,32,0,40,2,48,106,54,2,16,65,0,11,34,0,11,7,0,32,0,16,247,1,11,216,1,1,4,127,2,64,2,64,32,2,65,16,106,34,3,40,2,0,34,4,13,0,32,2,16,204,1,69,4,64,32,3,40,2,0,33,4,12,1,11,12,1,11,32,4,32,2,65,20,106,34,5,40,2,0,34,4,107,32,1,73,4,64,32,2,32,0,32,1,32,2,40,2,36,65,7,113,65,32,106,17,5,0,26,12,1,11,2,64,32,2,44,0,75,65,0,72,32,1,69,114,69,4,64,32,1,33,3,3,64,32,0,32,3,65,127,106,34,6,106,44,0,0,65,10,71,4,64,32,6,4,64,32,6,33,3,12,2,5,12,4,11,0,11,11,32,2,32,0,32,3,32,2,40,2,36,65,7,113,65,32,106,17,5,0,32,3,73,13,2,32,0,32,3,106,33,0,32,1,32,3,107,33,1,32,5,40,2,0,33,4,11,11,32,4,32,0,32,1,16,61,26,32,5,32,5,40,2,0,32,1,106,54,2,0,11,11,132,3,1,10,127,32,0,40,2,8,32,0,40,2,0,65,162,218,239,215,6,106,34,5,16,52,33,4,32,0,40,2,12,32,5,16,52,33,3,32,0,40,2,16,32,5,16,52,33,6,2,64,32,4,32,1,65,2,118,73,4,64,32,3,32,1,32,4,65,2,116,107,34,7,73,32,6,32,7,73,113,4,64,32,6,32,3,114,65,3,113,4,64,65,0,33,1,5,32,3,65,2,118,33,9,32,6,65,2,118,33,10,65,0,33,7,3,64,2,64,32,0,32,7,32,4,65,1,118,34,6,106,34,11,65,1,116,34,12,32,9,106,34,3,65,2,116,106,40,2,0,32,5,16,52,33,8,32,0,32,3,65,1,106,65,2,116,106,40,2,0,32,5,16,52,34,3,32,1,73,32,8,32,1,32,3,107,73,113,69,4,64,65,0,33,1,12,6,11,32,0,32,3,32,8,106,106,44,0,0,4,64,65,0,33,1,12,6,11,32,2,32,0,32,3,106,16,41,34,3,69,13,0,32,3,65,0,72,33,3,32,4,65,1,70,4,64,65,0,33,1,12,6,5,32,4,32,6,107,33,4,32,3,69,4,64,32,11,33,7,11,32,3,4,64,32,6,33,4,11,12,2,11,0,11,11,32,0,32,12,32,10,106,34,2,65,2,116,106,40,2,0,32,5,16,52,33,4,32,0,32,2,65,1,106,65,2,116,106,40,2,0,32,5,16,52,34,2,32,1,73,32,4,32,1,32,2,107,73,113,4,64,32,0,32,2,106,33,1,32,0,32,2,32,4,106,106,44,0,0,4,64,65,0,33,1,11,5,65,0,33,1,11,11,5,65,0,33,1,11,5,65,0,33,1,11,11,32,1,11,144,1,1,2,127,2,64,2,64,2,64,3,64,32,2,65,176,14,106,45,0,0,32,0,70,13,1,32,2,65,1,106,34,2,65,215,0,71,13,0,11,65,215,0,33,2,12,1,11,32,2,13,0,65,144,15,33,0,12,1,11,65,144,15,33,0,3,64,32,0,33,3,3,64,32,3,65,1,106,33,0,32,3,44,0,0,4,64,32,0,33,3,12,1,11,11,32,2,65,127,106,34,2,13,0,11,11,32,1,40,2,20,34,1,4,127,32,1,40,2,0,32,1,40,2,4,32,0,16,207,1,5,65,0,11,34,1,4,127,32,1,5,32,0,11,11,162,2,0,2,127,32,0,4,127,32,1,65,128,1,73,4,64,32,0,32,1,58,0,0,65,1,12,2,11,65,136,200,0,40,2,0,69,4,64,32,1,65,128,127,113,65,128,191,3,70,4,64,32,0,32,1,58,0,0,65,1,12,3,5,65,160,200,0,65,212,0,54,2,0,65,127,12,3,11,0,11,32,1,65,128,16,73,4,64,32,0,32,1,65,6,118,65,192,1,114,58,0,0,32,0,32,1,65,63,113,65,128,1,114,58,0,1,65,2,12,2,11,32,1,65,128,176,3,73,32,1,65,128,64,113,65,128,192,3,70,114,4,64,32,0,32,1,65,12,118,65,224,1,114,58,0,0,32,0,32,1,65,6,118,65,63,113,65,128,1,114,58,0,1,32,0,32,1,65,63,113,65,128,1,114,58,0,2,65,3,12,2,11,32,1,65,128,128,124,106,65,128,128,192,0,73,4,127,32,0,32,1,65,18,118,65,240,1,114,58,0,0,32,0,32,1,65,12,118,65,63,113,65,128,1,114,58,0,1,32,0,32,1,65,6,118,65,63,113,65,128,1,114,58,0,2,32,0,32,1,65,63,113,65,128,1,114,58,0,3,65,4,5,65,160,200,0,65,212,0,54,2,0,65,127,11,5,65,1,11,11,11,212,24,3,19,127,3,126,2,124,35,4,33,21,35,4,65,176,4,106,36,4,32,21,65,152,4,106,34,10,65,0,54,2,0,32,1,189,34,25,66,0,83,4,64,32,1,154,34,28,33,1,65,1,33,17,65,172,55,33,15,32,28,189,33,25,5,32,4,65,128,16,113,69,33,7,32,4,65,1,113,4,127,65,178,55,5,65,173,55,11,33,15,32,4,65,129,16,113,65,0,71,33,17,32,7,69,4,64,65,175,55,33,15,11,11,32,21,65,32,106,33,9,32,21,34,14,33,18,32,14,65,156,4,106,34,8,65,12,106,33,16,2,127,32,25,66,128,128,128,128,128,128,128,248,255,0,131,66,128,128,128,128,128,128,128,248,255,0,81,4,127,32,5,65,32,113,65,0,71,34,3,4,127,65,191,55,5,65,195,55,11,33,5,32,1,32,1,98,33,7,32,3,4,127,65,199,55,5,65,203,55,11,33,6,32,0,65,32,32,2,32,17,65,3,106,34,3,32,4,65,255,255,123,113,16,46,32,0,32,15,32,17,16,45,32,0,32,7,4,127,32,6,5,32,5,11,65,3,16,45,32,0,65,32,32,2,32,3,32,4,65,128,192,0,115,16,46,32,3,5,32,1,32,10,16,99,68,0,0,0,0,0,0,0,64,162,34,1,68,0,0,0,0,0,0,0,0,98,34,7,4,64,32,10,32,10,40,2,0,65,127,106,54,2,0,11,32,5,65,32,114,34,13,65,225,0,70,4,64,32,15,65,9,106,33,7,32,5,65,32,113,34,9,4,64,32,7,33,15,11,32,3,65,11,75,65,12,32,3,107,34,7,69,114,69,4,64,68,0,0,0,0,0,0,32,64,33,28,3,64,32,28,68,0,0,0,0,0,0,48,64,162,33,28,32,7,65,127,106,34,7,13,0,11,32,15,44,0,0,65,45,70,4,124,32,28,32,1,154,32,28,161,160,154,5,32,1,32,28,160,32,28,161,11,33,1,11,65,0,32,10,40,2,0,34,6,107,33,7,32,6,65,0,72,4,127,32,7,5,32,6,11,172,32,16,16,58,34,7,32,16,70,4,64,32,8,65,11,106,34,7,65,48,58,0,0,11,32,17,65,2,114,33,8,32,7,65,127,106,32,6,65,31,117,65,2,113,65,43,106,58,0,0,32,7,65,126,106,34,7,32,5,65,15,106,58,0,0,32,3,65,1,72,33,11,32,4,65,8,113,69,33,12,32,14,33,5,3,64,32,5,32,9,32,1,170,34,6,65,160,14,106,45,0,0,114,58,0,0,32,1,32,6,183,161,68,0,0,0,0,0,0,48,64,162,33,1,32,5,65,1,106,34,6,32,18,107,65,1,70,4,127,32,12,32,11,32,1,68,0,0,0,0,0,0,0,0,97,113,113,4,127,32,6,5,32,6,65,46,58,0,0,32,5,65,2,106,11,5,32,6,11,33,5,32,1,68,0,0,0,0,0,0,0,0,98,13,0,11,2,127,2,64,32,3,69,13,0,65,126,32,18,107,32,5,106,32,3,78,13,0,32,3,65,2,106,32,16,106,32,7,107,33,9,32,7,12,1,11,32,16,32,18,107,32,7,107,32,5,106,33,9,32,7,11,33,3,32,0,65,32,32,2,32,9,32,8,106,34,6,32,4,16,46,32,0,32,15,32,8,16,45,32,0,65,48,32,2,32,6,32,4,65,128,128,4,115,16,46,32,0,32,14,32,5,32,18,107,34,5,16,45,32,0,65,48,32,9,32,5,32,16,32,3,107,34,3,106,107,65,0,65,0,16,46,32,0,32,7,32,3,16,45,32,0,65,32,32,2,32,6,32,4,65,128,192,0,115,16,46,32,6,12,2,11,32,7,4,64,32,10,32,10,40,2,0,65,100,106,34,8,54,2,0,32,1,68,0,0,0,0,0,0,176,65,162,33,1,5,32,10,40,2,0,33,8,11,32,9,65,160,2,106,33,7,32,8,65,0,72,4,127,32,9,5,32,7,34,9,11,33,6,3,64,32,6,32,1,171,34,7,54,2,0,32,6,65,4,106,33,6,32,1,32,7,184,161,68,0,0,0,0,101,205,205,65,162,34,1,68,0,0,0,0,0,0,0,0,98,13,0,11,32,8,65,0,74,4,64,32,9,33,7,3,64,32,8,65,29,72,4,127,32,8,5,65,29,11,33,12,32,6,65,124,106,34,8,32,7,79,4,64,32,12,173,33,26,65,0,33,11,3,64,32,8,40,2,0,173,32,26,134,32,11,173,124,34,27,66,128,148,235,220,3,128,33,25,32,8,32,27,32,25,66,128,236,148,163,124,126,124,62,2,0,32,25,167,33,11,32,8,65,124,106,34,8,32,7,79,13,0,11,32,11,4,64,32,7,65,124,106,34,7,32,11,54,2,0,11,11,2,64,32,6,32,7,75,4,64,3,64,32,6,65,124,106,34,8,40,2,0,13,2,32,8,32,7,75,4,127,32,8,33,6,12,1,5,32,8,11,33,6,11,11,11,32,10,32,10,40,2,0,32,12,107,34,8,54,2,0,32,8,65,0,74,13,0,11,5,32,9,33,7,11,32,3,65,0,72,4,127,65,6,5,32,3,11,33,11,32,8,65,0,72,4,64,32,11,65,25,106,65,9,109,65,1,106,33,19,32,13,65,230,0,70,33,22,32,6,33,3,3,64,65,0,32,8,107,34,12,65,9,78,4,64,65,9,33,12,11,32,7,32,3,73,4,127,65,1,32,12,116,65,127,106,33,20,65,128,148,235,220,3,32,12,118,33,23,65,0,33,8,32,7,33,6,3,64,32,6,32,6,40,2,0,34,24,32,12,118,32,8,106,54,2,0,32,24,32,20,113,32,23,108,33,8,32,6,65,4,106,34,6,32,3,73,13,0,11,32,7,65,4,106,33,6,32,7,40,2,0,69,4,64,32,6,33,7,11,32,8,4,127,32,3,32,8,54,2,0,32,3,65,4,106,5,32,3,11,33,6,32,7,5,32,7,65,4,106,33,8,32,3,33,6,32,7,40,2,0,4,127,32,7,5,32,8,11,11,33,3,32,22,4,127,32,9,5,32,3,11,34,7,32,19,65,2,116,106,33,8,32,6,32,7,107,65,2,117,32,19,74,4,64,32,8,33,6,11,32,10,32,10,40,2,0,32,12,106,34,8,54,2,0,32,8,65,0,72,4,127,32,3,33,7,32,6,33,3,12,1,5,32,6,11,33,8,11,5,32,7,33,3,32,6,33,8,11,32,9,33,12,32,3,32,8,73,4,64,32,12,32,3,107,65,2,117,65,9,108,33,7,32,3,40,2,0,34,9,65,10,79,4,64,65,10,33,6,3,64,32,7,65,1,106,33,7,32,9,32,6,65,10,108,34,6,79,13,0,11,11,5,65,0,33,7,11,32,13,65,231,0,70,33,19,32,11,65,0,71,33,22,32,11,32,13,65,230,0,70,4,127,65,0,5,32,7,11,107,32,22,32,19,113,65,31,116,65,31,117,106,34,6,32,8,32,12,107,65,2,117,65,9,108,65,119,106,72,4,127,32,6,65,128,200,0,106,34,6,65,9,109,33,13,32,6,32,13,65,119,108,106,34,6,65,8,72,4,64,65,10,33,9,3,64,32,6,65,1,106,33,10,32,9,65,10,108,33,9,32,6,65,7,72,4,64,32,10,33,6,12,1,11,11,5,65,10,33,9,11,32,12,32,13,65,2,116,106,65,132,96,106,34,6,40,2,0,34,13,32,9,110,34,20,32,9,108,33,10,32,6,65,4,106,32,8,70,34,23,32,13,32,10,107,34,13,69,113,69,4,64,32,20,65,1,113,4,124,68,1,0,0,0,0,0,64,67,5,68,0,0,0,0,0,0,64,67,11,33,29,32,13,32,9,65,1,118,34,20,73,33,24,32,23,32,13,32,20,70,113,4,124,68,0,0,0,0,0,0,240,63,5,68,0,0,0,0,0,0,248,63,11,33,1,32,24,4,64,68,0,0,0,0,0,0,224,63,33,1,11,32,17,4,64,32,29,154,33,28,32,15,44,0,0,65,45,70,34,13,4,64,32,28,33,29,11,32,1,154,33,28,32,13,69,4,64,32,1,33,28,11,5,32,1,33,28,11,32,6,32,10,54,2,0,32,29,34,1,32,28,160,32,1,98,4,64,32,6,32,10,32,9,106,34,7,54,2,0,32,7,65,255,147,235,220,3,75,4,64,3,64,32,6,65,0,54,2,0,32,6,65,124,106,34,6,32,3,73,4,64,32,3,65,124,106,34,3,65,0,54,2,0,11,32,6,32,6,40,2,0,65,1,106,34,7,54,2,0,32,7,65,255,147,235,220,3,75,13,0,11,11,32,12,32,3,107,65,2,117,65,9,108,33,7,32,3,40,2,0,34,10,65,10,79,4,64,65,10,33,9,3,64,32,7,65,1,106,33,7,32,10,32,9,65,10,108,34,9,79,13,0,11,11,11,11,32,7,33,9,32,8,32,6,65,4,106,34,7,77,4,64,32,8,33,7,11,32,3,5,32,7,33,9,32,8,33,7,32,3,11,33,6,65,0,32,9,107,33,20,2,64,32,7,32,6,75,4,64,3,64,32,7,65,124,106,34,3,40,2,0,4,64,65,1,33,10,12,3,11,32,3,32,6,75,4,127,32,3,33,7,12,1,5,65,0,33,10,32,3,11,33,7,11,5,65,0,33,10,11,11,32,19,4,64,32,11,32,22,65,1,115,106,34,3,32,9,74,32,9,65,123,74,113,4,127,32,5,65,127,106,33,5,32,3,65,127,106,32,9,107,5,32,5,65,126,106,33,5,32,3,65,127,106,11,33,3,32,4,65,8,113,69,4,64,32,10,4,64,32,7,65,124,106,40,2,0,34,13,4,64,32,13,65,10,112,4,64,65,0,33,8,5,65,0,33,8,65,10,33,11,3,64,32,8,65,1,106,33,8,32,13,32,11,65,10,108,34,11,112,69,13,0,11,11,5,65,9,33,8,11,5,65,9,33,8,11,32,7,32,12,107,65,2,117,65,9,108,65,119,106,33,11,32,5,65,32,114,65,230,0,70,4,64,32,3,32,11,32,8,107,34,8,65,0,74,4,127,32,8,5,65,0,34,8,11,78,4,64,32,8,33,3,11,5,32,3,32,11,32,9,106,32,8,107,34,8,65,0,74,4,127,32,8,5,65,0,34,8,11,78,4,64,32,8,33,3,11,11,11,5,32,11,33,3,11,32,5,65,32,114,65,230,0,70,34,13,4,64,65,0,33,8,32,9,65,0,76,4,64,65,0,33,9,11,5,32,16,32,9,65,0,72,4,127,32,20,5,32,9,11,172,32,16,16,58,34,8,107,65,2,72,4,64,3,64,32,8,65,127,106,34,8,65,48,58,0,0,32,16,32,8,107,65,2,72,13,0,11,11,32,8,65,127,106,32,9,65,31,117,65,2,113,65,43,106,58,0,0,32,8,65,126,106,34,8,32,5,58,0,0,32,16,32,8,107,33,9,11,32,4,65,3,118,65,1,113,33,5,32,0,65,32,32,2,32,17,65,1,106,32,3,106,32,3,65,0,71,34,19,4,127,65,1,5,32,5,11,106,32,9,106,34,11,32,4,16,46,32,0,32,15,32,17,16,45,32,0,65,48,32,2,32,11,32,4,65,128,128,4,115,16,46,32,13,4,64,32,14,65,9,106,34,16,33,15,32,14,65,8,106,33,9,32,6,32,12,75,4,127,32,12,5,32,6,11,34,8,33,6,3,64,32,6,40,2,0,173,32,16,16,58,33,5,32,6,32,8,70,4,64,32,5,32,16,70,4,64,32,9,65,48,58,0,0,32,9,33,5,11,5,32,5,32,14,75,4,64,32,14,65,48,32,5,32,18,107,16,42,26,3,64,32,5,65,127,106,34,5,32,14,75,13,0,11,11,11,32,0,32,5,32,15,32,5,107,16,45,32,6,65,4,106,34,5,32,12,77,4,64,32,5,33,6,12,1,11,11,32,4,65,8,113,69,32,19,65,1,115,113,69,4,64,32,0,65,207,55,65,1,16,45,11,32,5,32,7,73,32,3,65,0,74,113,4,64,3,64,32,5,40,2,0,173,32,16,16,58,34,6,32,14,75,4,64,32,14,65,48,32,6,32,18,107,16,42,26,3,64,32,6,65,127,106,34,6,32,14,75,13,0,11,11,32,0,32,6,32,3,65,9,72,4,127,32,3,5,65,9,11,16,45,32,3,65,119,106,33,6,32,5,65,4,106,34,5,32,7,73,32,3,65,9,74,113,4,127,32,6,33,3,12,1,5,32,6,11,33,3,11,11,32,0,65,48,32,3,65,9,106,65,9,65,0,16,46,5,32,6,65,4,106,33,5,32,6,32,10,4,127,32,7,5,32,5,11,34,12,73,32,3,65,127,74,113,4,64,32,4,65,8,113,69,33,17,32,14,65,9,106,34,10,33,13,65,0,32,18,107,33,18,32,14,65,8,106,33,15,32,3,33,5,32,6,33,7,3,64,32,7,40,2,0,173,32,10,16,58,34,3,32,10,70,4,64,32,15,65,48,58,0,0,32,15,33,3,11,2,64,32,7,32,6,70,4,64,32,3,65,1,106,33,9,32,0,32,3,65,1,16,45,32,17,32,5,65,1,72,113,4,64,32,9,33,3,12,2,11,32,0,65,207,55,65,1,16,45,32,9,33,3,5,32,3,32,14,77,13,1,32,14,65,48,32,3,32,18,106,16,42,26,3,64,32,3,65,127,106,34,3,32,14,75,13,0,11,11,11,32,0,32,3,32,5,32,13,32,3,107,34,3,74,4,127,32,3,5,32,5,11,16,45,32,7,65,4,106,34,7,32,12,73,32,5,32,3,107,34,5,65,127,74,113,13,0,11,32,5,33,3,11,32,0,65,48,32,3,65,18,106,65,18,65,0,16,46,32,0,32,8,32,16,32,8,107,16,45,11,32,0,65,32,32,2,32,11,32,4,65,128,192,0,115,16,46,32,11,11,11,33,0,32,21,36,4,32,0,32,2,72,4,127,32,2,5,32,0,11,11,4,0,32,0,11,192,1,1,1,127,2,64,32,1,65,0,71,34,2,32,0,65,3,113,65,0,71,113,4,64,3,64,32,0,44,0,0,69,13,2,32,1,65,127,106,34,1,65,0,71,34,2,32,0,65,1,106,34,0,65,3,113,65,0,71,113,13,0,11,11,2,64,32,2,4,64,32,0,44,0,0,69,4,64,32,1,69,13,2,12,3,11,2,64,32,1,65,3,75,4,64,3,64,32,0,40,2,0,34,2,65,128,129,130,132,120,113,65,128,129,130,132,120,115,32,2,65,255,253,251,119,106,113,13,2,32,0,65,4,106,33,0,32,1,65,124,106,34,1,65,3,75,13,0,11,11,32,1,69,13,2,11,3,64,32,0,44,0,0,69,13,3,32,0,65,1,106,33,0,32,1,65,127,106,34,1,13,0,11,11,11,65,0,33,0,11,32,0,11,46,0,32,0,66,0,82,4,64,3,64,32,1,65,127,106,34,1,32,0,167,65,7,113,65,48,114,58,0,0,32,0,66,3,136,34,0,66,0,82,13,0,11,11,32,1,11,53,0,32,0,66,0,82,4,64,3,64,32,1,65,127,106,34,1,32,0,167,65,15,113,65,160,14,106,45,0,0,32,2,114,58,0,0,32,0,66,4,136,34,0,66,0,82,13,0,11,11,32,1,11,100,1,2,127,35,4,33,3,35,4,65,32,106,36,4,32,3,65,16,106,33,4,32,0,65,1,54,2,36,32,0,40,2,0,65,192,0,113,69,4,64,32,3,32,0,40,2,60,54,2,0,32,3,65,147,168,1,54,2,4,32,3,32,4,54,2,8,65,54,32,3,16,10,4,64,32,0,65,127,58,0,75,11,11,32,0,32,1,32,2,16,105,33,0,32,3,36,4,32,0,11,120,1,1,127,35,4,33,3,35,4,65,32,106,36,4,32,3,32,0,40,2,60,54,2,0,32,3,65,0,54,2,4,32,3,32,1,54,2,8,32,3,32,3,65,20,106,34,0,54,2,12,32,3,32,2,54,2,16,65,140,1,32,3,16,8,34,1,65,128,96,75,4,127,65,160,200,0,65,0,32,1,107,54,2,0,65,127,5,32,1,11,65,0,72,4,127,32,0,65,127,54,2,0,65,127,5,32,0,40,2,0,11,33,0,32,3,36,4,32,0,11,62,1,1,127,35,4,33,1,35,4,65,16,106,36,4,32,1,32,0,40,2,60,54,2,0,65,6,32,1,16,11,34,0,65,128,96,75,4,64,65,160,200,0,65,0,32,0,107,54,2,0,65,127,33,0,11,32,1,36,4,32,0,11,104,1,3,127,35,4,33,1,35,4,65,224,0,106,36,4,32,1,65,208,0,106,34,2,32,0,54,2,0,35,4,33,0,35,4,65,16,106,36,4,32,0,32,2,54,2,0,32,1,65,255,255,255,255,7,65,152,55,32,0,16,104,32,0,36,4,32,1,34,0,16,202,1,65,1,106,34,2,16,43,34,3,4,127,32,3,32,0,32,2,16,61,5,65,0,11,33,0,32,1,36,4,32,0,11,190,3,0,65,182,200,0,65,251,48,16,22,65,183,200,0,65,128,49,65,1,65,1,65,0,16,12,65,184,200,0,65,133,49,65,1,65,128,127,65,255,0,16,18,65,185,200,0,65,138,49,65,1,65,128,127,65,255,0,16,18,65,186,200,0,65,150,49,65,1,65,0,65,255,1,16,18,65,187,200,0,65,164,49,65,2,65,128,128,126,65,255,255,1,16,18,65,188,200,0,65,170,49,65,2,65,0,65,255,255,3,16,18,65,171,200,0,65,185,49,65,4,65,128,128,128,128,120,65,255,255,255,255,7,16,18,65,174,200,0,65,189,49,65,4,65,0,65,127,16,18,65,189,200,0,65,202,49,65,4,65,128,128,128,128,120,65,255,255,255,255,7,16,18,65,190,200,0,65,207,49,65,4,65,0,65,127,16,18,65,172,200,0,65,221,49,65,4,16,17,65,191,200,0,65,227,49,65,8,16,17,65,181,200,0,65,234,49,16,20,65,192,200,0,65,246,49,16,20,65,193,200,0,65,4,65,151,50,16,21,65,173,200,0,65,164,50,16,16,65,194,200,0,65,0,65,180,50,16,19,65,195,200,0,65,0,65,210,50,16,19,65,196,200,0,65,1,65,247,50,16,19,65,197,200,0,65,2,65,158,51,16,19,65,198,200,0,65,3,65,189,51,16,19,65,199,200,0,65,4,65,229,51,16,19,65,200,200,0,65,5,65,130,52,16,19,65,201,200,0,65,4,65,168,52,16,19,65,202,200,0,65,5,65,198,52,16,19,65,195,200,0,65,0,65,237,52,16,19,65,196,200,0,65,1,65,141,53,16,19,65,197,200,0,65,2,65,174,53,16,19,65,198,200,0,65,3,65,207,53,16,19,65,199,200,0,65,4,65,241,53,16,19,65,200,200,0,65,5,65,146,54,16,19,65,203,200,0,65,6,65,180,54,16,19,65,204,200,0,65,7,65,211,54,16,19,65,205,200,0,65,7,65,243,54,16,19,11,189,1,3,5,127,1,125,1,124,35,4,33,4,35,4,65,16,106,36,4,32,0,65,4,106,34,5,40,2,0,34,2,40,2,0,4,64,65,0,33,2,3,64,32,1,40,2,0,33,3,32,4,32,2,54,2,0,32,3,65,171,200,0,32,4,16,32,34,6,16,25,33,3,32,6,16,24,32,3,65,172,200,0,32,4,16,23,33,8,32,4,40,2,0,16,30,32,5,40,2,0,40,2,4,32,2,65,2,116,106,32,8,182,56,2,0,32,3,16,24,32,2,65,1,106,34,2,32,5,40,2,0,34,3,40,2,0,73,13,0,11,32,3,33,1,5,32,2,33,1,11,32,0,40,2,0,32,1,32,0,65,8,106,34,0,40,2,0,16,184,1,32,0,40,2,0,40,2,4,42,2,0,33,7,32,4,36,4,32,7,11,167,1,1,3,127,35,4,33,4,35,4,65,16,106,36,4,65,12,16,48,33,5,32,4,32,0,41,2,0,55,2,0,32,4,32,0,40,2,8,54,2,8,32,0,66,0,55,2,0,32,0,65,0,54,2,8,32,1,40,2,0,33,0,32,2,40,2,0,33,1,32,3,40,2,0,33,2,32,5,65,1,16,39,54,2,8,32,5,32,0,16,39,54,2,4,32,4,40,2,0,33,3,32,5,32,4,65,11,106,34,6,44,0,0,65,0,72,4,127,32,3,5,32,4,11,32,0,32,1,32,2,16,149,2,54,2,0,32,6,44,0,0,65,0,78,4,64,32,4,36,4,32,5,15,11,32,4,40,2,0,16,40,32,4,36,4,32,5,11,72,1,1,125,32,0,32,1,16,59,32,0,40,2,16,32,0,40,2,36,32,2,16,162,1,32,2,40,2,4,34,1,42,2,0,34,3,67,0,0,0,0,94,69,4,64,32,1,67,0,0,0,0,56,2,0,15,11,32,1,32,0,40,2,8,179,32,3,149,56,2,0,11,130,2,1,7,127,35,4,33,7,35,4,65,32,106,36,4,32,1,40,2,0,33,6,32,7,65,12,106,34,5,66,0,55,2,0,32,5,65,0,54,2,8,32,6,65,111,75,4,64,16,33,11,32,7,65,8,106,33,9,32,7,65,4,106,33,10,32,1,65,4,106,33,11,2,64,2,64,32,6,65,11,73,4,127,32,5,65,11,106,34,8,32,6,58,0,0,32,6,4,127,32,5,33,1,12,2,5,32,5,11,5,32,5,32,6,65,16,106,65,112,113,34,8,16,48,34,1,54,2,0,32,5,32,8,65,128,128,128,128,120,114,54,2,8,32,5,32,6,54,2,4,32,5,65,11,106,33,8,12,1,11,33,1,12,1,11,32,1,32,11,32,6,16,61,26,11,32,1,32,6,106,65,0,58,0,0,32,9,32,2,54,2,0,32,10,32,3,54,2,0,32,7,32,4,54,2,0,32,5,32,9,32,10,32,7,32,0,65,3,113,65,40,106,17,7,0,33,0,32,8,44,0,0,65,0,78,4,64,32,7,36,4,32,0,15,11,32,5,40,2,0,16,40,32,7,36,4,32,0,11,35,0,32,0,69,4,64,15,11,32,0,40,2,0,16,190,1,32,0,40,2,4,16,38,32,0,40,2,8,16,38,32,0,16,40,11,6,0,65,178,200,0,11,102,1,1,127,65,178,200,0,65,179,200,0,65,180,200,0,65,0,65,138,48,65,5,65,141,48,65,0,65,141,48,65,0,65,235,48,65,147,48,65,3,16,13,65,178,200,0,65,5,65,176,10,65,241,48,65,1,65,2,16,14,65,8,16,48,34,0,65,3,54,2,0,32,0,65,0,54,2,4,65,178,200,0,65,248,48,65,3,65,232,29,65,197,48,65,2,32,0,65,0,16,15,11,13,0,32,0,40,2,0,40,2,12,16,146,2,11,60,1,1,127,32,0,40,2,0,33,2,32,1,32,0,40,2,4,34,1,65,1,117,106,33,0,32,1,65,1,113,4,64,32,0,40,2,0,32,2,106,40,2,0,33,2,11,32,0,32,2,65,7,113,65,4,106,17,0,0,11,58,1,1,125,2,125,67,0,0,0,0,32,0,40,2,0,40,2,12,34,0,42,2,72,34,1,67,0,0,0,0,91,13,0,26,67,0,0,112,66,32,0,40,2,0,179,32,1,148,32,0,40,2,4,179,149,149,11,11,189,1,3,5,127,1,125,1,124,35,4,33,4,35,4,65,16,106,36,4,32,0,65,4,106,34,5,40,2,0,34,2,40,2,0,4,64,65,0,33,2,3,64,32,1,40,2,0,33,3,32,4,32,2,54,2,0,32,3,65,171,200,0,32,4,16,32,34,6,16,25,33,3,32,6,16,24,32,3,65,172,200,0,32,4,16,23,33,8,32,4,40,2,0,16,30,32,5,40,2,0,40,2,4,32,2,65,2,116,106,32,8,182,56,2,0,32,3,16,24,32,2,65,1,106,34,2,32,5,40,2,0,34,3,40,2,0,73,13,0,11,32,3,33,1,5,32,2,33,1,11,32,0,40,2,0,32,1,32,0,65,8,106,34,0,40,2,0,16,145,2,32,0,40,2,0,40,2,4,42,2,0,33,7,32,4,36,4,32,7,11,65,1,2,127,65,12,16,48,33,3,32,0,40,2,0,33,4,32,1,40,2,0,33,0,32,2,40,2,0,33,1,32,3,65,1,16,39,54,2,8,32,3,32,0,16,39,54,2,4,32,3,32,4,32,0,32,1,16,144,2,54,2,0,32,3,11,84,1,1,125,32,0,32,1,16,59,32,0,40,2,16,32,0,40,2,36,32,2,16,155,1,32,2,40,2,4,34,1,42,2,0,34,3,67,0,0,0,0,94,69,4,64,32,1,67,0,0,0,0,56,2,0,15,11,32,1,32,0,40,2,8,184,32,3,187,68,0,0,0,0,0,0,0,0,160,163,182,56,2,0,11,71,1,2,127,35,4,33,4,35,4,65,16,106,36,4,32,4,65,8,106,34,5,32,1,54,2,0,32,4,65,4,106,34,1,32,2,54,2,0,32,4,32,3,54,2,0,32,5,32,1,32,4,32,0,65,7,113,65,32,106,17,5,0,33,0,32,4,36,4,32,0,11,35,0,32,0,69,4,64,15,11,32,0,40,2,0,16,143,2,32,0,40,2,4,16,38,32,0,40,2,8,16,38,32,0,16,40,11,6,0,65,175,200,0,11,184,1,1,1,127,65,175,200,0,65,176,200,0,65,177,200,0,65,0,65,138,48,65,4,65,141,48,65,0,65,141,48,65,0,65,185,48,65,147,48,65,2,16,13,65,175,200,0,65,4,65,160,10,65,191,48,65,1,65,6,16,14,65,8,16,48,34,0,65,1,54,2,0,32,0,65,0,54,2,4,65,175,200,0,65,248,48,65,3,65,212,29,65,197,48,65,1,32,0,65,0,16,15,65,8,16,48,34,0,65,6,54,2,0,32,0,65,0,54,2,4,65,175,200,0,65,202,48,65,2,65,224,29,65,209,48,65,2,32,0,65,0,16,15,65,8,16,48,34,0,65,7,54,2,0,32,0,65,0,54,2,4,65,175,200,0,65,213,48,65,2,65,224,29,65,209,48,65,2,32,0,65,0,16,15,11,192,3,2,9,127,1,124,35,4,33,3,35,4,65,16,106,36,4,32,1,65,4,106,34,7,40,2,0,40,2,0,16,64,33,5,32,2,40,2,0,65,175,48,16,28,34,4,16,25,33,8,32,4,16,24,32,2,40,2,0,65,180,48,16,28,34,2,16,25,33,9,32,2,16,24,32,7,40,2,0,40,2,0,4,64,32,5,65,4,106,33,10,32,5,65,8,106,33,6,65,0,33,2,3,64,32,3,32,2,54,2,0,32,8,65,171,200,0,32,3,16,32,34,11,16,25,33,4,32,11,16,24,32,4,65,172,200,0,32,3,16,23,33,12,32,3,40,2,0,16,30,32,10,40,2,0,32,2,65,2,116,106,32,12,182,56,2,0,32,4,16,24,32,3,32,2,54,2,0,32,9,65,171,200,0,32,3,16,32,34,11,16,25,33,4,32,11,16,24,32,4,65,172,200,0,32,3,16,23,33,12,32,3,40,2,0,16,30,32,6,40,2,0,32,2,65,2,116,106,32,12,182,56,2,0,32,4,16,24,32,2,65,1,106,34,2,32,7,40,2,0,40,2,0,34,4,73,13,0,11,32,4,33,2,5,65,0,33,2,11,32,2,16,39,33,2,2,64,32,1,40,2,0,32,5,32,2,16,148,1,11,32,0,16,27,34,4,54,2,0,32,7,40,2,0,40,2,0,69,4,64,32,2,16,38,32,5,16,54,32,9,16,24,32,8,16,24,32,3,36,4,15,11,32,2,65,4,106,33,10,65,0,33,0,3,64,32,10,40,2,0,32,0,65,2,116,106,33,6,32,3,32,0,54,2,0,65,171,200,0,32,3,16,32,33,1,32,3,32,6,40,2,0,54,2,0,32,4,32,1,65,172,200,0,32,3,16,32,34,6,16,31,32,6,16,24,32,1,16,24,32,0,65,1,106,34,0,32,7,40,2,0,40,2,0,73,13,0,11,32,2,16,38,32,5,16,54,32,9,16,24,32,8,16,24,32,3,36,4,11,116,1,2,127,35,4,33,3,35,4,65,16,106,36,4,32,0,40,2,0,33,4,32,1,32,0,40,2,4,34,1,65,1,117,106,33,0,32,1,65,1,113,4,64,32,0,40,2,0,32,4,106,40,2,0,33,4,11,32,3,32,2,54,2,0,32,3,65,4,106,34,1,32,0,32,3,32,4,65,31,113,65,51,106,17,2,0,32,1,40,2,0,16,26,32,1,40,2,0,34,0,16,24,32,3,40,2,0,16,24,32,3,36,4,32,0,11,220,3,2,7,127,1,124,35,4,33,3,35,4,65,16,106,36,4,32,1,65,4,106,34,7,40,2,0,40,2,0,16,64,33,8,32,7,40,2,0,34,4,40,2,0,4,64,65,0,33,4,3,64,32,2,40,2,0,33,5,32,3,32,4,54,2,0,32,5,65,171,200,0,32,3,16,32,34,9,16,25,33,5,32,9,16,24,32,5,65,172,200,0,32,3,16,23,33,10,32,3,40,2,0,16,30,32,7,40,2,0,40,2,4,32,4,65,2,116,106,32,10,182,56,2,0,32,5,16,24,32,4,65,1,106,34,4,32,7,40,2,0,34,5,40,2,0,73,13,0,11,32,5,33,2,5,32,4,33,2,11,32,1,40,2,0,32,2,32,8,16,72,32,0,16,29,34,0,54,2,0,16,27,33,1,32,0,65,175,48,16,28,34,2,32,1,16,31,32,2,16,24,32,1,16,24,16,27,33,1,32,0,65,180,48,16,28,34,2,32,1,16,31,32,2,16,24,32,1,16,24,32,0,65,175,48,16,28,34,2,16,25,33,1,32,2,16,24,32,0,65,180,48,16,28,34,0,16,25,33,2,32,0,16,24,32,7,40,2,0,40,2,0,69,4,64,32,8,16,54,32,2,16,24,32,1,16,24,32,3,36,4,15,11,32,8,65,4,106,33,5,32,8,65,8,106,33,9,65,0,33,0,3,64,32,5,40,2,0,32,0,65,2,116,106,33,6,32,3,32,0,54,2,0,65,171,200,0,32,3,16,32,33,4,32,3,32,6,40,2,0,54,2,0,32,1,32,4,65,172,200,0,32,3,16,32,34,6,16,31,32,6,16,24,32,4,16,24,32,9,40,2,0,32,0,65,2,116,106,33,6,32,3,32,0,54,2,0,65,171,200,0,32,3,16,32,33,4,32,3,32,6,40,2,0,54,2,0,32,2,32,4,65,172,200,0,32,3,16,32,34,6,16,31,32,6,16,24,32,4,16,24,32,0,65,1,106,34,0,32,7,40,2,0,40,2,0,73,13,0,11,32,8,16,54,32,2,16,24,32,1,16,24,32,3,36,4,11,33,1,1,127,65,8,16,48,34,1,32,0,40,2,0,34,0,16,39,54,2,4,32,1,32,0,16,57,54,2,0,32,1,11,43,1,1,127,35,4,33,2,35,4,65,16,106,36,4,32,2,32,1,54,2,0,32,2,32,0,65,7,113,65,20,106,17,4,0,33,0,32,2,36,4,32,0,11,27,0,32,0,69,4,64,15,11,32,0,40,2,0,16,56,32,0,40,2,4,16,38,32,0,16,40,11,84,1,1,125,32,0,32,1,16,59,32,0,40,2,16,32,0,40,2,36,32,2,16,153,1,32,2,40,2,4,34,1,42,2,0,34,3,67,0,0,0,0,94,69,4,64,32,1,67,0,0,0,0,56,2,0,15,11,32,1,32,0,40,2,8,184,32,3,187,68,0,0,0,0,0,0,0,0,160,163,182,56,2,0,11,6,0,65,168,200,0,11,143,1,1,1,127,65,168,200,0,65,169,200,0,65,170,200,0,65,0,65,138,48,65,2,65,141,48,65,0,65,141,48,65,0,65,143,48,65,147,48,65,1,16,13,65,168,200,0,65,2,65,192,29,65,150,48,65,2,65,3,16,14,65,8,16,48,34,0,65,24,54,2,0,32,0,65,0,54,2,4,65,168,200,0,65,154,48,65,3,65,200,29,65,162,48,65,5,32,0,65,0,16,15,65,8,16,48,34,0,65,25,54,2,0,32,0,65,0,54,2,4,65,168,200,0,65,167,48,65,3,65,200,29,65,162,48,65,5,32,0,65,0,16,15,11,108,2,2,127,1,125,3,64,32,3,32,0,71,4,64,67,0,0,0,0,33,5,32,3,33,4,3,64,32,4,32,0,73,4,64,32,5,32,1,32,4,32,3,107,65,2,116,106,42,2,0,32,1,32,4,65,2,116,106,42,2,0,148,146,33,5,32,4,65,1,106,33,4,12,1,11,11,32,2,32,3,65,2,116,106,32,5,32,0,32,3,107,179,149,56,2,0,32,3,65,1,106,33,3,12,1,11,11,11,64,0,32,0,67,0,0,0,64,93,32,0,67,0,80,195,71,94,114,4,64,67,0,0,0,0,15,11,32,0,67,0,0,220,64,149,187,16,2,182,187,68,25,58,250,254,66,46,230,63,163,182,67,0,0,64,65,148,67,0,0,64,192,146,11,142,1,2,2,127,1,125,32,1,187,68,0,0,0,0,0,0,224,191,160,171,33,2,32,0,40,2,0,179,32,1,95,32,1,67,0,0,0,0,93,114,4,64,67,0,0,0,0,15,11,32,0,40,2,4,33,0,32,2,65,1,106,34,3,179,34,4,32,1,91,4,125,32,0,32,3,65,2,116,106,42,2,0,5,32,0,32,3,65,2,116,106,42,2,0,187,32,0,32,2,65,2,116,106,42,2,0,32,0,32,2,65,2,106,65,2,116,106,42,2,0,147,187,68,0,0,0,0,0,0,208,63,162,32,1,32,4,147,187,162,161,182,11,11,213,2,1,4,127,32,1,40,2,4,33,6,32,2,32,3,106,65,1,106,33,7,32,0,40,2,0,33,8,32,2,65,1,106,34,5,32,4,75,4,64,32,5,32,4,107,33,3,65,0,33,5,3,64,32,5,32,3,71,4,64,32,6,32,5,65,2,116,106,67,0,0,0,0,56,2,0,32,5,65,1,106,33,5,12,1,11,11,32,0,65,4,106,33,0,3,64,32,3,32,7,73,4,64,32,6,32,3,65,2,116,106,32,0,40,2,0,32,3,32,4,106,32,2,107,65,2,116,106,40,2,0,54,2,0,32,3,65,1,106,33,3,12,1,11,11,32,1,16,65,15,11,32,4,32,3,106,32,8,73,4,64,32,0,65,4,106,33,0,65,0,33,3,3,64,32,3,32,7,71,4,64,32,6,32,3,65,2,116,106,32,0,40,2,0,32,3,32,4,106,32,2,107,65,2,116,106,40,2,0,54,2,0,32,3,65,1,106,33,3,12,1,11,11,32,1,16,65,15,11,32,8,32,4,107,32,2,106,33,3,32,0,65,4,106,33,0,65,0,33,5,3,64,32,5,32,3,71,4,64,32,6,32,5,65,2,116,106,32,0,40,2,0,32,5,32,4,106,32,2,107,65,2,116,106,40,2,0,54,2,0,32,5,65,1,106,33,5,12,1,11,11,3,64,32,3,32,7,73,4,64,32,6,32,3,65,2,116,106,67,0,0,0,0,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,1,16,65,11,72,1,1,125,32,0,32,1,16,59,32,0,40,2,16,32,0,40,2,36,32,2,16,165,1,32,2,40,2,4,34,1,42,2,0,34,3,67,0,0,0,0,94,69,4,64,32,1,67,0,0,0,0,56,2,0,15,11,32,1,32,0,40,2,8,179,32,3,149,56,2,0,11,79,2,4,127,1,125,32,0,40,2,0,33,5,32,0,65,4,106,33,6,3,64,32,4,32,5,71,4,64,32,0,32,1,32,2,32,3,32,4,16,249,1,33,8,32,6,40,2,0,32,4,65,2,116,106,34,7,32,7,42,2,0,32,8,147,56,2,0,32,4,65,1,106,33,4,12,1,11,11,11,67,1,3,127,32,0,32,1,16,253,1,33,1,32,0,65,4,106,33,3,3,64,32,2,32,0,40,2,0,73,4,64,32,3,40,2,0,32,2,65,2,116,106,34,4,32,4,42,2,0,32,1,149,56,2,0,32,2,65,1,106,33,2,12,1,11,11,11,90,2,2,127,1,125,32,0,40,2,0,33,2,32,0,65,4,106,33,3,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,3,40,2,0,32,0,65,2,116,106,42,2,0,139,187,32,1,187,16,0,182,146,33,4,32,0,65,1,106,33,0,12,1,11,11,32,4,32,2,179,149,187,67,0,0,128,63,32,1,149,187,16,0,182,11,76,2,2,127,2,125,32,0,40,2,0,33,1,32,0,65,4,106,33,2,65,0,33,0,3,64,32,0,32,1,71,4,64,32,2,40,2,0,32,0,65,2,116,106,42,2,0,33,4,32,0,65,1,106,33,0,32,3,32,4,32,4,148,146,33,3,12,1,11,11,32,3,32,1,179,149,11,79,1,4,127,32,0,65,4,106,33,4,3,64,32,4,40,2,0,33,3,32,2,32,0,40,2,0,65,127,106,34,5,73,4,64,32,3,32,2,65,2,116,106,32,3,32,2,65,1,106,34,2,65,2,116,106,40,2,0,54,2,0,12,1,11,11,32,3,32,5,65,2,116,106,32,1,56,2,0,11,208,1,1,7,127,32,0,40,2,0,34,1,65,1,118,34,6,32,1,65,126,113,32,1,73,34,3,106,33,7,32,0,65,4,106,33,1,65,0,33,0,3,64,32,0,32,6,71,4,64,32,1,40,2,0,34,2,32,0,65,2,116,106,34,4,40,2,0,33,5,32,4,32,2,32,0,32,7,106,34,2,65,2,116,106,40,2,0,54,2,0,32,1,40,2,0,32,2,65,2,116,106,32,5,54,2,0,32,0,65,1,106,33,0,12,1,11,11,32,3,69,4,64,15,11,65,0,33,0,3,64,32,0,32,6,71,4,64,32,1,40,2,0,34,2,32,0,32,7,106,34,3,65,127,106,65,2,116,106,34,4,40,2,0,33,5,32,4,32,2,32,3,65,2,116,106,40,2,0,54,2,0,32,1,40,2,0,32,3,65,2,116,106,32,5,54,2,0,32,0,65,1,106,33,0,12,1,11,11,11,73,1,1,125,32,0,32,1,16,59,32,0,40,2,16,32,0,40,2,36,32,2,16,175,1,32,2,40,2,4,34,1,32,0,40,2,8,179,32,0,40,2,12,179,149,32,1,42,2,0,34,3,67,0,0,0,0,94,4,125,32,3,5,67,0,0,0,0,11,148,56,2,0,11,75,2,2,127,2,125,32,0,40,2,0,33,1,32,0,40,2,4,34,2,42,2,0,33,3,65,1,33,0,3,64,32,0,32,1,73,4,64,32,3,32,2,32,0,65,2,116,106,42,2,0,34,4,94,69,4,64,32,4,33,3,11,32,0,65,1,106,33,0,12,1,11,11,32,3,11,69,2,2,127,1,125,32,0,40,2,0,33,1,32,0,65,4,106,33,2,65,0,33,0,3,64,32,0,32,1,71,4,64,32,3,32,2,40,2,0,32,0,65,2,116,106,42,2,0,146,33,3,32,0,65,1,106,33,0,12,1,11,11,32,3,32,1,179,149,11,147,8,3,3,127,2,125,3,124,2,64,35,4,33,3,35,4,65,16,106,36,4,32,0,40,2,4,33,4,32,0,40,2,0,33,2,32,1,69,4,64,65,0,65,224,46,32,3,16,44,32,3,36,4,65,1,15,11,32,1,65,139,47,16,41,69,4,64,32,0,16,69,12,1,11,32,1,65,144,47,16,41,69,4,64,32,0,67,0,0,0,63,16,77,12,1,11,32,1,65,154,47,16,41,69,4,64,32,2,184,33,7,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,68,72,225,122,20,174,71,225,63,32,0,184,68,24,45,68,84,251,33,25,64,162,32,7,163,182,187,16,35,182,187,68,113,61,10,215,163,112,221,63,162,161,182,56,2,0,32,0,65,1,106,33,0,12,1,11,11,12,1,11,32,1,65,162,47,16,41,69,4,64,32,2,184,33,7,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,68,0,0,0,0,0,0,224,63,32,0,184,68,24,45,68,84,251,33,25,64,162,32,7,163,182,187,16,35,182,187,68,0,0,0,0,0,0,224,63,162,161,182,56,2,0,32,0,65,1,106,33,0,12,1,11,11,12,1,11,32,3,65,8,106,33,0,2,64,32,1,65,170,47,16,41,4,64,32,1,65,179,47,16,41,69,4,64,32,2,184,68,0,0,0,0,0,0,240,191,160,33,7,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,68,225,122,20,174,71,225,218,63,32,0,184,34,8,68,24,45,68,84,251,33,25,64,162,32,7,163,182,187,16,35,182,187,68,0,0,0,0,0,0,224,63,162,161,32,8,68,24,45,68,84,251,33,41,64,162,32,7,163,182,187,16,35,182,187,68,123,20,174,71,225,122,180,63,162,160,182,56,2,0,32,0,65,1,106,33,0,12,1,11,11,12,3,11,32,1,65,188,47,16,41,69,4,64,32,2,184,68,0,0,0,0,0,0,240,191,160,33,7,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,68,246,40,92,143,194,245,214,63,32,0,184,34,8,68,24,45,68,84,251,33,25,64,162,32,7,163,182,187,16,35,182,187,68,142,175,61,179,36,64,223,63,162,161,32,8,68,24,45,68,84,251,33,41,64,162,32,7,163,182,187,16,35,182,187,68,189,24,202,137,118,21,194,63,162,160,32,8,68,210,33,51,127,124,217,50,64,162,32,7,163,182,187,16,35,182,187,68,178,99,35,16,175,235,135,63,162,161,182,56,2,0,32,0,65,1,106,33,0,12,1,11,11,12,3,11,32,1,65,204,47,16,41,69,4,64,32,2,65,127,106,184,34,7,68,0,0,0,0,0,0,224,63,162,33,8,32,7,68,0,0,0,0,0,0,208,63,162,33,7,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,32,0,184,32,8,161,32,7,163,34,9,32,9,162,68,0,0,0,0,0,0,224,191,162,182,187,16,1,182,56,2,0,32,0,65,1,106,33,0,12,1,11,11,12,3,11,32,1,65,213,47,16,41,69,4,64,32,2,184,34,7,68,0,0,0,0,0,0,240,63,160,33,8,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,68,0,0,0,0,0,0,240,63,32,0,184,68,0,0,0,0,0,0,0,64,162,32,7,161,32,8,163,34,9,32,9,162,161,182,56,2,0,32,0,65,1,106,33,0,12,1,11,11,12,3,11,32,1,65,219,47,16,41,4,64,32,1,65,227,48,16,41,69,13,2,32,0,32,1,54,2,0,65,0,65,226,47,32,0,16,44,32,3,36,4,65,1,15,11,32,2,179,34,5,67,0,0,128,63,146,33,6,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,67,0,0,128,63,32,0,179,67,0,0,0,64,148,32,5,147,32,6,149,139,147,56,2,0,32,0,65,1,106,33,0,12,1,11,11,12,2,11,11,32,2,184,33,7,65,0,33,0,3,64,32,0,32,2,71,4,64,32,4,32,0,65,2,116,106,68,0,0,0,0,0,0,240,63,32,0,184,68,24,45,68,84,251,33,25,64,162,32,7,163,182,187,16,35,182,187,161,68,0,0,0,0,0,0,224,63,162,182,56,2,0,32,0,65,1,106,33,0,12,1,11,11,32,3,36,4,65,0,15,11,32,3,36,4,65,0,11,115,2,2,127,1,125,32,0,40,2,20,33,3,32,1,32,0,40,2,24,34,4,16,62,32,3,32,4,16,82,32,0,40,2,28,32,1,40,2,4,32,0,65,32,106,34,1,40,2,0,16,87,32,0,40,2,16,32,1,40,2,0,32,2,16,173,1,32,2,40,2,4,34,1,32,0,40,2,8,179,32,0,40,2,12,179,149,32,1,42,2,0,34,5,67,0,0,0,0,94,4,125,32,5,5,67,0,0,0,0,11,148,56,2,0,11,129,1,1,5,127,32,1,65,4,106,33,4,32,0,65,16,106,33,5,32,0,65,8,106,33,6,3,64,32,2,32,1,40,2,0,73,4,64,32,4,40,2,0,32,2,65,2,116,106,34,3,32,3,42,2,0,32,0,42,2,0,147,56,2,0,32,4,40,2,0,32,2,65,2,116,106,34,3,32,3,42,2,0,32,5,42,2,0,148,56,2,0,32,4,40,2,0,32,2,65,2,116,106,34,3,32,3,42,2,0,32,6,42,2,0,146,56,2,0,32,2,65,1,106,33,2,12,1,11,11,11,53,1,1,127,65,24,16,43,34,3,4,64,32,3,65,124,106,40,2,0,65,3,113,4,64,32,3,65,0,65,24,16,42,26,11,11,32,3,32,0,32,1,67,0,0,0,0,32,2,16,113,32,3,11,87,1,1,125,32,0,32,1,16,59,32,0,40,2,16,32,0,40,2,36,40,2,4,32,2,16,158,1,32,2,40,2,4,34,1,42,2,0,34,3,67,0,0,0,0,94,69,4,64,32,1,67,0,0,0,0,56,2,0,15,11,32,1,32,0,40,2,8,184,32,3,187,68,0,0,0,0,0,0,0,0,160,163,182,56,2,0,11,63,1,1,127,35,4,33,1,35,4,65,16,106,36,4,32,1,65,224,55,54,2,0,2,127,2,64,2,64,32,0,14,5,0,1,1,0,0,1,11,65,244,29,12,1,11,65,240,30,11,34,0,65,0,32,1,16,201,1,32,1,36,4,11,161,1,1,3,127,32,1,40,2,0,33,3,32,0,32,1,16,82,32,0,16,116,32,1,65,4,106,33,4,32,2,65,4,106,33,5,65,0,33,1,3,64,32,3,32,1,71,4,64,32,5,40,2,0,32,3,32,1,107,65,127,106,65,2,116,106,32,4,40,2,0,32,1,65,2,116,106,40,2,0,54,2,0,32,1,65,1,106,33,1,12,1,11,11,32,0,32,2,16,82,32,0,16,116,65,0,33,0,3,64,32,3,32,0,71,4,64,32,4,40,2,0,32,0,65,2,116,106,32,5,40,2,0,32,3,32,0,107,65,127,106,65,2,116,106,40,2,0,54,2,0,32,0,65,1,106,33,0,12,1,11,11,11,207,1,1,1,127,2,64,35,4,33,1,35,4,65,16,106,36,4,2,64,65,227,48,65,131,36,16,41,4,64,65,227,48,65,136,36,16,41,4,64,65,227,48,65,142,36,16,41,4,64,65,227,48,65,148,36,16,41,4,64,65,227,48,65,151,36,16,41,4,64,65,227,48,65,154,36,16,41,69,4,64,32,0,65,1,54,2,4,12,7,11,65,227,48,65,159,36,16,41,69,4,64,32,0,65,2,54,2,4,12,7,11,65,227,48,65,164,36,16,41,4,64,65,227,48,65,227,48,16,41,69,13,6,32,1,65,227,48,54,2,0,65,4,65,168,36,32,1,16,44,5,32,0,65,3,54,2,4,32,0,65,3,54,2,44,32,1,36,4,15,11,11,11,11,11,11,11,32,0,65,0,54,2,4,32,0,65,1,54,2,44,32,1,36,4,15,11,32,0,65,2,54,2,44,32,1,36,4,11,161,15,1,4,127,2,64,2,64,35,4,33,3,35,4,65,32,106,36,4,32,1,65,1,72,4,64,32,3,32,1,54,2,0,65,0,65,177,43,32,3,16,44,12,1,11,32,3,65,8,106,33,2,32,0,69,4,64,65,0,65,251,43,32,2,16,44,12,1,11,32,3,65,16,106,33,2,32,0,40,2,0,34,4,65,5,71,4,64,32,2,32,4,54,2,0,65,0,65,195,44,32,2,16,44,12,1,11,32,3,65,24,106,33,4,32,0,32,1,54,2,4,32,0,40,2,8,33,5,32,0,40,2,12,34,2,40,2,4,33,0,32,5,40,2,4,33,2,2,64,32,1,65,128,250,1,72,4,64,32,1,65,128,253,0,72,4,64,32,1,65,145,214,0,72,4,64,32,1,65,192,62,107,13,3,32,0,68,236,123,113,246,244,179,229,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,236,123,113,246,244,179,245,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,236,123,113,246,244,179,229,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,36,82,178,234,200,21,229,191,57,3,8,32,2,68,14,69,226,106,2,223,242,191,57,3,16,32,2,68,232,115,95,124,69,40,219,63,57,3,24,32,2,68,157,166,170,29,227,138,218,63,57,3,32,5,32,1,65,145,214,0,107,13,3,32,0,68,3,95,4,136,33,53,227,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,3,95,4,136,33,53,243,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,3,95,4,136,33,53,227,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,237,29,28,24,161,219,235,191,57,3,8,32,2,68,201,12,34,26,70,235,236,191,57,3,16,32,2,68,99,99,70,121,55,116,222,63,57,3,24,32,2,68,195,52,224,228,248,30,211,63,57,3,32,11,12,4,11,32,1,65,162,172,1,72,4,64,32,1,65,128,253,0,107,13,2,32,0,68,134,153,213,129,148,208,223,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,134,153,213,129,148,208,239,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,134,153,213,129,148,208,223,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,32,11,58,240,223,152,242,191,57,3,8,32,2,68,94,53,4,169,97,138,222,191,57,3,16,32,2,68,122,8,107,61,179,79,222,63,57,3,24,32,2,68,133,147,92,16,152,64,197,63,57,3,32,12,4,11,2,64,2,64,32,1,65,162,172,1,107,34,5,4,64,32,5,65,158,15,70,4,64,12,2,5,12,3,11,0,11,32,0,68,229,177,73,187,74,208,217,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,229,177,73,187,74,208,233,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,229,177,73,187,74,208,217,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,158,16,179,124,86,49,247,191,57,3,8,32,2,68,32,253,231,112,182,24,133,191,57,3,16,32,2,68,120,191,172,218,8,216,216,63,57,3,24,32,2,68,115,255,135,34,249,91,178,63,57,3,32,12,5,11,32,0,68,186,110,10,33,24,60,216,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,186,110,10,33,24,60,232,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,186,110,10,33,24,60,216,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,56,232,73,238,167,122,248,191,57,3,8,32,2,68,106,72,254,114,242,109,192,63,57,3,16,32,2,68,16,179,148,220,144,93,214,63,57,3,24,32,2,68,183,38,235,173,104,182,170,63,57,3,32,12,4,11,5,32,1,65,136,177,5,72,4,64,32,1,65,196,216,2,72,4,64,32,1,65,128,250,1,107,13,3,32,0,68,145,60,95,16,34,15,211,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,145,60,95,16,34,15,227,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,145,60,95,16,34,15,211,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,244,202,82,56,209,255,252,191,57,3,8,32,2,68,210,146,252,241,94,143,228,63,57,3,16,32,2,68,70,130,89,5,243,187,196,63,57,3,24,32,2,68,178,45,85,50,212,91,128,63,57,3,32,12,5,11,32,1,65,128,247,2,72,4,64,32,1,65,196,216,2,107,13,3,32,0,68,176,14,67,194,239,198,203,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,176,14,67,194,239,198,219,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,176,14,67,194,239,198,203,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,178,1,165,119,208,19,1,192,57,3,8,32,2,68,224,204,94,112,38,120,244,63,57,3,16,32,2,68,250,214,223,235,198,36,195,191,57,3,24,32,2,68,55,65,116,43,37,27,116,63,57,3,32,5,32,1,65,128,247,2,107,13,3,32,0,68,235,15,104,122,93,84,201,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,235,15,104,122,93,84,217,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,235,15,104,122,93,84,201,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,216,52,144,186,221,192,1,192,57,3,8,32,2,68,113,7,53,143,60,72,247,63,57,3,16,32,2,68,152,38,68,39,184,206,207,191,57,3,24,32,2,68,106,108,200,90,244,173,137,63,57,3,32,11,12,4,5,32,1,65,128,238,5,72,4,64,32,1,65,136,177,5,107,13,3,32,0,68,26,123,44,188,171,155,183,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,26,123,44,188,171,155,199,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,26,123,44,188,171,155,183,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,149,24,195,92,79,73,6,192,57,3,8,32,2,68,169,86,87,166,103,210,5,64,57,3,16,32,2,68,178,59,65,189,87,141,241,191,57,3,24,32,2,68,5,39,115,238,63,217,195,63,57,3,32,12,5,11,32,1,65,128,220,11,72,4,64,32,1,65,128,238,5,107,13,3,32,0,68,106,167,155,198,184,242,180,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,106,167,155,198,184,242,196,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,106,167,155,198,184,242,180,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,174,51,215,250,220,217,6,192,57,3,8,32,2,68,118,34,63,1,94,46,7,64,57,3,16,32,2,68,185,137,63,122,176,154,243,191,57,3,24,32,2,68,50,177,11,96,120,141,199,63,57,3,32,5,32,1,65,128,220,11,107,13,3,32,0,68,206,143,150,194,17,132,156,63,57,3,0,32,0,68,0,0,0,0,0,0,0,0,57,3,8,32,0,68,206,143,150,194,17,132,172,191,57,3,16,32,0,68,0,0,0,0,0,0,0,0,57,3,24,32,0,68,206,143,150,194,17,132,156,63,57,3,32,32,2,68,0,0,0,0,0,0,240,63,57,3,0,32,2,68,156,119,55,151,152,170,10,192,57,3,8,32,2,68,47,223,186,139,36,114,16,64,57,3,16,32,2,68,142,59,196,12,122,200,1,192,57,3,24,32,2,68,107,88,38,154,76,118,220,63,57,3,32,11,12,4,11,0,11,11,32,4,32,1,54,2,0,65,0,65,141,45,32,4,16,44,32,3,36,4,65,1,15,11,32,3,36,4,65,1,15,11,32,3,36,4,65,0,11,73,1,1,127,65,3,16,115,34,0,40,2,0,32,0,40,2,8,32,0,40,2,12,68,127,44,167,177,123,122,196,63,68,14,101,234,166,123,122,212,63,68,127,44,167,177,123,122,196,63,68,163,63,176,186,64,15,206,63,68,0,0,0,0,0,0,0,0,16,142,2,32,0,11,121,1,1,127,35,4,33,8,35,4,65,16,106,36,4,32,0,65,3,70,4,64,32,2,65,4,106,34,0,40,2,0,32,3,57,3,0,32,0,40,2,0,32,4,57,3,8,32,0,40,2,0,32,5,57,3,16,32,1,65,4,106,34,0,40,2,0,68,0,0,0,0,0,0,240,63,57,3,0,32,0,40,2,0,32,6,57,3,8,32,0,40,2,0,32,7,57,3,16,5,32,8,32,0,54,2,0,65,0,65,250,42,32,8,16,44,11,32,8,36,4,11,70,0,32,0,40,2,0,16,128,1,32,0,40,2,12,16,118,32,0,40,2,8,16,127,32,0,40,2,4,16,85,32,0,40,2,28,16,38,32,0,40,2,20,16,38,32,0,40,2,16,16,54,32,0,40,2,24,16,38,32,0,40,2,32,16,38,32,0,16,40,11,154,4,1,7,127,35,4,33,4,35,4,65,64,107,36,4,65,212,0,16,43,34,3,4,64,32,3,65,124,106,40,2,0,65,3,113,4,64,32,3,65,0,65,212,0,16,42,26,11,11,32,4,65,48,106,33,5,32,4,65,40,106,33,6,32,4,65,32,106,33,7,32,4,65,24,106,33,8,32,3,65,56,106,34,9,32,2,54,2,0,2,64,32,1,65,1,72,4,64,32,8,32,1,54,2,0,65,0,65,133,41,32,8,16,44,5,32,0,65,2,72,4,64,32,7,32,0,54,2,0,65,0,65,190,41,32,7,16,44,12,2,11,32,0,32,1,73,4,64,32,6,32,0,54,2,0,32,6,32,1,54,2,4,65,0,65,250,41,32,6,16,44,12,2,11,32,2,65,1,72,4,64,32,5,32,2,54,2,0,65,0,65,189,42,32,5,16,44,12,2,11,32,3,65,48,106,34,6,2,127,32,2,184,68,51,51,51,51,51,51,23,64,162,32,1,184,163,171,33,5,65,1,33,2,3,64,32,2,32,5,73,4,64,32,2,65,1,116,33,2,12,1,11,11,32,2,65,4,73,34,5,11,4,127,65,4,5,32,2,11,54,2,0,32,3,65,52,106,34,7,32,5,4,127,65,4,34,2,5,32,2,11,65,2,118,54,2,0,32,3,65,0,54,2,44,32,3,65,40,106,34,5,67,154,153,153,62,56,2,0,32,3,67,0,0,180,194,56,2,36,32,3,65,64,107,65,0,54,2,0,32,3,65,0,54,2,68,32,3,65,0,54,2,72,32,3,65,60,106,34,8,32,1,54,2,0,32,3,32,2,16,39,54,2,24,32,3,32,0,16,64,54,2,16,32,3,32,7,40,2,0,16,39,54,2,28,32,3,32,0,32,1,16,86,54,2,4,32,3,16,135,1,34,1,54,2,8,32,1,32,5,42,2,0,56,2,0,65,227,48,65,227,48,16,41,4,127,32,4,65,227,48,16,98,5,32,4,65,241,42,16,98,11,26,32,3,32,4,32,0,16,129,1,54,2,0,32,3,65,1,16,39,54,2,20,32,3,32,6,40,2,0,32,8,40,2,0,32,9,40,2,0,16,119,54,2,12,32,3,65,1,16,39,54,2,32,32,3,65,0,54,2,76,32,3,65,4,54,2,80,32,4,36,4,32,3,15,11,11,32,3,16,40,32,4,36,4,65,0,11,182,4,2,9,127,2,125,32,0,40,2,48,33,8,32,0,40,2,52,33,7,32,0,40,2,4,32,1,40,2,4,32,0,65,16,106,34,5,40,2,0,16,87,32,0,40,2,0,34,3,32,5,40,2,0,32,0,65,20,106,34,9,40,2,0,32,3,40,2,4,65,31,113,65,51,106,17,2,0,32,0,65,44,106,34,10,40,2,0,34,3,32,7,65,127,106,70,4,127,32,0,40,2,12,32,0,65,24,106,34,6,40,2,0,32,0,65,28,106,34,3,40,2,0,16,117,32,8,32,7,107,33,5,3,64,32,4,32,5,71,4,64,32,6,40,2,0,40,2,4,34,11,32,4,65,2,116,106,32,11,32,4,32,7,106,65,2,116,106,40,2,0,54,2,0,32,4,65,1,106,33,4,12,1,11,11,32,5,33,4,3,64,32,4,32,8,73,4,64,32,6,40,2,0,40,2,4,32,4,65,2,116,106,67,0,0,0,0,56,2,0,32,4,65,1,106,33,4,12,1,11,11,32,10,65,127,54,2,0,32,3,33,4,65,0,5,32,8,32,7,107,33,5,32,0,65,28,106,33,4,32,0,65,24,106,33,6,32,3,65,1,106,11,33,3,32,10,32,3,54,2,0,32,0,65,8,106,34,3,40,2,0,32,9,40,2,0,40,2,4,42,2,0,32,0,40,2,32,16,142,1,32,6,40,2,0,40,2,4,32,5,32,10,40,2,0,106,65,2,116,106,32,3,40,2,0,40,2,36,34,3,40,2,4,40,2,0,54,2,0,32,2,65,4,106,34,2,40,2,0,67,0,0,0,0,56,2,0,32,0,65,36,106,33,3,32,0,65,64,107,33,5,32,0,65,60,106,33,6,32,0,65,196,0,106,33,7,32,0,65,204,0,106,33,8,65,1,33,0,3,64,32,4,40,2,0,40,2,4,34,9,42,2,0,32,0,179,94,4,64,32,9,32,0,65,2,116,106,42,2,0,34,12,142,34,13,32,10,40,2,0,178,91,4,64,32,2,40,2,0,32,12,32,13,147,56,2,0,32,1,32,3,42,2,0,16,107,65,1,70,4,64,32,2,40,2,0,67,0,0,0,0,56,2,0,11,32,7,32,5,40,2,0,32,2,40,2,0,42,2,0,32,6,40,2,0,179,148,67,0,0,0,63,146,142,169,106,34,9,54,2,0,32,8,32,9,54,2,0,11,32,0,65,1,106,33,0,12,1,11,11,32,5,32,5,40,2,0,32,6,40,2,0,106,54,2,0,11,62,1,2,125,32,0,42,2,68,34,1,67,0,0,0,0,91,4,64,67,0,0,0,0,15,11,32,0,40,2,32,34,0,16,55,34,2,67,0,0,0,0,91,4,64,67,0,0,0,0,15,11,32,0,32,1,16,248,1,32,2,149,11,246,1,2,4,127,2,125,32,2,65,2,73,4,64,65,4,15,11,32,0,65,4,106,33,3,32,2,65,2,116,33,4,32,2,65,6,108,34,5,65,2,106,32,1,73,4,64,32,2,65,3,108,33,1,65,126,33,0,3,64,32,0,65,2,71,4,64,32,7,32,3,40,2,0,34,2,32,4,32,0,106,65,2,116,106,42,2,0,146,33,7,32,8,32,2,32,1,32,0,106,65,2,116,106,42,2,0,146,33,8,32,0,65,1,106,33,0,12,1,11,11,5,32,2,65,1,116,33,6,32,2,65,3,108,33,2,65,126,33,0,3,64,32,0,65,2,71,4,64,32,7,32,3,40,2,0,34,1,32,4,32,0,106,65,2,116,106,42,2,0,32,1,32,6,32,0,106,65,2,116,106,42,2,0,146,146,33,7,32,8,32,1,32,2,32,0,106,65,2,116,106,42,2,0,32,1,32,5,32,0,106,65,2,116,106,42,2,0,146,146,33,8,32,0,65,1,106,33,0,12,1,11,11,11,32,8,32,7,94,4,127,65,3,5,65,4,11,11,222,6,3,22,127,4,125,2,124,32,0,65,56,106,34,10,40,2,0,33,2,32,0,65,60,106,34,11,40,2,0,33,3,32,0,42,2,76,33,25,32,0,65,208,0,106,34,12,42,2,0,33,26,32,0,65,212,0,106,34,13,42,2,0,33,23,32,0,40,2,8,40,2,0,33,7,32,0,40,2,28,34,8,40,2,0,33,14,32,0,40,2,44,33,9,32,0,40,2,32,33,1,32,0,65,196,0,106,34,15,42,2,0,67,0,0,0,0,92,4,125,32,1,16,53,32,7,65,127,106,33,16,32,0,65,40,106,33,17,32,8,65,4,106,33,18,32,1,65,4,106,33,19,65,1,33,4,3,64,32,4,32,16,73,4,64,65,1,33,5,3,64,32,5,32,17,40,2,0,77,4,64,32,5,65,1,116,33,20,32,4,32,5,108,33,21,65,1,33,6,3,64,32,6,32,20,73,4,64,32,19,40,2,0,32,4,65,2,116,106,34,22,32,22,42,2,0,32,18,40,2,0,32,21,32,6,106,65,127,106,65,2,116,106,42,2,0,146,56,2,0,32,6,65,1,106,33,6,12,1,11,11,32,5,65,1,106,33,5,12,1,11,11,32,4,65,1,106,33,4,12,1,11,11,32,1,32,0,40,2,16,16,63,32,1,32,1,16,76,16,47,5,67,0,0,0,0,11,33,24,2,64,2,64,2,64,2,64,2,64,2,64,32,2,14,2,0,1,2,11,32,0,65,64,107,42,2,0,187,68,0,0,0,0,0,0,0,64,162,32,24,32,25,147,139,187,99,4,64,65,3,33,2,65,1,33,3,12,3,5,65,0,33,3,65,0,33,2,12,4,11,0,11,32,3,65,1,70,4,127,32,25,67,0,0,0,64,148,32,26,147,32,23,147,139,32,0,65,64,107,34,2,42,2,0,93,4,127,32,0,32,8,32,14,32,25,169,16,147,2,54,2,40,32,25,187,33,27,32,0,65,16,106,33,1,65,0,33,3,3,64,32,3,32,7,71,4,64,32,3,184,68,0,0,0,0,0,0,240,63,160,32,27,161,182,34,24,32,24,148,187,68,0,0,0,0,0,0,224,191,162,32,2,42,2,0,34,24,32,24,148,187,163,182,187,16,1,182,33,24,32,1,40,2,0,40,2,4,32,3,65,2,116,106,32,24,56,2,0,32,3,65,1,106,33,3,12,1,11,11,32,0,40,2,20,16,69,32,25,34,24,33,23,65,0,33,2,65,1,5,65,1,33,3,65,2,33,2,12,4,11,5,65,1,33,2,12,2,11,33,3,12,3,11,32,2,65,0,76,13,1,11,32,2,65,127,106,33,2,11,32,0,40,2,40,69,4,64,32,0,40,2,20,16,69,32,25,33,23,12,1,11,32,0,65,52,106,34,4,42,2,0,32,9,179,93,69,4,64,32,0,40,2,20,16,69,32,24,33,23,12,1,11,32,7,65,1,116,33,5,32,9,184,33,27,32,24,187,68,0,0,0,0,0,0,192,63,162,33,28,32,0,65,20,106,33,6,65,0,33,1,3,125,32,1,32,5,70,4,125,32,24,5,32,1,184,68,0,0,0,0,0,0,240,63,160,32,27,161,32,4,42,2,0,187,160,182,34,23,32,23,148,187,68,0,0,0,0,0,0,224,191,162,32,28,163,182,187,16,1,182,33,23,32,6,40,2,0,40,2,4,32,1,65,2,116,106,32,23,56,2,0,32,1,65,1,106,33,1,12,1,11,11,33,23,11,3,64,32,23,67,0,0,0,0,94,32,23,67,0,0,200,65,93,113,4,64,32,23,67,0,0,0,64,148,33,23,12,1,11,11,32,10,32,2,54,2,0,32,11,32,3,54,2,0,32,15,32,24,56,2,0,32,0,32,23,56,2,72,32,12,32,25,56,2,0,32,13,32,26,56,2,0,11,197,6,1,7,127,2,64,35,4,33,5,35,4,65,48,106,36,4,65,56,16,43,34,4,4,64,32,4,65,124,106,40,2,0,65,3,113,4,64,32,4,65,0,65,56,16,42,26,11,11,32,5,65,40,106,33,7,32,5,65,32,106,33,6,32,5,65,24,106,33,8,32,5,65,16,106,33,9,32,5,65,8,106,33,10,2,64,32,0,4,64,32,0,65,175,33,16,41,4,127,32,0,65,181,33,16,41,4,127,32,0,65,189,33,16,41,4,127,32,0,65,196,33,16,41,4,127,32,0,65,200,33,16,41,4,127,32,0,65,208,33,16,41,4,127,32,0,65,214,33,16,41,4,127,32,0,65,227,48,16,41,4,127,32,10,32,0,54,2,0,65,0,65,222,33,32,10,16,44,12,9,5,65,4,11,5,65,6,11,5,65,3,11,5,65,2,11,5,65,0,11,5,65,4,11,5,65,5,11,5,65,1,11,33,0,32,2,65,1,72,4,64,32,9,32,2,54,2,0,65,0,65,155,34,32,9,16,44,12,2,11,32,1,65,1,72,4,64,32,8,32,1,54,2,0,65,0,65,211,34,32,8,16,44,12,2,11,32,1,32,2,73,4,64,32,6,32,2,54,2,0,32,6,32,1,54,2,4,65,0,65,143,35,32,6,16,44,12,2,11,32,3,65,1,72,4,64,32,7,32,3,54,2,0,65,0,65,207,35,32,7,16,44,12,2,11,32,4,32,3,54,2,8,32,4,32,0,54,2,0,32,4,16,139,2,32,4,32,1,54,2,12,32,4,67,0,0,72,194,56,2,52,32,4,65,48,106,34,0,65,0,54,2,0,2,64,2,64,2,64,2,64,2,64,2,64,2,64,2,64,32,4,40,2,0,14,7,0,1,3,2,4,5,6,7,11,32,4,32,1,16,39,54,2,36,32,4,32,1,16,159,1,34,1,54,2,16,32,1,69,13,8,32,4,65,1,54,2,40,32,0,65,2,54,2,0,32,1,67,154,153,25,62,56,2,4,12,9,11,32,4,32,2,16,39,54,2,24,32,4,32,1,32,2,16,86,34,0,54,2,28,32,0,69,13,7,32,4,32,1,16,64,54,2,32,32,4,32,1,32,2,16,168,1,54,2,16,32,4,2,127,65,5,16,115,34,0,32,3,16,140,2,69,4,64,32,0,12,1,11,32,0,16,81,65,0,11,54,2,20,32,4,65,2,54,2,40,12,8,11,32,4,32,1,16,39,54,2,36,32,4,32,1,32,2,16,176,1,34,0,54,2,16,32,0,69,13,6,32,4,65,3,54,2,40,12,7,11,32,4,32,1,16,39,54,2,36,32,4,32,1,16,166,1,54,2,16,32,4,65,4,54,2,40,12,6,11,32,4,32,1,16,39,54,2,36,32,4,32,3,32,1,16,154,1,34,1,54,2,16,32,1,69,13,4,32,4,65,5,54,2,40,32,0,65,3,54,2,0,32,1,67,154,153,89,63,56,2,28,12,5,11,32,4,32,1,16,39,54,2,36,32,4,32,1,16,157,1,34,1,54,2,16,32,1,69,13,3,32,4,65,6,54,2,40,32,0,65,4,54,2,0,32,1,67,154,153,25,62,56,2,4,12,4,11,32,4,32,1,16,39,54,2,36,32,4,32,1,16,163,1,34,1,54,2,16,32,1,69,13,2,32,4,65,7,54,2,40,32,0,65,5,54,2,0,32,1,67,154,153,89,63,56,2,24,12,3,11,12,2,5,65,0,65,232,32,32,5,16,44,11,11,32,4,40,2,24,34,0,4,64,32,0,16,38,11,32,4,40,2,36,34,0,4,64,32,0,16,38,11,32,4,16,40,32,5,36,4,65,0,15,11,32,5,36,4,32,4,11,11,165,44,31,0,65,134,8,11,130,1,160,65,0,0,200,65,0,0,252,65,0,0,32,66,0,0,72,66,0,0,124,66,0,0,160,66,0,0,200,66,0,0,250,66,0,0,32,67,0,0,72,67,0,0,122,67,0,128,157,67,0,0,200,67,0,0,250,67,0,128,29,68,0,0,72,68,0,0,122,68,0,64,156,68,0,0,200,68,0,0,250,68,0,64,28,69,0,224,68,69,0,0,122,69,0,64,156,69,0,224,196,69,0,0,250,69,0,160,12,70,0,64,28,70,0,80,67,70,0,96,106,70,0,64,156,70,0,24,196,70,0,65,144,9,11,136,1,154,153,151,194,51,51,140,194,51,51,115,194,102,102,80,194,205,204,48,194,0,0,22,194,102,102,250,193,205,204,204,193,51,51,167,193,0,0,132,193,154,153,73,193,154,153,25,193,0,0,224,192,102,102,150,192,0,0,64,192,102,102,230,191,205,204,76,191,205,204,76,190,0,0,0,128,0,0,0,63,205,204,204,63,205,204,76,64,205,204,172,64,154,153,249,64,154,153,1,65,154,153,169,64,154,153,25,192,154,153,49,193,205,204,76,193,51,51,67,193,205,204,236,192,102,102,142,193,102,102,142,193,102,102,142,193,0,65,160,10,11,34,48,36,0,0,46,36,0,0,46,36,0,0,46,36,0,0,51,36,0,0,53,36,0,0,46,36,0,0,46,36,0,0,46,36,0,65,208,10,11,24,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,65,240,10,11,33,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,65,161,11,11,1,11,0,65,170,11,11,24,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,65,219,11,11,1,12,0,65,231,11,11,21,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,65,149,12,11,1,14,0,65,161,12,11,21,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,65,207,12,11,1,16,0,65,219,12,11,30,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,65,146,13,11,14,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,65,195,13,11,1,11,0,65,207,13,11,21,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,65,253,13,11,1,12,0,65,137,14,11,126,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,65,144,15,11,229,14,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,0,0,0,0,56,99,237,62,218,15,73,63,94,152,123,63,218,15,201,63,105,55,172,49,104,33,34,51,180,15,20,51,104,33,162,51,41,36,0,0,46,36,0,0,45,36,0,0,41,36,0,0,45,36,0,0,44,36,0,0,48,36,0,0,45,36,0,0,44,36,0,0,48,36,0,0,44,36,0,0,51,36,0,0,45,36,0,0,5,0,65,128,30,11,1,1,0,65,152,30,11,10,1,0,0,0,2,0,0,0,86,36,0,65,176,30,11,1,2,0,65,191,30,11,5,255,255,255,255,255,0,65,240,30,11,1,5,0,65,252,30,11,1,1,0,65,148,31,11,14,3,0,0,0,2,0,0,0,232,29,0,0,0,4,0,65,172,31,11,1,1,0,65,187,31,11,5,10,255,255,255,255,0,65,144,32,11,1,4,0,65,183,32,11,5,255,255,255,255,255,0,65,232,32,11,232,22,65,85,66,73,79,32,69,82,82,79,82,58,32,112,105,116,99,104,58,32,99,97,110,32,110,111,116,32,117,115,101,32,226,128,152,78,85,76,76,226,128,152,32,102,111,114,32,112,105,116,99,104,32,100,101,116,101,99,116,105,111,110,32,109,101,116,104,111,100,10,0,109,99,111,109,98,0,121,105,110,102,97,115,116,0,121,105,110,102,102,116,0,121,105,110,0,115,99,104,109,105,116,116,0,102,99,111,109,98,0,115,112,101,99,97,99,102,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,105,116,99,104,58,32,117,110,107,110,111,119,110,32,112,105,116,99,104,32,100,101,116,101,99,116,105,111,110,32,109,101,116,104,111,100,32,226,128,152,37,115,226,128,153,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,105,116,99,104,58,32,103,111,116,32,104,111,112,115,105,122,101,32,37,100,44,32,98,117,116,32,99,97,110,32,110,111,116,32,98,101,32,60,32,49,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,105,116,99,104,58,32,103,111,116,32,98,117,102,102,101,114,95,115,105,122,101,32,37,100,44,32,98,117,116,32,99,97,110,32,110,111,116,32,98,101,32,60,32,49,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,105,116,99,104,58,32,104,111,112,32,115,105,122,101,32,40,37,100,41,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,119,105,110,32,115,105,122,101,32,40,37,100,41,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,105,116,99,104,58,32,115,97,109,112,108,101,114,97,116,101,32,40,37,100,41,32,99,97,110,32,110,111,116,32,98,101,32,60,32,49,10,0,102,114,101,113,0,104,101,114,116,122,0,72,101,114,116,122,0,72,122,0,102,48,0,109,105,100,105,0,99,101,110,116,0,98,105,110,0,65,85,66,73,79,32,87,65,82,78,73,78,71,58,32,112,105,116,99,104,58,32,117,110,107,110,111,119,110,32,112,105,116,99,104,32,100,101,116,101,99,116,105,111,110,32,117,110,105,116,32,226,128,152,37,115,226,128,153,44,32,117,115,105,110,103,32,100,101,102,97,117,108,116,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,102,102,116,58,32,103,111,116,32,119,105,110,115,105,122,101,32,37,100,44,32,98,117,116,32,99,97,110,32,110,111,116,32,98,101,32,60,32,50,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,102,102,116,58,32,99,97,110,32,111,110,108,121,32,99,114,101,97,116,101,32,119,105,116,104,32,115,105,122,101,115,32,112,111,119,101,114,32,111,102,32,116,119,111,44,32,114,101,113,117,101,115,116,101,100,32,37,100,44,32,116,114,121,32,114,101,99,111,109,112,105,108,105,110,103,32,97,117,98,105,111,32,119,105,116,104,32,45,45,101,110,97,98,108,101,45,102,102,116,119,51,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,118,111,99,58,32,103,111,116,32,104,111,112,95,115,105,122,101,32,37,100,44,32,98,117,116,32,99,97,110,32,110,111,116,32,98,101,32,60,32,49,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,118,111,99,58,32,103,111,116,32,98,117,102,102,101,114,95,115,105,122,101,32,37,100,44,32,98,117,116,32,99,97,110,32,110,111,116,32,98,101,32,60,32,50,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,112,118,111,99,58,32,104,111,112,32,115,105,122,101,32,40,37,100,41,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,119,105,110,32,115,105,122,101,32,40,37,100,41,10,0,101,110,101,114,103,121,0,115,112,101,99,100,105,102,102,0,104,102,99,0,99,111,109,112,108,101,120,100,111,109,97,105,110,0,99,111,109,112,108,101,120,0,112,104,97,115,101,0,119,112,104,97,115,101,0,109,107,108,0,107,108,0,99,101,110,116,114,111,105,100,0,115,112,114,101,97,100,0,115,107,101,119,110,101,115,115,0,107,117,114,116,111,115,105,115,0,115,108,111,112,101,0,100,101,99,114,101,97,115,101,0,114,111,108,108,111,102,102,0,111,108,100,95,100,101,102,97,117,108,116,0,65,85,66,73,79,32,69,82,82,79,82,58,32,117,110,107,110,111,119,110,32,115,112,101,99,116,114,97,108,32,100,101,115,99,114,105,112,116,111,114,32,116,121,112,101,32,37,115,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,116,101,109,112,111,58,32,103,111,116,32,104,111,112,32,115,105,122,101,32,37,100,44,32,98,117,116,32,99,97,110,32,110,111,116,32,98,101,32,60,32,49,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,116,101,109,112,111,58,32,103,111,116,32,119,105,110,100,111,119,32,115,105,122,101,32,37,100,44,32,98,117,116,32,99,97,110,32,110,111,116,32,98,101,32,60,32,50,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,116,101,109,112,111,58,32,104,111,112,32,115,105,122,101,32,40,37,100,41,32,105,115,32,108,97,114,103,101,114,32,116,104,97,110,32,119,105,110,100,111,119,32,115,105,122,101,32,40,37,100,41,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,116,101,109,112,111,58,32,115,97,109,112,108,101,114,97,116,101,32,40,37,100,41,32,99,97,110,32,110,111,116,32,98,101,32,60,32,49,10,0,115,112,101,99,102,108,117,120,0,65,85,66,73,79,32,69,82,82,79,82,58,32,111,114,100,101,114,32,111,102,32,98,105,113,117,97,100,32,102,105,108,116,101,114,32,109,117,115,116,32,98,101,32,51,44,32,110,111,116,32,37,100,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,97,117,98,105,111,95,102,105,108,116,101,114,58,32,102,97,105,108,101,100,32,115,101,116,116,105,110,103,32,67,45,119,101,105,103,104,116,105,110,103,32,119,105,116,104,32,115,97,109,112,108,101,114,97,116,101,32,37,100,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,97,117,98,105,111,95,102,105,108,116,101,114,58,32,102,97,105,108,101,100,32,115,101,116,116,105,110,103,32,67,45,119,101,105,103,104,116,105,110,103,32,119,105,116,104,32,102,105,108,116,101,114,32,78,85,76,76,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,97,117,98,105,111,95,102,105,108,116,101,114,58,32,111,114,100,101,114,32,111,102,32,67,45,119,101,105,103,104,116,105,110,103,32,102,105,108,116,101,114,32,109,117,115,116,32,98,101,32,53,44,32,110,111,116,32,37,100,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,115,97,109,112,108,105,110,103,32,114,97,116,101,32,111,102,32,67,45,119,101,105,103,104,116,105,110,103,32,102,105,108,116,101,114,32,105,115,32,37,100,44,32,115,104,111,117,108,100,32,98,101,32,111,110,101,32,111,102,32,56,48,48,48,44,32,49,49,48,50,53,44,32,49,54,48,48,48,44,32,50,50,48,53,48,44,32,50,52,48,48,48,44,32,51,50,48,48,48,44,32,52,52,49,48,48,44,32,52,56,48,48,48,44,32,56,56,50,48,48,44,32,57,54,48,48,48,44,32,49,57,50,48,48,48,46,10,0,37,115,0,65,85,66,73,79,32,69,82,82,79,82,58,32,116,114,121,105,110,103,32,116,111,32,99,111,112,121,32,37,100,32,101,108,101,109,101,110,116,115,32,116,111,32,37,100,32,101,108,101,109,101,110,116,115,32,10,0,65,85,66,73,79,32,69,82,82,79,82,58,32,119,105,110,100,111,119,32,116,121,112,101,32,99,97,110,32,110,111,116,32,98,101,32,110,117,108,108,46,10,0,111,110,101,115,0,114,101,99,116,97,110,103,108,101,0,104,97,109,109,105,110,103,0,104,97,110,110,105,110,103,0,104,97,110,110,105,110,103,122,0,98,108,97,99,107,109,97,110,0,98,108,97,99,107,109,97,110,95,104,97,114,114,105,115,0,103,97,117,115,115,105,97,110,0,119,101,108,99,104,0,112,97,114,122,101,110,0,65,85,66,73,79,32,69,82,82,79,82,58,32,117,110,107,110,111,119,110,32,119,105,110,100,111,119,32,116,121,112,101,32,96,37,115,96,46,10,0,105,105,0,118,0,70,70,84,0,118,105,0,105,105,105,0,102,111,114,119,97,114,100,0,105,105,105,105,0,105,110,118,101,114,115,101,0,110,111,114,109,0,112,104,97,115,0,84,101,109,112,111,0,105,105,105,105,105,0,102,105,105,105,0,103,101,116,66,112,109,0,102,105,105,0,103,101,116,67,111,110,102,105,100,101,110,99,101,0,100,101,102,97,117,108,116,0,80,105,116,99,104,0,105,105,105,105,105,105,0,100,111,0,118,111,105,100,0,98,111,111,108,0,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,105,110,116,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,37,112,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,]);// This file will not run on it's own\n\nconst {\n  Module,\n  instantiate,\n  Memory,\n  Table\n} = WebAssembly;\n\nconst WebAssemblyModule = function(deps = {\n  'global': {},\n  'env': {\n    'memory': new Memory({initial: 10, limit: 100}),\n    'table': new Table({initial: 0, element: 'anyfunc'})\n  }\n}) {\n  return instantiate(buffer, deps);\n}\n\nmodule.exports = WebAssemblyModule;\n\n\n//# sourceURL=webpack://frequencyRecognizer/./external/aubio.wasm?");

/***/ }),

/***/ "?65c5":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://frequencyRecognizer/fs_(ignored)?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./lib/index.js");
/******/ })()
;
});